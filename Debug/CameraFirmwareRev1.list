
CameraFirmwareRev1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c384  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800c650  0800c650  0001c650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c6b8  0800c6b8  0001c6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c6bc  0800c6bc  0001c6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000134  24000000  0800c6c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004950  24000134  0800c7f4  00020134  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24004a84  0800c7f4  00024a84  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f183  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000480f  00000000  00000000  0003f328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a30  00000000  00000000  00043b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000140d  00000000  00000000  00045568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037c3d  00000000  00000000  00046975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002505f  00000000  00000000  0007e5b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015308d  00000000  00000000  000a3611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006dac  00000000  00000000  001f66a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000077  00000000  00000000  001fd44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000134 	.word	0x24000134
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800c638 	.word	0x0800c638

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000138 	.word	0x24000138
 8000308:	0800c638 	.word	0x0800c638

0800030c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800030c:	b480      	push	{r7}
 800030e:	b087      	sub	sp, #28
 8000310:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000312:	4b30      	ldr	r3, [pc, #192]	; (80003d4 <MX_GPIO_Init+0xc8>)
 8000314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000318:	4a2e      	ldr	r2, [pc, #184]	; (80003d4 <MX_GPIO_Init+0xc8>)
 800031a:	f043 0310 	orr.w	r3, r3, #16
 800031e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000322:	4b2c      	ldr	r3, [pc, #176]	; (80003d4 <MX_GPIO_Init+0xc8>)
 8000324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000328:	f003 0310 	and.w	r3, r3, #16
 800032c:	617b      	str	r3, [r7, #20]
 800032e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000330:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <MX_GPIO_Init+0xc8>)
 8000332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000336:	4a27      	ldr	r2, [pc, #156]	; (80003d4 <MX_GPIO_Init+0xc8>)
 8000338:	f043 0320 	orr.w	r3, r3, #32
 800033c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000340:	4b24      	ldr	r3, [pc, #144]	; (80003d4 <MX_GPIO_Init+0xc8>)
 8000342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000346:	f003 0320 	and.w	r3, r3, #32
 800034a:	613b      	str	r3, [r7, #16]
 800034c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034e:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <MX_GPIO_Init+0xc8>)
 8000350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000354:	4a1f      	ldr	r2, [pc, #124]	; (80003d4 <MX_GPIO_Init+0xc8>)
 8000356:	f043 0304 	orr.w	r3, r3, #4
 800035a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800035e:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <MX_GPIO_Init+0xc8>)
 8000360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000364:	f003 0304 	and.w	r3, r3, #4
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036c:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <MX_GPIO_Init+0xc8>)
 800036e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000372:	4a18      	ldr	r2, [pc, #96]	; (80003d4 <MX_GPIO_Init+0xc8>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800037c:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <MX_GPIO_Init+0xc8>)
 800037e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <MX_GPIO_Init+0xc8>)
 800038c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000390:	4a10      	ldr	r2, [pc, #64]	; (80003d4 <MX_GPIO_Init+0xc8>)
 8000392:	f043 0302 	orr.w	r3, r3, #2
 8000396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <MX_GPIO_Init+0xc8>)
 800039c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003a0:	f003 0302 	and.w	r3, r3, #2
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a8:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <MX_GPIO_Init+0xc8>)
 80003aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ae:	4a09      	ldr	r2, [pc, #36]	; (80003d4 <MX_GPIO_Init+0xc8>)
 80003b0:	f043 0308 	orr.w	r3, r3, #8
 80003b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <MX_GPIO_Init+0xc8>)
 80003ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003be:	f003 0308 	and.w	r3, r3, #8
 80003c2:	603b      	str	r3, [r7, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]

}
 80003c6:	bf00      	nop
 80003c8:	371c      	adds	r7, #28
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	58024400 	.word	0x58024400

080003d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003dc:	f000 fe24 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e0:	f000 f812 	bl	8000408 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80003e4:	f000 f886 	bl	80004f4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e8:	f7ff ff90 	bl	800030c <MX_GPIO_Init>
  MX_SAI1_Init();
 80003ec:	f000 f8a6 	bl	800053c <MX_SAI1_Init>
  MX_SPI1_Init();
 80003f0:	f000 fa1c 	bl	800082c <MX_SPI1_Init>
  MX_SPI2_Init();
 80003f4:	f000 fa70 	bl	80008d8 <MX_SPI2_Init>
  MX_TIM3_Init();
 80003f8:	f000 fc68 	bl	8000ccc <MX_TIM3_Init>
  MX_USART3_Init();
 80003fc:	f000 fcfc 	bl	8000df8 <MX_USART3_Init>
  MX_USB_DEVICE_Init();
 8000400:	f00b fc46 	bl	800bc90 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000404:	e7fe      	b.n	8000404 <main+0x2c>
	...

08000408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b09c      	sub	sp, #112	; 0x70
 800040c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000412:	224c      	movs	r2, #76	; 0x4c
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f00c f8e2 	bl	800c5e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2220      	movs	r2, #32
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f00c f8dc 	bl	800c5e0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000428:	2002      	movs	r0, #2
 800042a:	f002 fc25 	bl	8002c78 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800042e:	2300      	movs	r3, #0
 8000430:	603b      	str	r3, [r7, #0]
 8000432:	4b2f      	ldr	r3, [pc, #188]	; (80004f0 <SystemClock_Config+0xe8>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800043a:	4a2d      	ldr	r2, [pc, #180]	; (80004f0 <SystemClock_Config+0xe8>)
 800043c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000440:	6193      	str	r3, [r2, #24]
 8000442:	4b2b      	ldr	r3, [pc, #172]	; (80004f0 <SystemClock_Config+0xe8>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800044e:	bf00      	nop
 8000450:	4b27      	ldr	r3, [pc, #156]	; (80004f0 <SystemClock_Config+0xe8>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800045c:	d1f8      	bne.n	8000450 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI
 800045e:	2332      	movs	r3, #50	; 0x32
 8000460:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000462:	2301      	movs	r3, #1
 8000464:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000466:	2340      	movs	r3, #64	; 0x40
 8000468:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800046a:	2301      	movs	r3, #1
 800046c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800046e:	2380      	movs	r3, #128	; 0x80
 8000470:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8000472:	2310      	movs	r3, #16
 8000474:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000476:	2302      	movs	r3, #2
 8000478:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 800047a:	2301      	movs	r3, #1
 800047c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800047e:	2301      	movs	r3, #1
 8000480:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000482:	2330      	movs	r3, #48	; 0x30
 8000484:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000486:	2302      	movs	r3, #2
 8000488:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800048a:	2303      	movs	r3, #3
 800048c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800048e:	2302      	movs	r3, #2
 8000490:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000492:	2308      	movs	r3, #8
 8000494:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000496:	2300      	movs	r3, #0
 8000498:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004a2:	4618      	mov	r0, r3
 80004a4:	f002 fc32 	bl	8002d0c <HAL_RCC_OscConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80004ae:	f000 f83f 	bl	8000530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b2:	233f      	movs	r3, #63	; 0x3f
 80004b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004ce:	2300      	movs	r3, #0
 80004d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2101      	movs	r1, #1
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 fff2 	bl	80034c0 <HAL_RCC_ClockConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80004e2:	f000 f825 	bl	8000530 <Error_Handler>
  }
}
 80004e6:	bf00      	nop
 80004e8:	3770      	adds	r7, #112	; 0x70
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	58024800 	.word	0x58024800

080004f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b0ae      	sub	sp, #184	; 0xb8
 80004f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004fa:	463b      	mov	r3, r7
 80004fc:	22b8      	movs	r2, #184	; 0xb8
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f00c f86d 	bl	800c5e0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000506:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800050a:	f04f 0300 	mov.w	r3, #0
 800050e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000512:	2300      	movs	r3, #0
 8000514:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000516:	463b      	mov	r3, r7
 8000518:	4618      	mov	r0, r3
 800051a:	f003 fb5d 	bl	8003bd8 <HAL_RCCEx_PeriphCLKConfig>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000524:	f000 f804 	bl	8000530 <Error_Handler>
  }
}
 8000528:	bf00      	nop
 800052a:	37b8      	adds	r7, #184	; 0xb8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000534:	b672      	cpsid	i
}
 8000536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000538:	e7fe      	b.n	8000538 <Error_Handler+0x8>
	...

0800053c <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000540:	4b59      	ldr	r3, [pc, #356]	; (80006a8 <MX_SAI1_Init+0x16c>)
 8000542:	4a5a      	ldr	r2, [pc, #360]	; (80006ac <MX_SAI1_Init+0x170>)
 8000544:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000546:	4b58      	ldr	r3, [pc, #352]	; (80006a8 <MX_SAI1_Init+0x16c>)
 8000548:	2200      	movs	r2, #0
 800054a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODESLAVE_RX;
 800054c:	4b56      	ldr	r3, [pc, #344]	; (80006a8 <MX_SAI1_Init+0x16c>)
 800054e:	2203      	movs	r2, #3
 8000550:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_32;
 8000552:	4b55      	ldr	r3, [pc, #340]	; (80006a8 <MX_SAI1_Init+0x16c>)
 8000554:	22e0      	movs	r2, #224	; 0xe0
 8000556:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000558:	4b53      	ldr	r3, [pc, #332]	; (80006a8 <MX_SAI1_Init+0x16c>)
 800055a:	2200      	movs	r2, #0
 800055c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800055e:	4b52      	ldr	r3, [pc, #328]	; (80006a8 <MX_SAI1_Init+0x16c>)
 8000560:	2200      	movs	r2, #0
 8000562:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000564:	4b50      	ldr	r3, [pc, #320]	; (80006a8 <MX_SAI1_Init+0x16c>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800056a:	4b4f      	ldr	r3, [pc, #316]	; (80006a8 <MX_SAI1_Init+0x16c>)
 800056c:	2200      	movs	r2, #0
 800056e:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000570:	4b4d      	ldr	r3, [pc, #308]	; (80006a8 <MX_SAI1_Init+0x16c>)
 8000572:	2200      	movs	r2, #0
 8000574:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000576:	4b4c      	ldr	r3, [pc, #304]	; (80006a8 <MX_SAI1_Init+0x16c>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 800057c:	4b4a      	ldr	r3, [pc, #296]	; (80006a8 <MX_SAI1_Init+0x16c>)
 800057e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000582:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000584:	4b48      	ldr	r3, [pc, #288]	; (80006a8 <MX_SAI1_Init+0x16c>)
 8000586:	2200      	movs	r2, #0
 8000588:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800058a:	4b47      	ldr	r3, [pc, #284]	; (80006a8 <MX_SAI1_Init+0x16c>)
 800058c:	2200      	movs	r2, #0
 800058e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000590:	4b45      	ldr	r3, [pc, #276]	; (80006a8 <MX_SAI1_Init+0x16c>)
 8000592:	2200      	movs	r2, #0
 8000594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 8000598:	4b43      	ldr	r3, [pc, #268]	; (80006a8 <MX_SAI1_Init+0x16c>)
 800059a:	2200      	movs	r2, #0
 800059c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800059e:	4b42      	ldr	r3, [pc, #264]	; (80006a8 <MX_SAI1_Init+0x16c>)
 80005a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005a4:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 256;
 80005a6:	4b40      	ldr	r3, [pc, #256]	; (80006a8 <MX_SAI1_Init+0x16c>)
 80005a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ac:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80005ae:	4b3e      	ldr	r3, [pc, #248]	; (80006a8 <MX_SAI1_Init+0x16c>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80005b4:	4b3c      	ldr	r3, [pc, #240]	; (80006a8 <MX_SAI1_Init+0x16c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80005ba:	4b3b      	ldr	r3, [pc, #236]	; (80006a8 <MX_SAI1_Init+0x16c>)
 80005bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80005c0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80005c2:	4b39      	ldr	r3, [pc, #228]	; (80006a8 <MX_SAI1_Init+0x16c>)
 80005c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80005c8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80005ca:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <MX_SAI1_Init+0x16c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80005d0:	4b35      	ldr	r3, [pc, #212]	; (80006a8 <MX_SAI1_Init+0x16c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 2;
 80005d6:	4b34      	ldr	r3, [pc, #208]	; (80006a8 <MX_SAI1_Init+0x16c>)
 80005d8:	2202      	movs	r2, #2
 80005da:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000003;
 80005dc:	4b32      	ldr	r3, [pc, #200]	; (80006a8 <MX_SAI1_Init+0x16c>)
 80005de:	2203      	movs	r2, #3
 80005e0:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80005e2:	4831      	ldr	r0, [pc, #196]	; (80006a8 <MX_SAI1_Init+0x16c>)
 80005e4:	f005 fede 	bl	80063a4 <HAL_SAI_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_SAI1_Init+0xb6>
  {
    Error_Handler();
 80005ee:	f7ff ff9f 	bl	8000530 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80005f2:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <MX_SAI1_Init+0x174>)
 80005f4:	4a2f      	ldr	r2, [pc, #188]	; (80006b4 <MX_SAI1_Init+0x178>)
 80005f6:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80005f8:	4b2d      	ldr	r3, [pc, #180]	; (80006b0 <MX_SAI1_Init+0x174>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80005fe:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <MX_SAI1_Init+0x174>)
 8000600:	2203      	movs	r2, #3
 8000602:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_32;
 8000604:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <MX_SAI1_Init+0x174>)
 8000606:	22e0      	movs	r2, #224	; 0xe0
 8000608:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800060a:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <MX_SAI1_Init+0x174>)
 800060c:	2200      	movs	r2, #0
 800060e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <MX_SAI1_Init+0x174>)
 8000612:	2200      	movs	r2, #0
 8000614:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000616:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <MX_SAI1_Init+0x174>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <MX_SAI1_Init+0x174>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000622:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <MX_SAI1_Init+0x174>)
 8000624:	2200      	movs	r2, #0
 8000626:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <MX_SAI1_Init+0x174>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_MONOMODE;
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_SAI1_Init+0x174>)
 8000630:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000634:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000636:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <MX_SAI1_Init+0x174>)
 8000638:	2200      	movs	r2, #0
 800063a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_SAI1_Init+0x174>)
 800063e:	2200      	movs	r2, #0
 8000640:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000642:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <MX_SAI1_Init+0x174>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_SAI1_Init+0x174>)
 800064c:	2200      	movs	r2, #0
 800064e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_SAI1_Init+0x174>)
 8000652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000656:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.FrameLength = 256;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_SAI1_Init+0x174>)
 800065a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800065e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_SAI1_Init+0x174>)
 8000662:	2201      	movs	r2, #1
 8000664:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_SAI1_Init+0x174>)
 8000668:	2200      	movs	r2, #0
 800066a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_SAI1_Init+0x174>)
 800066e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000672:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_SAI1_Init+0x174>)
 8000676:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800067a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_SAI1_Init+0x174>)
 800067e:	2200      	movs	r2, #0
 8000680:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_SAI1_Init+0x174>)
 8000684:	2200      	movs	r2, #0
 8000686:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 2;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_SAI1_Init+0x174>)
 800068a:	2202      	movs	r2, #2
 800068c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000003;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_SAI1_Init+0x174>)
 8000690:	2203      	movs	r2, #3
 8000692:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000694:	4806      	ldr	r0, [pc, #24]	; (80006b0 <MX_SAI1_Init+0x174>)
 8000696:	f005 fe85 	bl	80063a4 <HAL_SAI_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_SAI1_Init+0x168>
  {
    Error_Handler();
 80006a0:	f7ff ff46 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	24000150 	.word	0x24000150
 80006ac:	40015804 	.word	0x40015804
 80006b0:	240001e8 	.word	0x240001e8
 80006b4:	40015824 	.word	0x40015824

080006b8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b0b8      	sub	sp, #224	; 0xe0
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	22b8      	movs	r2, #184	; 0xb8
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f00b ff89 	bl	800c5e0 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a50      	ldr	r2, [pc, #320]	; (8000814 <HAL_SAI_MspInit+0x15c>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d13e      	bne.n	8000756 <HAL_SAI_MspInit+0x9e>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80006d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006dc:	f04f 0300 	mov.w	r3, #0
 80006e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_CLKP;
 80006e4:	2304      	movs	r3, #4
 80006e6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 fa73 	bl	8003bd8 <HAL_RCCEx_PeriphCLKConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 80006f8:	f7ff ff1a 	bl	8000530 <Error_Handler>
    }

    if (SAI1_client == 0)
 80006fc:	4b46      	ldr	r3, [pc, #280]	; (8000818 <HAL_SAI_MspInit+0x160>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d10e      	bne.n	8000722 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000704:	4b45      	ldr	r3, [pc, #276]	; (800081c <HAL_SAI_MspInit+0x164>)
 8000706:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800070a:	4a44      	ldr	r2, [pc, #272]	; (800081c <HAL_SAI_MspInit+0x164>)
 800070c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000710:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000714:	4b41      	ldr	r3, [pc, #260]	; (800081c <HAL_SAI_MspInit+0x164>)
 8000716:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800071a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8000722:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <HAL_SAI_MspInit+0x160>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	3301      	adds	r3, #1
 8000728:	4a3b      	ldr	r2, [pc, #236]	; (8000818 <HAL_SAI_MspInit+0x160>)
 800072a:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800072c:	2370      	movs	r3, #112	; 0x70
 800072e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000744:	2306      	movs	r3, #6
 8000746:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800074a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800074e:	4619      	mov	r1, r3
 8000750:	4833      	ldr	r0, [pc, #204]	; (8000820 <HAL_SAI_MspInit+0x168>)
 8000752:	f000 fe2f 	bl	80013b4 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a32      	ldr	r2, [pc, #200]	; (8000824 <HAL_SAI_MspInit+0x16c>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d154      	bne.n	800080a <HAL_SAI_MspInit+0x152>
    {
      /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000764:	f04f 0300 	mov.w	r3, #0
 8000768:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_CLKP;
 800076c:	2304      	movs	r3, #4
 800076e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	4618      	mov	r0, r3
 8000776:	f003 fa2f 	bl	8003bd8 <HAL_RCCEx_PeriphCLKConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8000780:	f7ff fed6 	bl	8000530 <Error_Handler>
    }

      if (SAI1_client == 0)
 8000784:	4b24      	ldr	r3, [pc, #144]	; (8000818 <HAL_SAI_MspInit+0x160>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d10e      	bne.n	80007aa <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800078c:	4b23      	ldr	r3, [pc, #140]	; (800081c <HAL_SAI_MspInit+0x164>)
 800078e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000792:	4a22      	ldr	r2, [pc, #136]	; (800081c <HAL_SAI_MspInit+0x164>)
 8000794:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000798:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <HAL_SAI_MspInit+0x164>)
 800079e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <HAL_SAI_MspInit+0x160>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	4a19      	ldr	r2, [pc, #100]	; (8000818 <HAL_SAI_MspInit+0x160>)
 80007b2:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007b4:	2308      	movs	r3, #8
 80007b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80007cc:	2306      	movs	r3, #6
 80007ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80007d6:	4619      	mov	r1, r3
 80007d8:	4811      	ldr	r0, [pc, #68]	; (8000820 <HAL_SAI_MspInit+0x168>)
 80007da:	f000 fdeb 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80007f8:	2306      	movs	r3, #6
 80007fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000802:	4619      	mov	r1, r3
 8000804:	4808      	ldr	r0, [pc, #32]	; (8000828 <HAL_SAI_MspInit+0x170>)
 8000806:	f000 fdd5 	bl	80013b4 <HAL_GPIO_Init>

    }
}
 800080a:	bf00      	nop
 800080c:	37e0      	adds	r7, #224	; 0xe0
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40015804 	.word	0x40015804
 8000818:	24000280 	.word	0x24000280
 800081c:	58024400 	.word	0x58024400
 8000820:	58021000 	.word	0x58021000
 8000824:	40015824 	.word	0x40015824
 8000828:	58021400 	.word	0x58021400

0800082c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000830:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <MX_SPI1_Init+0xa4>)
 8000832:	4a28      	ldr	r2, [pc, #160]	; (80008d4 <MX_SPI1_Init+0xa8>)
 8000834:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000836:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <MX_SPI1_Init+0xa4>)
 8000838:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800083c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800083e:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <MX_SPI1_Init+0xa4>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000844:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <MX_SPI1_Init+0xa4>)
 8000846:	220f      	movs	r2, #15
 8000848:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800084a:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <MX_SPI1_Init+0xa4>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <MX_SPI1_Init+0xa4>)
 8000852:	2200      	movs	r2, #0
 8000854:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000856:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_SPI1_Init+0xa4>)
 8000858:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800085c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <MX_SPI1_Init+0xa4>)
 8000860:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000864:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_SPI1_Init+0xa4>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_SPI1_Init+0xa4>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_SPI1_Init+0xa4>)
 8000874:	2200      	movs	r2, #0
 8000876:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_SPI1_Init+0xa4>)
 800087a:	2200      	movs	r2, #0
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_SPI1_Init+0xa4>)
 8000880:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000884:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_SPI1_Init+0xa4>)
 8000888:	2200      	movs	r2, #0
 800088a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800088c:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_SPI1_Init+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_SPI1_Init+0xa4>)
 8000894:	2200      	movs	r2, #0
 8000896:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000898:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <MX_SPI1_Init+0xa4>)
 800089a:	2200      	movs	r2, #0
 800089c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_SPI1_Init+0xa4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <MX_SPI1_Init+0xa4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_SPI1_Init+0xa4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <MX_SPI1_Init+0xa4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_SPI1_Init+0xa4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_SPI1_Init+0xa4>)
 80008be:	f005 ffc5 	bl	800684c <HAL_SPI_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80008c8:	f7ff fe32 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	24000284 	.word	0x24000284
 80008d4:	40013000 	.word	0x40013000

080008d8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80008dc:	4b27      	ldr	r3, [pc, #156]	; (800097c <MX_SPI2_Init+0xa4>)
 80008de:	4a28      	ldr	r2, [pc, #160]	; (8000980 <MX_SPI2_Init+0xa8>)
 80008e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008e2:	4b26      	ldr	r3, [pc, #152]	; (800097c <MX_SPI2_Init+0xa4>)
 80008e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <MX_SPI2_Init+0xa4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_SPI2_Init+0xa4>)
 80008f2:	220f      	movs	r2, #15
 80008f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <MX_SPI2_Init+0xa4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_SPI2_Init+0xa4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_SPI2_Init+0xa4>)
 8000904:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000908:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_SPI2_Init+0xa4>)
 800090c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000910:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_SPI2_Init+0xa4>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <MX_SPI2_Init+0xa4>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_SPI2_Init+0xa4>)
 8000920:	2200      	movs	r2, #0
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_SPI2_Init+0xa4>)
 8000926:	2200      	movs	r2, #0
 8000928:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_SPI2_Init+0xa4>)
 800092c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000930:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_SPI2_Init+0xa4>)
 8000934:	2200      	movs	r2, #0
 8000936:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_SPI2_Init+0xa4>)
 800093a:	2200      	movs	r2, #0
 800093c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_SPI2_Init+0xa4>)
 8000940:	2200      	movs	r2, #0
 8000942:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000944:	4b0d      	ldr	r3, [pc, #52]	; (800097c <MX_SPI2_Init+0xa4>)
 8000946:	2200      	movs	r2, #0
 8000948:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_SPI2_Init+0xa4>)
 800094c:	2200      	movs	r2, #0
 800094e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <MX_SPI2_Init+0xa4>)
 8000952:	2200      	movs	r2, #0
 8000954:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_SPI2_Init+0xa4>)
 8000958:	2200      	movs	r2, #0
 800095a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <MX_SPI2_Init+0xa4>)
 800095e:	2200      	movs	r2, #0
 8000960:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_SPI2_Init+0xa4>)
 8000964:	2200      	movs	r2, #0
 8000966:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_SPI2_Init+0xa4>)
 800096a:	f005 ff6f 	bl	800684c <HAL_SPI_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000974:	f7ff fddc 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2400030c 	.word	0x2400030c
 8000980:	40003800 	.word	0x40003800

08000984 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b0bc      	sub	sp, #240	; 0xf0
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800099c:	f107 0320 	add.w	r3, r7, #32
 80009a0:	22b8      	movs	r2, #184	; 0xb8
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f00b fe1b 	bl	800c5e0 <memset>
  if(spiHandle->Instance==SPI1)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a5e      	ldr	r2, [pc, #376]	; (8000b28 <HAL_SPI_MspInit+0x1a4>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d145      	bne.n	8000a40 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80009b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009b8:	f04f 0300 	mov.w	r3, #0
 80009bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	4618      	mov	r0, r3
 80009ca:	f003 f905 	bl	8003bd8 <HAL_RCCEx_PeriphCLKConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80009d4:	f7ff fdac 	bl	8000530 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009d8:	4b54      	ldr	r3, [pc, #336]	; (8000b2c <HAL_SPI_MspInit+0x1a8>)
 80009da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009de:	4a53      	ldr	r2, [pc, #332]	; (8000b2c <HAL_SPI_MspInit+0x1a8>)
 80009e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80009e8:	4b50      	ldr	r3, [pc, #320]	; (8000b2c <HAL_SPI_MspInit+0x1a8>)
 80009ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009f2:	61fb      	str	r3, [r7, #28]
 80009f4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b4d      	ldr	r3, [pc, #308]	; (8000b2c <HAL_SPI_MspInit+0x1a8>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fc:	4a4b      	ldr	r2, [pc, #300]	; (8000b2c <HAL_SPI_MspInit+0x1a8>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a06:	4b49      	ldr	r3, [pc, #292]	; (8000b2c <HAL_SPI_MspInit+0x1a8>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	61bb      	str	r3, [r7, #24]
 8000a12:	69bb      	ldr	r3, [r7, #24]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a14:	23f0      	movs	r3, #240	; 0xf0
 8000a16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a36:	4619      	mov	r1, r3
 8000a38:	483d      	ldr	r0, [pc, #244]	; (8000b30 <HAL_SPI_MspInit+0x1ac>)
 8000a3a:	f000 fcbb 	bl	80013b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a3e:	e06e      	b.n	8000b1e <HAL_SPI_MspInit+0x19a>
  else if(spiHandle->Instance==SPI2)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a3b      	ldr	r2, [pc, #236]	; (8000b34 <HAL_SPI_MspInit+0x1b0>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d169      	bne.n	8000b1e <HAL_SPI_MspInit+0x19a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000a4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a4e:	f04f 0300 	mov.w	r3, #0
 8000a52:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f003 f8ba 	bl	8003bd8 <HAL_RCCEx_PeriphCLKConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8000a6a:	f7ff fd61 	bl	8000530 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a6e:	4b2f      	ldr	r3, [pc, #188]	; (8000b2c <HAL_SPI_MspInit+0x1a8>)
 8000a70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a74:	4a2d      	ldr	r2, [pc, #180]	; (8000b2c <HAL_SPI_MspInit+0x1a8>)
 8000a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a7e:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <HAL_SPI_MspInit+0x1a8>)
 8000a80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8c:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <HAL_SPI_MspInit+0x1a8>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a92:	4a26      	ldr	r2, [pc, #152]	; (8000b2c <HAL_SPI_MspInit+0x1a8>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9c:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <HAL_SPI_MspInit+0x1a8>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <HAL_SPI_MspInit+0x1a8>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	4a1e      	ldr	r2, [pc, #120]	; (8000b2c <HAL_SPI_MspInit+0x1a8>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <HAL_SPI_MspInit+0x1a8>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	f003 0302 	and.w	r3, r3, #2
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000ac8:	2306      	movs	r3, #6
 8000aca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ae0:	2305      	movs	r3, #5
 8000ae2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000aea:	4619      	mov	r1, r3
 8000aec:	4812      	ldr	r0, [pc, #72]	; (8000b38 <HAL_SPI_MspInit+0x1b4>)
 8000aee:	f000 fc61 	bl	80013b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000af2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000af6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b0c:	2305      	movs	r3, #5
 8000b0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b16:	4619      	mov	r1, r3
 8000b18:	4808      	ldr	r0, [pc, #32]	; (8000b3c <HAL_SPI_MspInit+0x1b8>)
 8000b1a:	f000 fc4b 	bl	80013b4 <HAL_GPIO_Init>
}
 8000b1e:	bf00      	nop
 8000b20:	37f0      	adds	r7, #240	; 0xf0
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40013000 	.word	0x40013000
 8000b2c:	58024400 	.word	0x58024400
 8000b30:	58020000 	.word	0x58020000
 8000b34:	40003800 	.word	0x40003800
 8000b38:	58020800 	.word	0x58020800
 8000b3c:	58020400 	.word	0x58020400

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_MspInit+0x30>)
 8000b48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b4c:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_MspInit+0x30>)
 8000b4e:	f043 0302 	orr.w	r3, r3, #2
 8000b52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x30>)
 8000b58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b5c:	f003 0302 	and.w	r3, r3, #2
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	58024400 	.word	0x58024400

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 faa4 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <OTG_HS_IRQHandler+0x10>)
 8000bce:	f000 fef2 	bl	80019b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	24000924 	.word	0x24000924

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000be0:	4b32      	ldr	r3, [pc, #200]	; (8000cac <SystemInit+0xd0>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a31      	ldr	r2, [pc, #196]	; (8000cac <SystemInit+0xd0>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf0:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <SystemInit+0xd4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f003 030f 	and.w	r3, r3, #15
 8000bf8:	2b06      	cmp	r3, #6
 8000bfa:	d807      	bhi.n	8000c0c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bfc:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <SystemInit+0xd4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f023 030f 	bic.w	r3, r3, #15
 8000c04:	4a2a      	ldr	r2, [pc, #168]	; (8000cb0 <SystemInit+0xd4>)
 8000c06:	f043 0307 	orr.w	r3, r3, #7
 8000c0a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c0c:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <SystemInit+0xd8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a28      	ldr	r2, [pc, #160]	; (8000cb4 <SystemInit+0xd8>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c18:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <SystemInit+0xd8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c1e:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <SystemInit+0xd8>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	4924      	ldr	r1, [pc, #144]	; (8000cb4 <SystemInit+0xd8>)
 8000c24:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <SystemInit+0xdc>)
 8000c26:	4013      	ands	r3, r2
 8000c28:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <SystemInit+0xd4>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d007      	beq.n	8000c46 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c36:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <SystemInit+0xd4>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f023 030f 	bic.w	r3, r3, #15
 8000c3e:	4a1c      	ldr	r2, [pc, #112]	; (8000cb0 <SystemInit+0xd4>)
 8000c40:	f043 0307 	orr.w	r3, r3, #7
 8000c44:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c46:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <SystemInit+0xd8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <SystemInit+0xd8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <SystemInit+0xd8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <SystemInit+0xd8>)
 8000c5a:	4a18      	ldr	r2, [pc, #96]	; (8000cbc <SystemInit+0xe0>)
 8000c5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <SystemInit+0xd8>)
 8000c60:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <SystemInit+0xe4>)
 8000c62:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <SystemInit+0xd8>)
 8000c66:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <SystemInit+0xe8>)
 8000c68:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <SystemInit+0xd8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <SystemInit+0xd8>)
 8000c72:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <SystemInit+0xe8>)
 8000c74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <SystemInit+0xd8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <SystemInit+0xd8>)
 8000c7e:	4a11      	ldr	r2, [pc, #68]	; (8000cc4 <SystemInit+0xe8>)
 8000c80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <SystemInit+0xd8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <SystemInit+0xd8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a09      	ldr	r2, [pc, #36]	; (8000cb4 <SystemInit+0xd8>)
 8000c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <SystemInit+0xd8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <SystemInit+0xec>)
 8000c9c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ca0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00
 8000cb0:	52002000 	.word	0x52002000
 8000cb4:	58024400 	.word	0x58024400
 8000cb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cbc:	02020200 	.word	0x02020200
 8000cc0:	01ff0000 	.word	0x01ff0000
 8000cc4:	01010280 	.word	0x01010280
 8000cc8:	52004000 	.word	0x52004000

08000ccc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08e      	sub	sp, #56	; 0x38
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cec:	463b      	mov	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cfe:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d00:	4a2b      	ldr	r2, [pc, #172]	; (8000db0 <MX_TIM3_Init+0xe4>)
 8000d02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d04:	4b29      	ldr	r3, [pc, #164]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b28      	ldr	r3, [pc, #160]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000d10:	4b26      	ldr	r3, [pc, #152]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d12:	2263      	movs	r2, #99	; 0x63
 8000d14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d16:	4b25      	ldr	r3, [pc, #148]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d22:	4822      	ldr	r0, [pc, #136]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d24:	f005 fed1 	bl	8006aca <HAL_TIM_Base_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d2e:	f7ff fbff 	bl	8000530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	481b      	ldr	r0, [pc, #108]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d40:	f006 f890 	bl	8006e64 <HAL_TIM_ConfigClockSource>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d4a:	f7ff fbf1 	bl	8000530 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d4e:	4817      	ldr	r0, [pc, #92]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d50:	f005 ff12 	bl	8006b78 <HAL_TIM_PWM_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d5a:	f7ff fbe9 	bl	8000530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480f      	ldr	r0, [pc, #60]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d6e:	f006 fd8b 	bl	8007888 <HAL_TIMEx_MasterConfigSynchronization>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d78:	f7ff fbda 	bl	8000530 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d7c:	2360      	movs	r3, #96	; 0x60
 8000d7e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000d80:	2332      	movs	r3, #50	; 0x32
 8000d82:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4619      	mov	r1, r3
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d94:	f005 ff52 	bl	8006c3c <HAL_TIM_PWM_ConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d9e:	f7ff fbc7 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	3738      	adds	r7, #56	; 0x38
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	24000394 	.word	0x24000394
 8000db0:	40000400 	.word	0x40000400

08000db4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <HAL_TIM_Base_MspInit+0x3c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d10e      	bne.n	8000de4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_TIM_Base_MspInit+0x40>)
 8000dc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dcc:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <HAL_TIM_Base_MspInit+0x40>)
 8000dce:	f043 0302 	orr.w	r3, r3, #2
 8000dd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <HAL_TIM_Base_MspInit+0x40>)
 8000dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40000400 	.word	0x40000400
 8000df4:	58024400 	.word	0x58024400

08000df8 <MX_USART3_Init>:

USART_HandleTypeDef husart3;

/* USART3 init function */
void MX_USART3_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <MX_USART3_Init+0x90>)
 8000dfe:	4a23      	ldr	r2, [pc, #140]	; (8000e8c <MX_USART3_Init+0x94>)
 8000e00:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <MX_USART3_Init+0x90>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <MX_USART3_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_USART3_Init+0x90>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <MX_USART3_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <MX_USART3_Init+0x90>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <MX_USART3_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_USART3_Init+0x90>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <MX_USART3_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_USART3_Init+0x90>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <MX_USART3_Init+0x90>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000e40:	4811      	ldr	r0, [pc, #68]	; (8000e88 <MX_USART3_Init+0x90>)
 8000e42:	f006 fdbd 	bl	80079c0 <HAL_USART_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 8000e4c:	f7ff fb70 	bl	8000530 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e50:	2100      	movs	r1, #0
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <MX_USART3_Init+0x90>)
 8000e54:	f007 fc52 	bl	80086fc <HAL_USARTEx_SetTxFifoThreshold>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000e5e:	f7ff fb67 	bl	8000530 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e62:	2100      	movs	r1, #0
 8000e64:	4808      	ldr	r0, [pc, #32]	; (8000e88 <MX_USART3_Init+0x90>)
 8000e66:	f007 fc87 	bl	8008778 <HAL_USARTEx_SetRxFifoThreshold>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8000e70:	f7ff fb5e 	bl	8000530 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_USART3_Init+0x90>)
 8000e76:	f007 fc08 	bl	800868a <HAL_USARTEx_DisableFifoMode>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_USART3_Init+0x8c>
  {
    Error_Handler();
 8000e80:	f7ff fb56 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	240003e0 	.word	0x240003e0
 8000e8c:	40004800 	.word	0x40004800

08000e90 <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0ba      	sub	sp, #232	; 0xe8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea8:	f107 0318 	add.w	r3, r7, #24
 8000eac:	22b8      	movs	r2, #184	; 0xb8
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f00b fb95 	bl	800c5e0 <memset>
  if(usartHandle->Instance==USART3)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a42      	ldr	r2, [pc, #264]	; (8000fc4 <HAL_USART_MspInit+0x134>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d17c      	bne.n	8000fba <HAL_USART_MspInit+0x12a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ec0:	f04f 0202 	mov.w	r2, #2
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 48;
 8000ed0:	2330      	movs	r3, #48	; 0x30
 8000ed2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 5;
 8000ed8:	2305      	movs	r3, #5
 8000eda:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000ee0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ee4:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0.0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef4:	f107 0318 	add.w	r3, r7, #24
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f002 fe6d 	bl	8003bd8 <HAL_RCCEx_PeriphCLKConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_USART_MspInit+0x78>
    {
      Error_Handler();
 8000f04:	f7ff fb14 	bl	8000530 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f08:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <HAL_USART_MspInit+0x138>)
 8000f0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f0e:	4a2e      	ldr	r2, [pc, #184]	; (8000fc8 <HAL_USART_MspInit+0x138>)
 8000f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f18:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <HAL_USART_MspInit+0x138>)
 8000f1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <HAL_USART_MspInit+0x138>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	4a26      	ldr	r2, [pc, #152]	; (8000fc8 <HAL_USART_MspInit+0x138>)
 8000f2e:	f043 0302 	orr.w	r3, r3, #2
 8000f32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f36:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <HAL_USART_MspInit+0x138>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f44:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <HAL_USART_MspInit+0x138>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	4a1f      	ldr	r2, [pc, #124]	; (8000fc8 <HAL_USART_MspInit+0x138>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_USART_MspInit+0x138>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    PD10     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f82:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4810      	ldr	r0, [pc, #64]	; (8000fcc <HAL_USART_MspInit+0x13c>)
 8000f8a:	f000 fa13 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000f8e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000f92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fa8:	2307      	movs	r3, #7
 8000faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <HAL_USART_MspInit+0x140>)
 8000fb6:	f000 f9fd 	bl	80013b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fba:	bf00      	nop
 8000fbc:	37e8      	adds	r7, #232	; 0xe8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40004800 	.word	0x40004800
 8000fc8:	58024400 	.word	0x58024400
 8000fcc:	58020400 	.word	0x58020400
 8000fd0:	58020c00 	.word	0x58020c00

08000fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800100c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fd8:	f7ff fe00 	bl	8000bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fde:	490d      	ldr	r1, [pc, #52]	; (8001014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff4:	4c0a      	ldr	r4, [pc, #40]	; (8001020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001002:	f00b faf5 	bl	800c5f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001006:	f7ff f9e7 	bl	80003d8 <main>
  bx  lr
 800100a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800100c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001010:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001014:	24000134 	.word	0x24000134
  ldr r2, =_sidata
 8001018:	0800c6c0 	.word	0x0800c6c0
  ldr r2, =_sbss
 800101c:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 8001020:	24004a84 	.word	0x24004a84

08001024 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC3_IRQHandler>
	...

08001028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102e:	2003      	movs	r0, #3
 8001030:	f000 f980 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001034:	f002 fbfa 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8001038:	4602      	mov	r2, r0
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <HAL_Init+0x68>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	0a1b      	lsrs	r3, r3, #8
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	4913      	ldr	r1, [pc, #76]	; (8001094 <HAL_Init+0x6c>)
 8001046:	5ccb      	ldrb	r3, [r1, r3]
 8001048:	f003 031f 	and.w	r3, r3, #31
 800104c:	fa22 f303 	lsr.w	r3, r2, r3
 8001050:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <HAL_Init+0x68>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <HAL_Init+0x6c>)
 800105c:	5cd3      	ldrb	r3, [r2, r3]
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	fa22 f303 	lsr.w	r3, r2, r3
 8001068:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <HAL_Init+0x70>)
 800106a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800106c:	4a0b      	ldr	r2, [pc, #44]	; (800109c <HAL_Init+0x74>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001072:	200f      	movs	r0, #15
 8001074:	f000 f814 	bl	80010a0 <HAL_InitTick>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e002      	b.n	8001088 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001082:	f7ff fd5d 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	58024400 	.word	0x58024400
 8001094:	0800c698 	.word	0x0800c698
 8001098:	24000004 	.word	0x24000004
 800109c:	24000000 	.word	0x24000000

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_InitTick+0x60>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e021      	b.n	80010f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <HAL_InitTick+0x64>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_InitTick+0x60>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f965 	bl	800139a <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f000 f92f 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	; (8001108 <HAL_InitTick+0x68>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2400000c 	.word	0x2400000c
 8001104:	24000000 	.word	0x24000000
 8001108:	24000008 	.word	0x24000008

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	2400000c 	.word	0x2400000c
 8001130:	24000440 	.word	0x24000440

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	24000440 	.word	0x24000440

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_Delay+0x44>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffde 	bl	8001134 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2400000c 	.word	0x2400000c

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <__NVIC_SetPriorityGrouping+0x40>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <__NVIC_SetPriorityGrouping+0x40>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00
 80011d8:	05fa0000 	.word	0x05fa0000

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4907      	ldr	r1, [pc, #28]	; (8001230 <__NVIC_EnableIRQ+0x38>)
 8001212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	; (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	; (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff8e 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff29 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff40 	bl	80011dc <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff90 	bl	8001288 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5f 	bl	8001234 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001388:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff33 	bl	80011f8 <__NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffa4 	bl	80012f0 <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013c2:	4b86      	ldr	r3, [pc, #536]	; (80015dc <HAL_GPIO_Init+0x228>)
 80013c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013c6:	e18c      	b.n	80016e2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	2101      	movs	r1, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa01 f303 	lsl.w	r3, r1, r3
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 817e 	beq.w	80016dc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d005      	beq.n	80013f8 <HAL_GPIO_Init+0x44>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d130      	bne.n	800145a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	2203      	movs	r2, #3
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800142e:	2201      	movs	r2, #1
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	f003 0201 	and.w	r2, r3, #1
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	2b03      	cmp	r3, #3
 8001464:	d017      	beq.n	8001496 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	2203      	movs	r2, #3
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d123      	bne.n	80014ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	08da      	lsrs	r2, r3, #3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3208      	adds	r2, #8
 80014aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	220f      	movs	r2, #15
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	691a      	ldr	r2, [r3, #16]
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	08da      	lsrs	r2, r3, #3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3208      	adds	r2, #8
 80014e4:	69b9      	ldr	r1, [r7, #24]
 80014e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0203 	and.w	r2, r3, #3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 80d8 	beq.w	80016dc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152c:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <HAL_GPIO_Init+0x22c>)
 800152e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001532:	4a2b      	ldr	r2, [pc, #172]	; (80015e0 <HAL_GPIO_Init+0x22c>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800153c:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <HAL_GPIO_Init+0x22c>)
 800153e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800154a:	4a26      	ldr	r2, [pc, #152]	; (80015e4 <HAL_GPIO_Init+0x230>)
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	220f      	movs	r2, #15
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a1d      	ldr	r2, [pc, #116]	; (80015e8 <HAL_GPIO_Init+0x234>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d04a      	beq.n	800160c <HAL_GPIO_Init+0x258>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a1c      	ldr	r2, [pc, #112]	; (80015ec <HAL_GPIO_Init+0x238>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d02b      	beq.n	80015d6 <HAL_GPIO_Init+0x222>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <HAL_GPIO_Init+0x23c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d025      	beq.n	80015d2 <HAL_GPIO_Init+0x21e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a1a      	ldr	r2, [pc, #104]	; (80015f4 <HAL_GPIO_Init+0x240>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d01f      	beq.n	80015ce <HAL_GPIO_Init+0x21a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a19      	ldr	r2, [pc, #100]	; (80015f8 <HAL_GPIO_Init+0x244>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d019      	beq.n	80015ca <HAL_GPIO_Init+0x216>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a18      	ldr	r2, [pc, #96]	; (80015fc <HAL_GPIO_Init+0x248>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d013      	beq.n	80015c6 <HAL_GPIO_Init+0x212>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a17      	ldr	r2, [pc, #92]	; (8001600 <HAL_GPIO_Init+0x24c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00d      	beq.n	80015c2 <HAL_GPIO_Init+0x20e>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a16      	ldr	r2, [pc, #88]	; (8001604 <HAL_GPIO_Init+0x250>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d007      	beq.n	80015be <HAL_GPIO_Init+0x20a>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a15      	ldr	r2, [pc, #84]	; (8001608 <HAL_GPIO_Init+0x254>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d101      	bne.n	80015ba <HAL_GPIO_Init+0x206>
 80015b6:	2309      	movs	r3, #9
 80015b8:	e029      	b.n	800160e <HAL_GPIO_Init+0x25a>
 80015ba:	230a      	movs	r3, #10
 80015bc:	e027      	b.n	800160e <HAL_GPIO_Init+0x25a>
 80015be:	2307      	movs	r3, #7
 80015c0:	e025      	b.n	800160e <HAL_GPIO_Init+0x25a>
 80015c2:	2306      	movs	r3, #6
 80015c4:	e023      	b.n	800160e <HAL_GPIO_Init+0x25a>
 80015c6:	2305      	movs	r3, #5
 80015c8:	e021      	b.n	800160e <HAL_GPIO_Init+0x25a>
 80015ca:	2304      	movs	r3, #4
 80015cc:	e01f      	b.n	800160e <HAL_GPIO_Init+0x25a>
 80015ce:	2303      	movs	r3, #3
 80015d0:	e01d      	b.n	800160e <HAL_GPIO_Init+0x25a>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e01b      	b.n	800160e <HAL_GPIO_Init+0x25a>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e019      	b.n	800160e <HAL_GPIO_Init+0x25a>
 80015da:	bf00      	nop
 80015dc:	58000080 	.word	0x58000080
 80015e0:	58024400 	.word	0x58024400
 80015e4:	58000400 	.word	0x58000400
 80015e8:	58020000 	.word	0x58020000
 80015ec:	58020400 	.word	0x58020400
 80015f0:	58020800 	.word	0x58020800
 80015f4:	58020c00 	.word	0x58020c00
 80015f8:	58021000 	.word	0x58021000
 80015fc:	58021400 	.word	0x58021400
 8001600:	58021800 	.word	0x58021800
 8001604:	58021c00 	.word	0x58021c00
 8001608:	58022400 	.word	0x58022400
 800160c:	2300      	movs	r3, #0
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	f002 0203 	and.w	r2, r2, #3
 8001614:	0092      	lsls	r2, r2, #2
 8001616:	4093      	lsls	r3, r2
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800161e:	4938      	ldr	r1, [pc, #224]	; (8001700 <HAL_GPIO_Init+0x34c>)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	3302      	adds	r3, #2
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800162c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800165a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001680:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	3301      	adds	r3, #1
 80016e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f47f ae6b 	bne.w	80013c8 <HAL_GPIO_Init+0x14>
  }
}
 80016f2:	bf00      	nop
 80016f4:	bf00      	nop
 80016f6:	3724      	adds	r7, #36	; 0x24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	58000400 	.word	0x58000400

08001704 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001706:	b08f      	sub	sp, #60	; 0x3c
 8001708:	af0a      	add	r7, sp, #40	; 0x28
 800170a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e116      	b.n	8001944 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d106      	bne.n	8001736 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f00a fc49 	bl	800bfc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2203      	movs	r2, #3
 800173a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f007 f9b8 	bl	8008aca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	687e      	ldr	r6, [r7, #4]
 8001762:	466d      	mov	r5, sp
 8001764:	f106 0410 	add.w	r4, r6, #16
 8001768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001770:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001774:	e885 0003 	stmia.w	r5, {r0, r1}
 8001778:	1d33      	adds	r3, r6, #4
 800177a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800177c:	6838      	ldr	r0, [r7, #0]
 800177e:	f007 f883 	bl	8008888 <USB_CoreInit>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2202      	movs	r2, #2
 800178c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0d7      	b.n	8001944 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f007 f9a6 	bl	8008aec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	73fb      	strb	r3, [r7, #15]
 80017a4:	e04a      	b.n	800183c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017a6:	7bfa      	ldrb	r2, [r7, #15]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4413      	add	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	333d      	adds	r3, #61	; 0x3d
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	333c      	adds	r3, #60	; 0x3c
 80017ca:	7bfa      	ldrb	r2, [r7, #15]
 80017cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017ce:	7bfa      	ldrb	r2, [r7, #15]
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	b298      	uxth	r0, r3
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	3356      	adds	r3, #86	; 0x56
 80017e2:	4602      	mov	r2, r0
 80017e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017e6:	7bfa      	ldrb	r2, [r7, #15]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	3340      	adds	r3, #64	; 0x40
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017fa:	7bfa      	ldrb	r2, [r7, #15]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	4413      	add	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	3344      	adds	r3, #68	; 0x44
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	3348      	adds	r3, #72	; 0x48
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	334c      	adds	r3, #76	; 0x4c
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	3301      	adds	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	429a      	cmp	r2, r3
 8001844:	d3af      	bcc.n	80017a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001846:	2300      	movs	r3, #0
 8001848:	73fb      	strb	r3, [r7, #15]
 800184a:	e044      	b.n	80018d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800184c:	7bfa      	ldrb	r2, [r7, #15]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001862:	7bfa      	ldrb	r2, [r7, #15]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001878:	7bfa      	ldrb	r2, [r7, #15]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4413      	add	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4413      	add	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	3301      	adds	r3, #1
 80018d4:	73fb      	strb	r3, [r7, #15]
 80018d6:	7bfa      	ldrb	r2, [r7, #15]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d3b5      	bcc.n	800184c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	687e      	ldr	r6, [r7, #4]
 80018e8:	466d      	mov	r5, sp
 80018ea:	f106 0410 	add.w	r4, r6, #16
 80018ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80018fe:	1d33      	adds	r3, r6, #4
 8001900:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001902:	6838      	ldr	r0, [r7, #0]
 8001904:	f007 f93e 	bl	8008b84 <USB_DevInit>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2202      	movs	r2, #2
 8001912:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e014      	b.n	8001944 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	2b01      	cmp	r3, #1
 8001930:	d102      	bne.n	8001938 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f001 f970 	bl	8002c18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f008 f980 	bl	8009c42 <USB_DevDisconnect>

  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800194c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001960:	2b01      	cmp	r3, #1
 8001962:	d101      	bne.n	8001968 <HAL_PCD_Start+0x1c>
 8001964:	2302      	movs	r3, #2
 8001966:	e022      	b.n	80019ae <HAL_PCD_Start+0x62>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d109      	bne.n	8001990 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8001980:	2b01      	cmp	r3, #1
 8001982:	d105      	bne.n	8001990 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001988:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f007 f887 	bl	8008aa8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f008 f92e 	bl	8009c00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019b6:	b590      	push	{r4, r7, lr}
 80019b8:	b08d      	sub	sp, #52	; 0x34
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f008 f9ec 	bl	8009daa <USB_GetMode>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f040 84b7 	bne.w	8002348 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f008 f950 	bl	8009c84 <USB_ReadInterrupts>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 84ad 	beq.w	8002346 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f008 f93d 	bl	8009c84 <USB_ReadInterrupts>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d107      	bne.n	8001a24 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f002 0202 	and.w	r2, r2, #2
 8001a22:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f008 f92b 	bl	8009c84 <USB_ReadInterrupts>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	2b10      	cmp	r3, #16
 8001a36:	d161      	bne.n	8001afc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	699a      	ldr	r2, [r3, #24]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0210 	bic.w	r2, r2, #16
 8001a46:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f003 020f 	and.w	r2, r3, #15
 8001a54:	4613      	mov	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	4413      	add	r3, r2
 8001a64:	3304      	adds	r3, #4
 8001a66:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	0c5b      	lsrs	r3, r3, #17
 8001a6c:	f003 030f 	and.w	r3, r3, #15
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d124      	bne.n	8001abe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d035      	beq.n	8001aec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	091b      	lsrs	r3, r3, #4
 8001a88:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	6a38      	ldr	r0, [r7, #32]
 8001a94:	f007 ff62 	bl	800995c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	091b      	lsrs	r3, r3, #4
 8001aa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aa4:	441a      	add	r2, r3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ab6:	441a      	add	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	615a      	str	r2, [r3, #20]
 8001abc:	e016      	b.n	8001aec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	0c5b      	lsrs	r3, r3, #17
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d110      	bne.n	8001aec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6a38      	ldr	r0, [r7, #32]
 8001ad6:	f007 ff41 	bl	800995c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ae6:	441a      	add	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	699a      	ldr	r2, [r3, #24]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0210 	orr.w	r2, r2, #16
 8001afa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f008 f8bf 	bl	8009c84 <USB_ReadInterrupts>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b10:	f040 80a7 	bne.w	8001c62 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f008 f8c4 	bl	8009caa <USB_ReadDevAllOutEpInterrupt>
 8001b22:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b24:	e099      	b.n	8001c5a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 808e 	beq.w	8001c4e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f008 f8e8 	bl	8009d12 <USB_ReadDevOutEPInterrupt>
 8001b42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00c      	beq.n	8001b68 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	015a      	lsls	r2, r3, #5
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	4413      	add	r3, r2
 8001b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fed2 	bl	800290c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00c      	beq.n	8001b8c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	015a      	lsls	r2, r3, #5
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2308      	movs	r3, #8
 8001b82:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 ffa8 	bl	8002adc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d008      	beq.n	8001ba8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	015a      	lsls	r2, r3, #5
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	2310      	movs	r3, #16
 8001ba6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d030      	beq.n	8001c14 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bba:	2b80      	cmp	r3, #128	; 0x80
 8001bbc:	d109      	bne.n	8001bd2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4413      	add	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	3304      	adds	r3, #4
 8001be6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	78db      	ldrb	r3, [r3, #3]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d108      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f00a fadb 	bl	800c1b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	015a      	lsls	r2, r3, #5
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c0e:	461a      	mov	r2, r3
 8001c10:	2302      	movs	r3, #2
 8001c12:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	f003 0320 	and.w	r3, r3, #32
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d008      	beq.n	8001c30 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2320      	movs	r3, #32
 8001c2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c46:	461a      	mov	r2, r3
 8001c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c4c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	3301      	adds	r3, #1
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c56:	085b      	lsrs	r3, r3, #1
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f47f af62 	bne.w	8001b26 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f008 f80c 	bl	8009c84 <USB_ReadInterrupts>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c76:	f040 80db 	bne.w	8001e30 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f008 f82d 	bl	8009cde <USB_ReadDevAllInEpInterrupt>
 8001c84:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001c8a:	e0cd      	b.n	8001e28 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 80c2 	beq.w	8001e1c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f008 f853 	bl	8009d4e <USB_ReadDevInEPInterrupt>
 8001ca8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d057      	beq.n	8001d64 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	2201      	movs	r2, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69f9      	ldr	r1, [r7, #28]
 8001cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	015a      	lsls	r2, r3, #5
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d132      	bne.n	8001d58 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	3348      	adds	r3, #72	; 0x48
 8001d02:	6819      	ldr	r1, [r3, #0]
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4403      	add	r3, r0
 8001d12:	3344      	adds	r3, #68	; 0x44
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4419      	add	r1, r3
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4403      	add	r3, r0
 8001d26:	3348      	adds	r3, #72	; 0x48
 8001d28:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d113      	bne.n	8001d58 <HAL_PCD_IRQHandler+0x3a2>
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	334c      	adds	r3, #76	; 0x4c
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d108      	bne.n	8001d58 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d50:	461a      	mov	r2, r3
 8001d52:	2101      	movs	r1, #1
 8001d54:	f008 f85c 	bl	8009e10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f00a f9a5 	bl	800c0ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d008      	beq.n	8001d80 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	015a      	lsls	r2, r3, #5
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d008      	beq.n	8001d9c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	015a      	lsls	r2, r3, #5
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d96:	461a      	mov	r2, r3
 8001d98:	2310      	movs	r3, #16
 8001d9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d008      	beq.n	8001db8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db2:	461a      	mov	r2, r3
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d023      	beq.n	8001e0a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001dc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dc4:	6a38      	ldr	r0, [r7, #32]
 8001dc6:	f007 f83b 	bl	8008e40 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dcc:	4613      	mov	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	3338      	adds	r3, #56	; 0x38
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	3304      	adds	r3, #4
 8001ddc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	78db      	ldrb	r3, [r3, #3]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d108      	bne.n	8001df8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2200      	movs	r2, #0
 8001dea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	4619      	mov	r1, r3
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f00a f9f2 	bl	800c1dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	015a      	lsls	r2, r3, #5
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e04:	461a      	mov	r2, r3
 8001e06:	2302      	movs	r3, #2
 8001e08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 fcea 	bl	80027f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	3301      	adds	r3, #1
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e24:	085b      	lsrs	r3, r3, #1
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f47f af2e 	bne.w	8001c8c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f007 ff25 	bl	8009c84 <USB_ReadInterrupts>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e44:	d122      	bne.n	8001e8c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d108      	bne.n	8001e76 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fef6 	bl	8002c60 <HAL_PCDEx_LPM_Callback>
 8001e74:	e002      	b.n	8001e7c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f00a f990 	bl	800c19c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f007 fef7 	bl	8009c84 <USB_ReadInterrupts>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ea0:	d112      	bne.n	8001ec8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d102      	bne.n	8001eb8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f00a f94c 	bl	800c150 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ec6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f007 fed9 	bl	8009c84 <USB_ReadInterrupts>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ed8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001edc:	d121      	bne.n	8001f22 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001eec:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d111      	bne.n	8001f1c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	f003 020f 	and.w	r2, r3, #15
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f12:	2101      	movs	r1, #1
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 fea3 	bl	8002c60 <HAL_PCDEx_LPM_Callback>
 8001f1a:	e002      	b.n	8001f22 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f00a f917 	bl	800c150 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f007 feac 	bl	8009c84 <USB_ReadInterrupts>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f36:	f040 80b7 	bne.w	80020a8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2110      	movs	r1, #16
 8001f54:	4618      	mov	r0, r3
 8001f56:	f006 ff73 	bl	8008e40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f5e:	e046      	b.n	8001fee <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f72:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f84:	0151      	lsls	r1, r2, #5
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	440a      	add	r2, r1
 8001f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fa6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fb8:	0151      	lsls	r1, r2, #5
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	440a      	add	r2, r1
 8001fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fc6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fd8:	0151      	lsls	r1, r2, #5
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	440a      	add	r2, r1
 8001fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fe2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fe6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fea:	3301      	adds	r3, #1
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d3b3      	bcc.n	8001f60 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002006:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800200a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	2b00      	cmp	r3, #0
 8002012:	d016      	beq.n	8002042 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800201a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002024:	f043 030b 	orr.w	r3, r3, #11
 8002028:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800203a:	f043 030b 	orr.w	r3, r3, #11
 800203e:	6453      	str	r3, [r2, #68]	; 0x44
 8002040:	e015      	b.n	800206e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002048:	695a      	ldr	r2, [r3, #20]
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002050:	4619      	mov	r1, r3
 8002052:	f242 032b 	movw	r3, #8235	; 0x202b
 8002056:	4313      	orrs	r3, r2
 8002058:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002068:	f043 030b 	orr.w	r3, r3, #11
 800206c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800207c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002080:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002092:	461a      	mov	r2, r3
 8002094:	f007 febc 	bl	8009e10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80020a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f007 fde9 	bl	8009c84 <USB_ReadInterrupts>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020bc:	d124      	bne.n	8002108 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f007 fe80 	bl	8009dc8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f006 ff34 	bl	8008f3a <USB_GetDevSpeed>
 80020d2:	4603      	mov	r3, r0
 80020d4:	461a      	mov	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681c      	ldr	r4, [r3, #0]
 80020de:	f001 fd1f 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 80020e2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	4620      	mov	r0, r4
 80020ee:	f006 fc39 	bl	8008964 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f00a f803 	bl	800c0fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695a      	ldr	r2, [r3, #20]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002106:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f007 fdb9 	bl	8009c84 <USB_ReadInterrupts>
 8002112:	4603      	mov	r3, r0
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b08      	cmp	r3, #8
 800211a:	d10a      	bne.n	8002132 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f009 ffe0 	bl	800c0e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f002 0208 	and.w	r2, r2, #8
 8002130:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f007 fda4 	bl	8009c84 <USB_ReadInterrupts>
 800213c:	4603      	mov	r3, r0
 800213e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002142:	2b80      	cmp	r3, #128	; 0x80
 8002144:	d122      	bne.n	800218c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002152:	2301      	movs	r3, #1
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
 8002156:	e014      	b.n	8002182 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	b2db      	uxtb	r3, r3
 8002174:	4619      	mov	r1, r3
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fb09 	bl	800278e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	3301      	adds	r3, #1
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002188:	429a      	cmp	r2, r3
 800218a:	d3e5      	bcc.n	8002158 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f007 fd77 	bl	8009c84 <USB_ReadInterrupts>
 8002196:	4603      	mov	r3, r0
 8002198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021a0:	d13b      	bne.n	800221a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021a2:	2301      	movs	r3, #1
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
 80021a6:	e02b      	b.n	8002200 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	3340      	adds	r3, #64	; 0x40
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d115      	bne.n	80021fa <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80021ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	da12      	bge.n	80021fa <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	333f      	adds	r3, #63	; 0x3f
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	4619      	mov	r1, r3
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 faca 	bl	800278e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	3301      	adds	r3, #1
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002206:	429a      	cmp	r2, r3
 8002208:	d3ce      	bcc.n	80021a8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002218:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f007 fd30 	bl	8009c84 <USB_ReadInterrupts>
 8002224:	4603      	mov	r3, r0
 8002226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800222e:	d155      	bne.n	80022dc <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002230:	2301      	movs	r3, #1
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
 8002234:	e045      	b.n	80022c2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	4413      	add	r3, r2
 800223e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d12e      	bne.n	80022bc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800225e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002260:	2b00      	cmp	r3, #0
 8002262:	da2b      	bge.n	80022bc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002270:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002274:	429a      	cmp	r2, r3
 8002276:	d121      	bne.n	80022bc <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10a      	bne.n	80022bc <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022b8:	6053      	str	r3, [r2, #4]
            break;
 80022ba:	e007      	b.n	80022cc <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	3301      	adds	r3, #1
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d3b4      	bcc.n	8002236 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80022da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f007 fccf 	bl	8009c84 <USB_ReadInterrupts>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f0:	d10a      	bne.n	8002308 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f009 ff84 	bl	800c200 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002306:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f007 fcb9 	bl	8009c84 <USB_ReadInterrupts>
 8002312:	4603      	mov	r3, r0
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b04      	cmp	r3, #4
 800231a:	d115      	bne.n	8002348 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f009 ff74 	bl	800c21c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6859      	ldr	r1, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	430a      	orrs	r2, r1
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	e000      	b.n	8002348 <HAL_PCD_IRQHandler+0x992>
      return;
 8002346:	bf00      	nop
    }
  }
}
 8002348:	3734      	adds	r7, #52	; 0x34
 800234a:	46bd      	mov	sp, r7
 800234c:	bd90      	pop	{r4, r7, pc}

0800234e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_PCD_SetAddress+0x1a>
 8002364:	2302      	movs	r3, #2
 8002366:	e013      	b.n	8002390 <HAL_PCD_SetAddress+0x42>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f007 fc17 	bl	8009bb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	4608      	mov	r0, r1
 80023a2:	4611      	mov	r1, r2
 80023a4:	461a      	mov	r2, r3
 80023a6:	4603      	mov	r3, r0
 80023a8:	70fb      	strb	r3, [r7, #3]
 80023aa:	460b      	mov	r3, r1
 80023ac:	803b      	strh	r3, [r7, #0]
 80023ae:	4613      	mov	r3, r2
 80023b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	da0f      	bge.n	80023de <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	f003 020f 	and.w	r2, r3, #15
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	3338      	adds	r3, #56	; 0x38
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	3304      	adds	r3, #4
 80023d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	705a      	strb	r2, [r3, #1]
 80023dc:	e00f      	b.n	80023fe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	f003 020f 	and.w	r2, r3, #15
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	3304      	adds	r3, #4
 80023f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	b2da      	uxtb	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800240a:	883a      	ldrh	r2, [r7, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	78ba      	ldrb	r2, [r7, #2]
 8002414:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	785b      	ldrb	r3, [r3, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d004      	beq.n	8002428 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002428:	78bb      	ldrb	r3, [r7, #2]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d102      	bne.n	8002434 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_PCD_EP_Open+0xaa>
 800243e:	2302      	movs	r3, #2
 8002440:	e00e      	b.n	8002460 <HAL_PCD_EP_Open+0xc8>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68f9      	ldr	r1, [r7, #12]
 8002450:	4618      	mov	r0, r3
 8002452:	f006 fd97 	bl	8008f84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800245e:	7afb      	ldrb	r3, [r7, #11]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002474:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002478:	2b00      	cmp	r3, #0
 800247a:	da0f      	bge.n	800249c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	f003 020f 	and.w	r2, r3, #15
 8002482:	4613      	mov	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4413      	add	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	3338      	adds	r3, #56	; 0x38
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	3304      	adds	r3, #4
 8002492:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2201      	movs	r2, #1
 8002498:	705a      	strb	r2, [r3, #1]
 800249a:	e00f      	b.n	80024bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	f003 020f 	and.w	r2, r3, #15
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	3304      	adds	r3, #4
 80024b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_PCD_EP_Close+0x6e>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e00e      	b.n	80024f4 <HAL_PCD_EP_Close+0x8c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68f9      	ldr	r1, [r7, #12]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f006 fdd5 	bl	8009094 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	460b      	mov	r3, r1
 800250a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800250c:	7afb      	ldrb	r3, [r7, #11]
 800250e:	f003 020f 	and.w	r2, r3, #15
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4413      	add	r3, r2
 8002522:	3304      	adds	r3, #4
 8002524:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2200      	movs	r2, #0
 8002536:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2200      	movs	r2, #0
 800253c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800253e:	7afb      	ldrb	r3, [r7, #11]
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	b2da      	uxtb	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d102      	bne.n	8002558 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	6979      	ldr	r1, [r7, #20]
 8002566:	f006 fe71 	bl	800924c <USB_EPStartXfer>

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	f003 020f 	and.w	r2, r3, #15
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	460b      	mov	r3, r1
 80025b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025b4:	7afb      	ldrb	r3, [r7, #11]
 80025b6:	f003 020f 	and.w	r2, r3, #15
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	3338      	adds	r3, #56	; 0x38
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	3304      	adds	r3, #4
 80025ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2200      	movs	r2, #0
 80025dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2201      	movs	r2, #1
 80025e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025e4:	7afb      	ldrb	r3, [r7, #11]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d102      	bne.n	80025fe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	6979      	ldr	r1, [r7, #20]
 800260c:	f006 fe1e 	bl	800924c <USB_EPStartXfer>

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	460b      	mov	r3, r1
 8002624:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	f003 020f 	and.w	r2, r3, #15
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	429a      	cmp	r2, r3
 8002632:	d901      	bls.n	8002638 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e050      	b.n	80026da <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002638:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800263c:	2b00      	cmp	r3, #0
 800263e:	da0f      	bge.n	8002660 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	f003 020f 	and.w	r2, r3, #15
 8002646:	4613      	mov	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	3338      	adds	r3, #56	; 0x38
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	3304      	adds	r3, #4
 8002656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2201      	movs	r2, #1
 800265c:	705a      	strb	r2, [r3, #1]
 800265e:	e00d      	b.n	800267c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	4613      	mov	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	3304      	adds	r3, #4
 8002674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2201      	movs	r2, #1
 8002680:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	b2da      	uxtb	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_PCD_EP_SetStall+0x82>
 8002698:	2302      	movs	r3, #2
 800269a:	e01e      	b.n	80026da <HAL_PCD_EP_SetStall+0xc0>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68f9      	ldr	r1, [r7, #12]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f007 f9ae 	bl	8009a0c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10a      	bne.n	80026d0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	b2d9      	uxtb	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026ca:	461a      	mov	r2, r3
 80026cc:	f007 fba0 	bl	8009e10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b084      	sub	sp, #16
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026ee:	78fb      	ldrb	r3, [r7, #3]
 80026f0:	f003 020f 	and.w	r2, r3, #15
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d901      	bls.n	8002700 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e042      	b.n	8002786 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002704:	2b00      	cmp	r3, #0
 8002706:	da0f      	bge.n	8002728 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	f003 020f 	and.w	r2, r3, #15
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	3338      	adds	r3, #56	; 0x38
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	4413      	add	r3, r2
 800271c:	3304      	adds	r3, #4
 800271e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	705a      	strb	r2, [r3, #1]
 8002726:	e00f      	b.n	8002748 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	f003 020f 	and.w	r2, r3, #15
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	3304      	adds	r3, #4
 8002740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800274e:	78fb      	ldrb	r3, [r7, #3]
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	b2da      	uxtb	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_PCD_EP_ClrStall+0x86>
 8002764:	2302      	movs	r3, #2
 8002766:	e00e      	b.n	8002786 <HAL_PCD_EP_ClrStall+0xa4>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68f9      	ldr	r1, [r7, #12]
 8002776:	4618      	mov	r0, r3
 8002778:	f007 f9b6 	bl	8009ae8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b084      	sub	sp, #16
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800279a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	da0c      	bge.n	80027bc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	f003 020f 	and.w	r2, r3, #15
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	3338      	adds	r3, #56	; 0x38
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	3304      	adds	r3, #4
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	e00c      	b.n	80027d6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	f003 020f 	and.w	r2, r3, #15
 80027c2:	4613      	mov	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	3304      	adds	r3, #4
 80027d4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68f9      	ldr	r1, [r7, #12]
 80027dc:	4618      	mov	r0, r3
 80027de:	f006 ffd5 	bl	800978c <USB_EPStopXfer>
 80027e2:	4603      	mov	r3, r0
 80027e4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80027e6:	7afb      	ldrb	r3, [r7, #11]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	; 0x28
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	3338      	adds	r3, #56	; 0x38
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4413      	add	r3, r2
 8002814:	3304      	adds	r3, #4
 8002816:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	429a      	cmp	r2, r3
 8002822:	d901      	bls.n	8002828 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e06c      	b.n	8002902 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	429a      	cmp	r2, r3
 800283c:	d902      	bls.n	8002844 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	3303      	adds	r3, #3
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800284c:	e02b      	b.n	80028a6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	429a      	cmp	r2, r3
 8002862:	d902      	bls.n	800286a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	3303      	adds	r3, #3
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	68d9      	ldr	r1, [r3, #12]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002882:	b2db      	uxtb	r3, r3
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	4603      	mov	r3, r0
 8002888:	6978      	ldr	r0, [r7, #20]
 800288a:	f007 f829 	bl	80098e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	441a      	add	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	441a      	add	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d809      	bhi.n	80028d0 <PCD_WriteEmptyTxFifo+0xe0>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d203      	bcs.n	80028d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1be      	bne.n	800284e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d811      	bhi.n	8002900 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	2201      	movs	r2, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	6939      	ldr	r1, [r7, #16]
 80028f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028fc:	4013      	ands	r3, r2
 80028fe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3720      	adds	r7, #32
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	333c      	adds	r3, #60	; 0x3c
 8002924:	3304      	adds	r3, #4
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	4413      	add	r3, r2
 8002932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d17b      	bne.n	8002a3a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d015      	beq.n	8002978 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	4a61      	ldr	r2, [pc, #388]	; (8002ad4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	f240 80b9 	bls.w	8002ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 80b3 	beq.w	8002ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	4413      	add	r3, r2
 800296a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800296e:	461a      	mov	r2, r3
 8002970:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002974:	6093      	str	r3, [r2, #8]
 8002976:	e0a7      	b.n	8002ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	4413      	add	r3, r2
 800298a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800298e:	461a      	mov	r2, r3
 8002990:	2320      	movs	r3, #32
 8002992:	6093      	str	r3, [r2, #8]
 8002994:	e098      	b.n	8002ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800299c:	2b00      	cmp	r3, #0
 800299e:	f040 8093 	bne.w	8002ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	4a4b      	ldr	r2, [pc, #300]	; (8002ad4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d90f      	bls.n	80029ca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c0:	461a      	mov	r2, r3
 80029c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029c6:	6093      	str	r3, [r2, #8]
 80029c8:	e07e      	b.n	8002ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	4613      	mov	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	4413      	add	r3, r2
 80029dc:	3304      	adds	r3, #4
 80029de:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a1a      	ldr	r2, [r3, #32]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	0159      	lsls	r1, r3, #5
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	440b      	add	r3, r1
 80029ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f6:	1ad2      	subs	r2, r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d114      	bne.n	8002a2c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a14:	461a      	mov	r2, r3
 8002a16:	2101      	movs	r1, #1
 8002a18:	f007 f9fa 	bl	8009e10 <USB_EP0_OutStart>
 8002a1c:	e006      	b.n	8002a2c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	441a      	add	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	4619      	mov	r1, r3
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f009 fb20 	bl	800c078 <HAL_PCD_DataOutStageCallback>
 8002a38:	e046      	b.n	8002ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	4a26      	ldr	r2, [pc, #152]	; (8002ad8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d124      	bne.n	8002a8c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a58:	461a      	mov	r2, r3
 8002a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a5e:	6093      	str	r3, [r2, #8]
 8002a60:	e032      	b.n	8002ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2320      	movs	r3, #32
 8002a7c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	4619      	mov	r1, r3
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f009 faf7 	bl	800c078 <HAL_PCD_DataOutStageCallback>
 8002a8a:	e01d      	b.n	8002ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d114      	bne.n	8002abc <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d108      	bne.n	8002abc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	f007 f9aa 	bl	8009e10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f009 fad8 	bl	800c078 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	4f54300a 	.word	0x4f54300a
 8002ad8:	4f54310a 	.word	0x4f54310a

08002adc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	333c      	adds	r3, #60	; 0x3c
 8002af4:	3304      	adds	r3, #4
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4a15      	ldr	r2, [pc, #84]	; (8002b64 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d90e      	bls.n	8002b30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d009      	beq.n	8002b30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f009 fa8f 	bl	800c054 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d90c      	bls.n	8002b58 <PCD_EP_OutSetupPacket_int+0x7c>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d108      	bne.n	8002b58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b50:	461a      	mov	r2, r3
 8002b52:	2101      	movs	r1, #1
 8002b54:	f007 f95c 	bl	8009e10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	4f54300a 	.word	0x4f54300a

08002b68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
 8002b74:	4613      	mov	r3, r2
 8002b76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d107      	bne.n	8002b96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b86:	883b      	ldrh	r3, [r7, #0]
 8002b88:	0419      	lsls	r1, r3, #16
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28
 8002b94:	e028      	b.n	8002be8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	73fb      	strb	r3, [r7, #15]
 8002ba8:	e00d      	b.n	8002bc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	3340      	adds	r3, #64	; 0x40
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	0c1b      	lsrs	r3, r3, #16
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d3ec      	bcc.n	8002baa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002bd0:	883b      	ldrh	r3, [r7, #0]
 8002bd2:	0418      	lsls	r0, r3, #16
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6819      	ldr	r1, [r3, #0]
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	4302      	orrs	r2, r0
 8002be0:	3340      	adds	r3, #64	; 0x40
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	887a      	ldrh	r2, [r7, #2]
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_PCDEx_ActivateLPM+0x44>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	10000003 	.word	0x10000003

08002c60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_PWREx_ConfigSupply+0x70>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d00a      	beq.n	8002ca2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c8c:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <HAL_PWREx_ConfigSupply+0x70>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d001      	beq.n	8002c9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e01f      	b.n	8002cde <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e01d      	b.n	8002cde <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ca2:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <HAL_PWREx_ConfigSupply+0x70>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f023 0207 	bic.w	r2, r3, #7
 8002caa:	490f      	ldr	r1, [pc, #60]	; (8002ce8 <HAL_PWREx_ConfigSupply+0x70>)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002cb2:	f7fe fa3f 	bl	8001134 <HAL_GetTick>
 8002cb6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cb8:	e009      	b.n	8002cce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002cba:	f7fe fa3b 	bl	8001134 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cc8:	d901      	bls.n	8002cce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e007      	b.n	8002cde <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_PWREx_ConfigSupply+0x70>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cda:	d1ee      	bne.n	8002cba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	58024800 	.word	0x58024800

08002cec <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfa:	60d3      	str	r3, [r2, #12]
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	58024800 	.word	0x58024800

08002d0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08c      	sub	sp, #48	; 0x30
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e3c8      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8087 	beq.w	8002e3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d2c:	4b88      	ldr	r3, [pc, #544]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d36:	4b86      	ldr	r3, [pc, #536]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3e:	2b10      	cmp	r3, #16
 8002d40:	d007      	beq.n	8002d52 <HAL_RCC_OscConfig+0x46>
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	2b18      	cmp	r3, #24
 8002d46:	d110      	bne.n	8002d6a <HAL_RCC_OscConfig+0x5e>
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d10b      	bne.n	8002d6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d52:	4b7f      	ldr	r3, [pc, #508]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d06c      	beq.n	8002e38 <HAL_RCC_OscConfig+0x12c>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d168      	bne.n	8002e38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e3a2      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d72:	d106      	bne.n	8002d82 <HAL_RCC_OscConfig+0x76>
 8002d74:	4b76      	ldr	r3, [pc, #472]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a75      	ldr	r2, [pc, #468]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	e02e      	b.n	8002de0 <HAL_RCC_OscConfig+0xd4>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x98>
 8002d8a:	4b71      	ldr	r3, [pc, #452]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a70      	ldr	r2, [pc, #448]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	4b6e      	ldr	r3, [pc, #440]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a6d      	ldr	r2, [pc, #436]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	e01d      	b.n	8002de0 <HAL_RCC_OscConfig+0xd4>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0xbc>
 8002dae:	4b68      	ldr	r3, [pc, #416]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a67      	ldr	r2, [pc, #412]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	4b65      	ldr	r3, [pc, #404]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a64      	ldr	r2, [pc, #400]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	e00b      	b.n	8002de0 <HAL_RCC_OscConfig+0xd4>
 8002dc8:	4b61      	ldr	r3, [pc, #388]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a60      	ldr	r2, [pc, #384]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	4b5e      	ldr	r3, [pc, #376]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a5d      	ldr	r2, [pc, #372]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d013      	beq.n	8002e10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7fe f9a4 	bl	8001134 <HAL_GetTick>
 8002dec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df0:	f7fe f9a0 	bl	8001134 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e356      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e02:	4b53      	ldr	r3, [pc, #332]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0xe4>
 8002e0e:	e014      	b.n	8002e3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7fe f990 	bl	8001134 <HAL_GetTick>
 8002e14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e18:	f7fe f98c 	bl	8001134 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	; 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e342      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e2a:	4b49      	ldr	r3, [pc, #292]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x10c>
 8002e36:	e000      	b.n	8002e3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 808c 	beq.w	8002f60 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e48:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e52:	4b3f      	ldr	r3, [pc, #252]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <HAL_RCC_OscConfig+0x162>
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	2b18      	cmp	r3, #24
 8002e62:	d137      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x1c8>
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d132      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e6e:	4b38      	ldr	r3, [pc, #224]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <HAL_RCC_OscConfig+0x17a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e314      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e86:	4b32      	ldr	r3, [pc, #200]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 0219 	bic.w	r2, r3, #25
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	492f      	ldr	r1, [pc, #188]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe f94c 	bl	8001134 <HAL_GetTick>
 8002e9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea0:	f7fe f948 	bl	8001134 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e2fe      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eb2:	4b27      	ldr	r3, [pc, #156]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebe:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	061b      	lsls	r3, r3, #24
 8002ecc:	4920      	ldr	r1, [pc, #128]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ed2:	e045      	b.n	8002f60 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d026      	beq.n	8002f2a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002edc:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 0219 	bic.w	r2, r3, #25
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4919      	ldr	r1, [pc, #100]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eee:	f7fe f921 	bl	8001134 <HAL_GetTick>
 8002ef2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef6:	f7fe f91d 	bl	8001134 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e2d3      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f14:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	061b      	lsls	r3, r3, #24
 8002f22:	490b      	ldr	r1, [pc, #44]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
 8002f28:	e01a      	b.n	8002f60 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a08      	ldr	r2, [pc, #32]	; (8002f50 <HAL_RCC_OscConfig+0x244>)
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f36:	f7fe f8fd 	bl	8001134 <HAL_GetTick>
 8002f3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f3e:	f7fe f8f9 	bl	8001134 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d903      	bls.n	8002f54 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e2af      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
 8002f50:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f54:	4b96      	ldr	r3, [pc, #600]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1ee      	bne.n	8002f3e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d06a      	beq.n	8003042 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f6c:	4b90      	ldr	r3, [pc, #576]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f74:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f76:	4b8e      	ldr	r3, [pc, #568]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d007      	beq.n	8002f92 <HAL_RCC_OscConfig+0x286>
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	2b18      	cmp	r3, #24
 8002f86:	d11b      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x2b4>
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d116      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f92:	4b87      	ldr	r3, [pc, #540]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_RCC_OscConfig+0x29e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	2b80      	cmp	r3, #128	; 0x80
 8002fa4:	d001      	beq.n	8002faa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e282      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002faa:	4b81      	ldr	r3, [pc, #516]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	061b      	lsls	r3, r3, #24
 8002fb8:	497d      	ldr	r1, [pc, #500]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fbe:	e040      	b.n	8003042 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d023      	beq.n	8003010 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002fc8:	4b79      	ldr	r3, [pc, #484]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a78      	ldr	r2, [pc, #480]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8002fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe f8ae 	bl	8001134 <HAL_GetTick>
 8002fd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002fdc:	f7fe f8aa 	bl	8001134 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e260      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fee:	4b70      	ldr	r3, [pc, #448]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ffa:	4b6d      	ldr	r3, [pc, #436]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	061b      	lsls	r3, r3, #24
 8003008:	4969      	ldr	r1, [pc, #420]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 800300a:	4313      	orrs	r3, r2
 800300c:	60cb      	str	r3, [r1, #12]
 800300e:	e018      	b.n	8003042 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003010:	4b67      	ldr	r3, [pc, #412]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a66      	ldr	r2, [pc, #408]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8003016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800301a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe f88a 	bl	8001134 <HAL_GetTick>
 8003020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003024:	f7fe f886 	bl	8001134 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e23c      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003036:	4b5e      	ldr	r3, [pc, #376]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d036      	beq.n	80030bc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d019      	beq.n	800308a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003056:	4b56      	ldr	r3, [pc, #344]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8003058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305a:	4a55      	ldr	r2, [pc, #340]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003062:	f7fe f867 	bl	8001134 <HAL_GetTick>
 8003066:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800306a:	f7fe f863 	bl	8001134 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e219      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800307c:	4b4c      	ldr	r3, [pc, #304]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 800307e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f0      	beq.n	800306a <HAL_RCC_OscConfig+0x35e>
 8003088:	e018      	b.n	80030bc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800308a:	4b49      	ldr	r3, [pc, #292]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 800308c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308e:	4a48      	ldr	r2, [pc, #288]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003096:	f7fe f84d 	bl	8001134 <HAL_GetTick>
 800309a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309e:	f7fe f849 	bl	8001134 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e1ff      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030b0:	4b3f      	ldr	r3, [pc, #252]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 80030b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f0      	bne.n	800309e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d036      	beq.n	8003136 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d019      	beq.n	8003104 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030d0:	4b37      	ldr	r3, [pc, #220]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a36      	ldr	r2, [pc, #216]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 80030d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030dc:	f7fe f82a 	bl	8001134 <HAL_GetTick>
 80030e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030e4:	f7fe f826 	bl	8001134 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e1dc      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030f6:	4b2e      	ldr	r3, [pc, #184]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x3d8>
 8003102:	e018      	b.n	8003136 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003104:	4b2a      	ldr	r3, [pc, #168]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a29      	ldr	r2, [pc, #164]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 800310a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800310e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003110:	f7fe f810 	bl	8001134 <HAL_GetTick>
 8003114:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003118:	f7fe f80c 	bl	8001134 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e1c2      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800312a:	4b21      	ldr	r3, [pc, #132]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8086 	beq.w	8003250 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003144:	4b1b      	ldr	r3, [pc, #108]	; (80031b4 <HAL_RCC_OscConfig+0x4a8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1a      	ldr	r2, [pc, #104]	; (80031b4 <HAL_RCC_OscConfig+0x4a8>)
 800314a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003150:	f7fd fff0 	bl	8001134 <HAL_GetTick>
 8003154:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003158:	f7fd ffec 	bl	8001134 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	; 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e1a2      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <HAL_RCC_OscConfig+0x4a8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d106      	bne.n	800318c <HAL_RCC_OscConfig+0x480>
 800317e:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	4a0b      	ldr	r2, [pc, #44]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
 800318a:	e032      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e6>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d111      	bne.n	80031b8 <HAL_RCC_OscConfig+0x4ac>
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003198:	4a05      	ldr	r2, [pc, #20]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 800319a:	f023 0301 	bic.w	r3, r3, #1
 800319e:	6713      	str	r3, [r2, #112]	; 0x70
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	4a02      	ldr	r2, [pc, #8]	; (80031b0 <HAL_RCC_OscConfig+0x4a4>)
 80031a6:	f023 0304 	bic.w	r3, r3, #4
 80031aa:	6713      	str	r3, [r2, #112]	; 0x70
 80031ac:	e021      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e6>
 80031ae:	bf00      	nop
 80031b0:	58024400 	.word	0x58024400
 80031b4:	58024800 	.word	0x58024800
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b05      	cmp	r3, #5
 80031be:	d10c      	bne.n	80031da <HAL_RCC_OscConfig+0x4ce>
 80031c0:	4b83      	ldr	r3, [pc, #524]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	4a82      	ldr	r2, [pc, #520]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 80031c6:	f043 0304 	orr.w	r3, r3, #4
 80031ca:	6713      	str	r3, [r2, #112]	; 0x70
 80031cc:	4b80      	ldr	r3, [pc, #512]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	4a7f      	ldr	r2, [pc, #508]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6713      	str	r3, [r2, #112]	; 0x70
 80031d8:	e00b      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e6>
 80031da:	4b7d      	ldr	r3, [pc, #500]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	4a7c      	ldr	r2, [pc, #496]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	6713      	str	r3, [r2, #112]	; 0x70
 80031e6:	4b7a      	ldr	r3, [pc, #488]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ea:	4a79      	ldr	r2, [pc, #484]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 80031ec:	f023 0304 	bic.w	r3, r3, #4
 80031f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d015      	beq.n	8003226 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fa:	f7fd ff9b 	bl	8001134 <HAL_GetTick>
 80031fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003200:	e00a      	b.n	8003218 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003202:	f7fd ff97 	bl	8001134 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003210:	4293      	cmp	r3, r2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e14b      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003218:	4b6d      	ldr	r3, [pc, #436]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0ee      	beq.n	8003202 <HAL_RCC_OscConfig+0x4f6>
 8003224:	e014      	b.n	8003250 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003226:	f7fd ff85 	bl	8001134 <HAL_GetTick>
 800322a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800322c:	e00a      	b.n	8003244 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322e:	f7fd ff81 	bl	8001134 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f241 3288 	movw	r2, #5000	; 0x1388
 800323c:	4293      	cmp	r3, r2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e135      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003244:	4b62      	ldr	r3, [pc, #392]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1ee      	bne.n	800322e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 812a 	beq.w	80034ae <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800325a:	4b5d      	ldr	r3, [pc, #372]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003262:	2b18      	cmp	r3, #24
 8003264:	f000 80ba 	beq.w	80033dc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	2b02      	cmp	r3, #2
 800326e:	f040 8095 	bne.w	800339c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003272:	4b57      	ldr	r3, [pc, #348]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a56      	ldr	r2, [pc, #344]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 8003278:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800327c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327e:	f7fd ff59 	bl	8001134 <HAL_GetTick>
 8003282:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003286:	f7fd ff55 	bl	8001134 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e10b      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003298:	4b4d      	ldr	r3, [pc, #308]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f0      	bne.n	8003286 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a4:	4b4a      	ldr	r3, [pc, #296]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 80032a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032a8:	4b4a      	ldr	r3, [pc, #296]	; (80033d4 <HAL_RCC_OscConfig+0x6c8>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032b4:	0112      	lsls	r2, r2, #4
 80032b6:	430a      	orrs	r2, r1
 80032b8:	4945      	ldr	r1, [pc, #276]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	628b      	str	r3, [r1, #40]	; 0x28
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	3b01      	subs	r3, #1
 80032c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032cc:	3b01      	subs	r3, #1
 80032ce:	025b      	lsls	r3, r3, #9
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	3b01      	subs	r3, #1
 80032da:	041b      	lsls	r3, r3, #16
 80032dc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	3b01      	subs	r3, #1
 80032e8:	061b      	lsls	r3, r3, #24
 80032ea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80032ee:	4938      	ldr	r1, [pc, #224]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80032f4:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	4a35      	ldr	r2, [pc, #212]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 80032fa:	f023 0301 	bic.w	r3, r3, #1
 80032fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003300:	4b33      	ldr	r3, [pc, #204]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 8003302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003304:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <HAL_RCC_OscConfig+0x6cc>)
 8003306:	4013      	ands	r3, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800330c:	00d2      	lsls	r2, r2, #3
 800330e:	4930      	ldr	r1, [pc, #192]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 8003310:	4313      	orrs	r3, r2
 8003312:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003314:	4b2e      	ldr	r3, [pc, #184]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	f023 020c 	bic.w	r2, r3, #12
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	492b      	ldr	r1, [pc, #172]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 8003322:	4313      	orrs	r3, r2
 8003324:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003326:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	f023 0202 	bic.w	r2, r3, #2
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	4927      	ldr	r1, [pc, #156]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 8003334:	4313      	orrs	r3, r2
 8003336:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003338:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	4a24      	ldr	r2, [pc, #144]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 800333e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003342:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003344:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	4a21      	ldr	r2, [pc, #132]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 800334a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800334e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003350:	4b1f      	ldr	r3, [pc, #124]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	4a1e      	ldr	r2, [pc, #120]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 8003356:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800335a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800335c:	4b1c      	ldr	r3, [pc, #112]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	4a1b      	ldr	r2, [pc, #108]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003368:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a18      	ldr	r2, [pc, #96]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 800336e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fd fede 	bl	8001134 <HAL_GetTick>
 8003378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337c:	f7fd feda 	bl	8001134 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e090      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800338e:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0x670>
 800339a:	e088      	b.n	80034ae <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 80033a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fd fec4 	bl	8001134 <HAL_GetTick>
 80033ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b0:	f7fd fec0 	bl	8001134 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e076      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033c2:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <HAL_RCC_OscConfig+0x6c4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x6a4>
 80033ce:	e06e      	b.n	80034ae <HAL_RCC_OscConfig+0x7a2>
 80033d0:	58024400 	.word	0x58024400
 80033d4:	fffffc0c 	.word	0xfffffc0c
 80033d8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80033dc:	4b36      	ldr	r3, [pc, #216]	; (80034b8 <HAL_RCC_OscConfig+0x7ac>)
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80033e2:	4b35      	ldr	r3, [pc, #212]	; (80034b8 <HAL_RCC_OscConfig+0x7ac>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d031      	beq.n	8003454 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f003 0203 	and.w	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d12a      	bne.n	8003454 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340a:	429a      	cmp	r2, r3
 800340c:	d122      	bne.n	8003454 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d11a      	bne.n	8003454 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	0a5b      	lsrs	r3, r3, #9
 8003422:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d111      	bne.n	8003454 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	0c1b      	lsrs	r3, r3, #16
 8003434:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800343e:	429a      	cmp	r2, r3
 8003440:	d108      	bne.n	8003454 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	0e1b      	lsrs	r3, r3, #24
 8003446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e02b      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003458:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <HAL_RCC_OscConfig+0x7ac>)
 800345a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345c:	08db      	lsrs	r3, r3, #3
 800345e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003462:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	429a      	cmp	r2, r3
 800346c:	d01f      	beq.n	80034ae <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800346e:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <HAL_RCC_OscConfig+0x7ac>)
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	4a11      	ldr	r2, [pc, #68]	; (80034b8 <HAL_RCC_OscConfig+0x7ac>)
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800347a:	f7fd fe5b 	bl	8001134 <HAL_GetTick>
 800347e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003480:	bf00      	nop
 8003482:	f7fd fe57 	bl	8001134 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	4293      	cmp	r3, r2
 800348c:	d0f9      	beq.n	8003482 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <HAL_RCC_OscConfig+0x7ac>)
 8003490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003492:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <HAL_RCC_OscConfig+0x7b0>)
 8003494:	4013      	ands	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800349a:	00d2      	lsls	r2, r2, #3
 800349c:	4906      	ldr	r1, [pc, #24]	; (80034b8 <HAL_RCC_OscConfig+0x7ac>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCC_OscConfig+0x7ac>)
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <HAL_RCC_OscConfig+0x7ac>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3730      	adds	r7, #48	; 0x30
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	58024400 	.word	0x58024400
 80034bc:	ffff0007 	.word	0xffff0007

080034c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e19c      	b.n	800380e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034d4:	4b8a      	ldr	r3, [pc, #552]	; (8003700 <HAL_RCC_ClockConfig+0x240>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d910      	bls.n	8003504 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b87      	ldr	r3, [pc, #540]	; (8003700 <HAL_RCC_ClockConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 020f 	bic.w	r2, r3, #15
 80034ea:	4985      	ldr	r1, [pc, #532]	; (8003700 <HAL_RCC_ClockConfig+0x240>)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b83      	ldr	r3, [pc, #524]	; (8003700 <HAL_RCC_ClockConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e184      	b.n	800380e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d010      	beq.n	8003532 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	4b7b      	ldr	r3, [pc, #492]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800351c:	429a      	cmp	r2, r3
 800351e:	d908      	bls.n	8003532 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003520:	4b78      	ldr	r3, [pc, #480]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	4975      	ldr	r1, [pc, #468]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 800352e:	4313      	orrs	r3, r2
 8003530:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d010      	beq.n	8003560 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	4b70      	ldr	r3, [pc, #448]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800354a:	429a      	cmp	r2, r3
 800354c:	d908      	bls.n	8003560 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800354e:	4b6d      	ldr	r3, [pc, #436]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	496a      	ldr	r1, [pc, #424]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 800355c:	4313      	orrs	r3, r2
 800355e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	2b00      	cmp	r3, #0
 800356a:	d010      	beq.n	800358e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699a      	ldr	r2, [r3, #24]
 8003570:	4b64      	ldr	r3, [pc, #400]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003578:	429a      	cmp	r2, r3
 800357a:	d908      	bls.n	800358e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800357c:	4b61      	ldr	r3, [pc, #388]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	495e      	ldr	r1, [pc, #376]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 800358a:	4313      	orrs	r3, r2
 800358c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b00      	cmp	r3, #0
 8003598:	d010      	beq.n	80035bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69da      	ldr	r2, [r3, #28]
 800359e:	4b59      	ldr	r3, [pc, #356]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d908      	bls.n	80035bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035aa:	4b56      	ldr	r3, [pc, #344]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	4953      	ldr	r1, [pc, #332]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d010      	beq.n	80035ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	4b4d      	ldr	r3, [pc, #308]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d908      	bls.n	80035ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d8:	4b4a      	ldr	r3, [pc, #296]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f023 020f 	bic.w	r2, r3, #15
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4947      	ldr	r1, [pc, #284]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d055      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80035f6:	4b43      	ldr	r3, [pc, #268]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	4940      	ldr	r1, [pc, #256]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 8003604:	4313      	orrs	r3, r2
 8003606:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b02      	cmp	r3, #2
 800360e:	d107      	bne.n	8003620 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003610:	4b3c      	ldr	r3, [pc, #240]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d121      	bne.n	8003660 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0f6      	b.n	800380e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b03      	cmp	r3, #3
 8003626:	d107      	bne.n	8003638 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003628:	4b36      	ldr	r3, [pc, #216]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d115      	bne.n	8003660 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0ea      	b.n	800380e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d107      	bne.n	8003650 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003640:	4b30      	ldr	r3, [pc, #192]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d109      	bne.n	8003660 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e0de      	b.n	800380e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003650:	4b2c      	ldr	r3, [pc, #176]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0d6      	b.n	800380e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003660:	4b28      	ldr	r3, [pc, #160]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f023 0207 	bic.w	r2, r3, #7
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	4925      	ldr	r1, [pc, #148]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 800366e:	4313      	orrs	r3, r2
 8003670:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003672:	f7fd fd5f 	bl	8001134 <HAL_GetTick>
 8003676:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003678:	e00a      	b.n	8003690 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367a:	f7fd fd5b 	bl	8001134 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	; 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e0be      	b.n	800380e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003690:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	429a      	cmp	r2, r3
 80036a0:	d1eb      	bne.n	800367a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d010      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	4b14      	ldr	r3, [pc, #80]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d208      	bcs.n	80036d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036be:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f023 020f 	bic.w	r2, r3, #15
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	490e      	ldr	r1, [pc, #56]	; (8003704 <HAL_RCC_ClockConfig+0x244>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d0:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_RCC_ClockConfig+0x240>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d214      	bcs.n	8003708 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b08      	ldr	r3, [pc, #32]	; (8003700 <HAL_RCC_ClockConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 020f 	bic.w	r2, r3, #15
 80036e6:	4906      	ldr	r1, [pc, #24]	; (8003700 <HAL_RCC_ClockConfig+0x240>)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b04      	ldr	r3, [pc, #16]	; (8003700 <HAL_RCC_ClockConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e086      	b.n	800380e <HAL_RCC_ClockConfig+0x34e>
 8003700:	52002000 	.word	0x52002000
 8003704:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d010      	beq.n	8003736 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	4b3f      	ldr	r3, [pc, #252]	; (8003818 <HAL_RCC_ClockConfig+0x358>)
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003720:	429a      	cmp	r2, r3
 8003722:	d208      	bcs.n	8003736 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003724:	4b3c      	ldr	r3, [pc, #240]	; (8003818 <HAL_RCC_ClockConfig+0x358>)
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	4939      	ldr	r1, [pc, #228]	; (8003818 <HAL_RCC_ClockConfig+0x358>)
 8003732:	4313      	orrs	r3, r2
 8003734:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d010      	beq.n	8003764 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	4b34      	ldr	r3, [pc, #208]	; (8003818 <HAL_RCC_ClockConfig+0x358>)
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800374e:	429a      	cmp	r2, r3
 8003750:	d208      	bcs.n	8003764 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003752:	4b31      	ldr	r3, [pc, #196]	; (8003818 <HAL_RCC_ClockConfig+0x358>)
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	492e      	ldr	r1, [pc, #184]	; (8003818 <HAL_RCC_ClockConfig+0x358>)
 8003760:	4313      	orrs	r3, r2
 8003762:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	2b00      	cmp	r3, #0
 800376e:	d010      	beq.n	8003792 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	4b28      	ldr	r3, [pc, #160]	; (8003818 <HAL_RCC_ClockConfig+0x358>)
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800377c:	429a      	cmp	r2, r3
 800377e:	d208      	bcs.n	8003792 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003780:	4b25      	ldr	r3, [pc, #148]	; (8003818 <HAL_RCC_ClockConfig+0x358>)
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	4922      	ldr	r1, [pc, #136]	; (8003818 <HAL_RCC_ClockConfig+0x358>)
 800378e:	4313      	orrs	r3, r2
 8003790:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	d010      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69da      	ldr	r2, [r3, #28]
 80037a2:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <HAL_RCC_ClockConfig+0x358>)
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d208      	bcs.n	80037c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037ae:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <HAL_RCC_ClockConfig+0x358>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	4917      	ldr	r1, [pc, #92]	; (8003818 <HAL_RCC_ClockConfig+0x358>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037c0:	f000 f834 	bl	800382c <HAL_RCC_GetSysClockFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b14      	ldr	r3, [pc, #80]	; (8003818 <HAL_RCC_ClockConfig+0x358>)
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	0a1b      	lsrs	r3, r3, #8
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	4912      	ldr	r1, [pc, #72]	; (800381c <HAL_RCC_ClockConfig+0x35c>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
 80037dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037de:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <HAL_RCC_ClockConfig+0x358>)
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	4a0d      	ldr	r2, [pc, #52]	; (800381c <HAL_RCC_ClockConfig+0x35c>)
 80037e8:	5cd3      	ldrb	r3, [r2, r3]
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	fa22 f303 	lsr.w	r3, r2, r3
 80037f4:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <HAL_RCC_ClockConfig+0x360>)
 80037f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037f8:	4a0a      	ldr	r2, [pc, #40]	; (8003824 <HAL_RCC_ClockConfig+0x364>)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80037fe:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <HAL_RCC_ClockConfig+0x368>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd fc4c 	bl	80010a0 <HAL_InitTick>
 8003808:	4603      	mov	r3, r0
 800380a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800380c:	7bfb      	ldrb	r3, [r7, #15]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	58024400 	.word	0x58024400
 800381c:	0800c698 	.word	0x0800c698
 8003820:	24000004 	.word	0x24000004
 8003824:	24000000 	.word	0x24000000
 8003828:	24000008 	.word	0x24000008

0800382c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800382c:	b480      	push	{r7}
 800382e:	b089      	sub	sp, #36	; 0x24
 8003830:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003832:	4bb3      	ldr	r3, [pc, #716]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800383a:	2b18      	cmp	r3, #24
 800383c:	f200 8155 	bhi.w	8003aea <HAL_RCC_GetSysClockFreq+0x2be>
 8003840:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003846:	bf00      	nop
 8003848:	080038ad 	.word	0x080038ad
 800384c:	08003aeb 	.word	0x08003aeb
 8003850:	08003aeb 	.word	0x08003aeb
 8003854:	08003aeb 	.word	0x08003aeb
 8003858:	08003aeb 	.word	0x08003aeb
 800385c:	08003aeb 	.word	0x08003aeb
 8003860:	08003aeb 	.word	0x08003aeb
 8003864:	08003aeb 	.word	0x08003aeb
 8003868:	080038d3 	.word	0x080038d3
 800386c:	08003aeb 	.word	0x08003aeb
 8003870:	08003aeb 	.word	0x08003aeb
 8003874:	08003aeb 	.word	0x08003aeb
 8003878:	08003aeb 	.word	0x08003aeb
 800387c:	08003aeb 	.word	0x08003aeb
 8003880:	08003aeb 	.word	0x08003aeb
 8003884:	08003aeb 	.word	0x08003aeb
 8003888:	080038d9 	.word	0x080038d9
 800388c:	08003aeb 	.word	0x08003aeb
 8003890:	08003aeb 	.word	0x08003aeb
 8003894:	08003aeb 	.word	0x08003aeb
 8003898:	08003aeb 	.word	0x08003aeb
 800389c:	08003aeb 	.word	0x08003aeb
 80038a0:	08003aeb 	.word	0x08003aeb
 80038a4:	08003aeb 	.word	0x08003aeb
 80038a8:	080038df 	.word	0x080038df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038ac:	4b94      	ldr	r3, [pc, #592]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0320 	and.w	r3, r3, #32
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d009      	beq.n	80038cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038b8:	4b91      	ldr	r3, [pc, #580]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	08db      	lsrs	r3, r3, #3
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	4a90      	ldr	r2, [pc, #576]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
 80038c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80038ca:	e111      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80038cc:	4b8d      	ldr	r3, [pc, #564]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038ce:	61bb      	str	r3, [r7, #24]
      break;
 80038d0:	e10e      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80038d2:	4b8d      	ldr	r3, [pc, #564]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038d4:	61bb      	str	r3, [r7, #24]
      break;
 80038d6:	e10b      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80038d8:	4b8c      	ldr	r3, [pc, #560]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80038da:	61bb      	str	r3, [r7, #24]
      break;
 80038dc:	e108      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038de:	4b88      	ldr	r3, [pc, #544]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80038e8:	4b85      	ldr	r3, [pc, #532]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80038f4:	4b82      	ldr	r3, [pc, #520]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80038fe:	4b80      	ldr	r3, [pc, #512]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003902:	08db      	lsrs	r3, r3, #3
 8003904:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	fb02 f303 	mul.w	r3, r2, r3
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003916:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80e1 	beq.w	8003ae4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b02      	cmp	r3, #2
 8003926:	f000 8083 	beq.w	8003a30 <HAL_RCC_GetSysClockFreq+0x204>
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b02      	cmp	r3, #2
 800392e:	f200 80a1 	bhi.w	8003a74 <HAL_RCC_GetSysClockFreq+0x248>
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_RCC_GetSysClockFreq+0x114>
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d056      	beq.n	80039ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800393e:	e099      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003940:	4b6f      	ldr	r3, [pc, #444]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d02d      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800394c:	4b6c      	ldr	r3, [pc, #432]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	08db      	lsrs	r3, r3, #3
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	4a6b      	ldr	r2, [pc, #428]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
 800395c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	ee07 3a90 	vmov	s15, r3
 8003964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	ee07 3a90 	vmov	s15, r3
 800396e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003976:	4b62      	ldr	r3, [pc, #392]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003986:	ed97 6a02 	vldr	s12, [r7, #8]
 800398a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800398e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800399a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80039a6:	e087      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	ee07 3a90 	vmov	s15, r3
 80039ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003b14 <HAL_RCC_GetSysClockFreq+0x2e8>
 80039b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ba:	4b51      	ldr	r3, [pc, #324]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039ea:	e065      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003b18 <HAL_RCC_GetSysClockFreq+0x2ec>
 80039fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039fe:	4b40      	ldr	r3, [pc, #256]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a12:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a2e:	e043      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003b1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a42:	4b2f      	ldr	r3, [pc, #188]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a56:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a72:	e021      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003b18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a86:	4b1e      	ldr	r3, [pc, #120]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a9a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ab6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003ab8:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	0a5b      	lsrs	r3, r3, #9
 8003abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	ee07 3a90 	vmov	s15, r3
 8003acc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ad0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003adc:	ee17 3a90 	vmov	r3, s15
 8003ae0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003ae2:	e005      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61bb      	str	r3, [r7, #24]
      break;
 8003ae8:	e002      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003aea:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003aec:	61bb      	str	r3, [r7, #24]
      break;
 8003aee:	bf00      	nop
  }

  return sysclockfreq;
 8003af0:	69bb      	ldr	r3, [r7, #24]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3724      	adds	r7, #36	; 0x24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	58024400 	.word	0x58024400
 8003b04:	03d09000 	.word	0x03d09000
 8003b08:	003d0900 	.word	0x003d0900
 8003b0c:	017d7840 	.word	0x017d7840
 8003b10:	46000000 	.word	0x46000000
 8003b14:	4c742400 	.word	0x4c742400
 8003b18:	4a742400 	.word	0x4a742400
 8003b1c:	4bbebc20 	.word	0x4bbebc20

08003b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b26:	f7ff fe81 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	0a1b      	lsrs	r3, r3, #8
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	490f      	ldr	r1, [pc, #60]	; (8003b74 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b38:	5ccb      	ldrb	r3, [r1, r3]
 8003b3a:	f003 031f 	and.w	r3, r3, #31
 8003b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b44:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	4a09      	ldr	r2, [pc, #36]	; (8003b74 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b4e:	5cd3      	ldrb	r3, [r2, r3]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5a:	4a07      	ldr	r2, [pc, #28]	; (8003b78 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b5e:	4a07      	ldr	r2, [pc, #28]	; (8003b7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b64:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b66:	681b      	ldr	r3, [r3, #0]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	58024400 	.word	0x58024400
 8003b74:	0800c698 	.word	0x0800c698
 8003b78:	24000004 	.word	0x24000004
 8003b7c:	24000000 	.word	0x24000000

08003b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b84:	f7ff ffcc 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	091b      	lsrs	r3, r3, #4
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4904      	ldr	r1, [pc, #16]	; (8003ba8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	58024400 	.word	0x58024400
 8003ba8:	0800c698 	.word	0x0800c698

08003bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003bb0:	f7ff ffb6 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4904      	ldr	r1, [pc, #16]	; (8003bd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	58024400 	.word	0x58024400
 8003bd4:	0800c698 	.word	0x0800c698

08003bd8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bdc:	b0c6      	sub	sp, #280	; 0x118
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003be4:	2300      	movs	r3, #0
 8003be6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bea:	2300      	movs	r3, #0
 8003bec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003bfc:	2500      	movs	r5, #0
 8003bfe:	ea54 0305 	orrs.w	r3, r4, r5
 8003c02:	d049      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c0e:	d02f      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003c10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c14:	d828      	bhi.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c1a:	d01a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c20:	d822      	bhi.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2a:	d007      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c2c:	e01c      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c2e:	4bab      	ldr	r3, [pc, #684]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	4aaa      	ldr	r2, [pc, #680]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c3a:	e01a      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c40:	3308      	adds	r3, #8
 8003c42:	2102      	movs	r1, #2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f002 fa49 	bl	80060dc <RCCEx_PLL2_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c50:	e00f      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c56:	3328      	adds	r3, #40	; 0x28
 8003c58:	2102      	movs	r1, #2
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f002 faf0 	bl	8006240 <RCCEx_PLL3_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c66:	e004      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003c6e:	e000      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c7a:	4b98      	ldr	r3, [pc, #608]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c88:	4a94      	ldr	r2, [pc, #592]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c8a:	430b      	orrs	r3, r1
 8003c8c:	6513      	str	r3, [r2, #80]	; 0x50
 8003c8e:	e003      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003ca4:	f04f 0900 	mov.w	r9, #0
 8003ca8:	ea58 0309 	orrs.w	r3, r8, r9
 8003cac:	d047      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d82a      	bhi.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003cb8:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003cd5 	.word	0x08003cd5
 8003cc4:	08003ce3 	.word	0x08003ce3
 8003cc8:	08003cf9 	.word	0x08003cf9
 8003ccc:	08003d17 	.word	0x08003d17
 8003cd0:	08003d17 	.word	0x08003d17
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cd4:	4b81      	ldr	r3, [pc, #516]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	4a80      	ldr	r2, [pc, #512]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ce0:	e01a      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ce6:	3308      	adds	r3, #8
 8003ce8:	2100      	movs	r1, #0
 8003cea:	4618      	mov	r0, r3
 8003cec:	f002 f9f6 	bl	80060dc <RCCEx_PLL2_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cf6:	e00f      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cfc:	3328      	adds	r3, #40	; 0x28
 8003cfe:	2100      	movs	r1, #0
 8003d00:	4618      	mov	r0, r3
 8003d02:	f002 fa9d 	bl	8006240 <RCCEx_PLL3_Config>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d0c:	e004      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003d14:	e000      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d20:	4b6e      	ldr	r3, [pc, #440]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d24:	f023 0107 	bic.w	r1, r3, #7
 8003d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	4a6b      	ldr	r2, [pc, #428]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d30:	430b      	orrs	r3, r1
 8003d32:	6513      	str	r3, [r2, #80]	; 0x50
 8003d34:	e003      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d3a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8003d4a:	f04f 0b00 	mov.w	fp, #0
 8003d4e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d52:	d05b      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d5c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003d60:	d03b      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003d62:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003d66:	d834      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d6c:	d037      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003d6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d72:	d82e      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d74:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d78:	d033      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003d7a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d7e:	d828      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d84:	d01a      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d8a:	d822      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003d90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d94:	d007      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003d96:	e01c      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d98:	4b50      	ldr	r3, [pc, #320]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	4a4f      	ldr	r2, [pc, #316]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003da4:	e01e      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003daa:	3308      	adds	r3, #8
 8003dac:	2100      	movs	r1, #0
 8003dae:	4618      	mov	r0, r3
 8003db0:	f002 f994 	bl	80060dc <RCCEx_PLL2_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003dba:	e013      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dc0:	3328      	adds	r3, #40	; 0x28
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f002 fa3b 	bl	8006240 <RCCEx_PLL3_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dd0:	e008      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003dd8:	e004      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10b      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003dec:	4b3b      	ldr	r3, [pc, #236]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003df8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dfc:	4a37      	ldr	r2, [pc, #220]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	6593      	str	r3, [r2, #88]	; 0x58
 8003e02:	e003      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003e18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003e22:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003e26:	460b      	mov	r3, r1
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	d05d      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e34:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003e38:	d03b      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003e3a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003e3e:	d834      	bhi.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e44:	d037      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003e46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e4a:	d82e      	bhi.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e50:	d033      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003e52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e56:	d828      	bhi.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e5c:	d01a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003e5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e62:	d822      	bhi.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e6c:	d007      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003e6e:	e01c      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e70:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	4a19      	ldr	r2, [pc, #100]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e7c:	e01e      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e82:	3308      	adds	r3, #8
 8003e84:	2100      	movs	r1, #0
 8003e86:	4618      	mov	r0, r3
 8003e88:	f002 f928 	bl	80060dc <RCCEx_PLL2_Config>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e92:	e013      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e98:	3328      	adds	r3, #40	; 0x28
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f002 f9cf 	bl	8006240 <RCCEx_PLL3_Config>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ea8:	e008      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003eb0:	e004      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003eb2:	bf00      	nop
 8003eb4:	e002      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003eb6:	bf00      	nop
 8003eb8:	e000      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ebc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10d      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ed0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ed4:	4a01      	ldr	r2, [pc, #4]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8003eda:	e005      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003edc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ee4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003ef4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003efe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4313      	orrs	r3, r2
 8003f06:	d03a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0e:	2b30      	cmp	r3, #48	; 0x30
 8003f10:	d01f      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003f12:	2b30      	cmp	r3, #48	; 0x30
 8003f14:	d819      	bhi.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d00c      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d815      	bhi.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d019      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003f22:	2b10      	cmp	r3, #16
 8003f24:	d111      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f26:	4baa      	ldr	r3, [pc, #680]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	4aa9      	ldr	r2, [pc, #676]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f32:	e011      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f38:	3308      	adds	r3, #8
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f002 f8cd 	bl	80060dc <RCCEx_PLL2_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f48:	e006      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003f50:	e002      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003f52:	bf00      	nop
 8003f54:	e000      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10a      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003f60:	4b9b      	ldr	r3, [pc, #620]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f64:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6e:	4a98      	ldr	r2, [pc, #608]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f70:	430b      	orrs	r3, r1
 8003f72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f74:	e003      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f7a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003f94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	d051      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa8:	d035      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003faa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fae:	d82e      	bhi.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003fb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fb4:	d031      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003fb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fba:	d828      	bhi.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc0:	d01a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc6:	d822      	bhi.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd0:	d007      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003fd2:	e01c      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd4:	4b7e      	ldr	r3, [pc, #504]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	4a7d      	ldr	r2, [pc, #500]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003fe0:	e01c      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f002 f876 	bl	80060dc <RCCEx_PLL2_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ff6:	e011      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ffc:	3328      	adds	r3, #40	; 0x28
 8003ffe:	2100      	movs	r1, #0
 8004000:	4618      	mov	r0, r3
 8004002:	f002 f91d 	bl	8006240 <RCCEx_PLL3_Config>
 8004006:	4603      	mov	r3, r0
 8004008:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800400c:	e006      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004014:	e002      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004016:	bf00      	nop
 8004018:	e000      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800401a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800401c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004024:	4b6a      	ldr	r3, [pc, #424]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004028:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800402c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004032:	4a67      	ldr	r2, [pc, #412]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004034:	430b      	orrs	r3, r1
 8004036:	6513      	str	r3, [r2, #80]	; 0x50
 8004038:	e003      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800403e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800404e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004052:	2300      	movs	r3, #0
 8004054:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004058:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800405c:	460b      	mov	r3, r1
 800405e:	4313      	orrs	r3, r2
 8004060:	d053      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800406c:	d033      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800406e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004072:	d82c      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004074:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004078:	d02f      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x502>
 800407a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800407e:	d826      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004080:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004084:	d02b      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004086:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800408a:	d820      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800408c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004090:	d012      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004096:	d81a      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d022      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800409c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a0:	d115      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040a6:	3308      	adds	r3, #8
 80040a8:	2101      	movs	r1, #1
 80040aa:	4618      	mov	r0, r3
 80040ac:	f002 f816 	bl	80060dc <RCCEx_PLL2_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040b6:	e015      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040bc:	3328      	adds	r3, #40	; 0x28
 80040be:	2101      	movs	r1, #1
 80040c0:	4618      	mov	r0, r3
 80040c2:	f002 f8bd 	bl	8006240 <RCCEx_PLL3_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040cc:	e00a      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80040d4:	e006      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80040d6:	bf00      	nop
 80040d8:	e004      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80040da:	bf00      	nop
 80040dc:	e002      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80040de:	bf00      	nop
 80040e0:	e000      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80040e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80040ec:	4b38      	ldr	r3, [pc, #224]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80040f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fa:	4a35      	ldr	r2, [pc, #212]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6513      	str	r3, [r2, #80]	; 0x50
 8004100:	e003      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004102:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004106:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800410a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800410e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004112:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004116:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800411a:	2300      	movs	r3, #0
 800411c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004120:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004124:	460b      	mov	r3, r1
 8004126:	4313      	orrs	r3, r2
 8004128:	d058      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800412a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800412e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004132:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004136:	d033      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800413c:	d82c      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800413e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004142:	d02f      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004148:	d826      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800414a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800414e:	d02b      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004150:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004154:	d820      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800415a:	d012      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800415c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004160:	d81a      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004162:	2b00      	cmp	r3, #0
 8004164:	d022      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004166:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800416a:	d115      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800416c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004170:	3308      	adds	r3, #8
 8004172:	2101      	movs	r1, #1
 8004174:	4618      	mov	r0, r3
 8004176:	f001 ffb1 	bl	80060dc <RCCEx_PLL2_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004180:	e015      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004186:	3328      	adds	r3, #40	; 0x28
 8004188:	2101      	movs	r1, #1
 800418a:	4618      	mov	r0, r3
 800418c:	f002 f858 	bl	8006240 <RCCEx_PLL3_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004196:	e00a      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800419e:	e006      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041a0:	bf00      	nop
 80041a2:	e004      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041a4:	bf00      	nop
 80041a6:	e002      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041a8:	bf00      	nop
 80041aa:	e000      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10e      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80041be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041c6:	4a02      	ldr	r2, [pc, #8]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6593      	str	r3, [r2, #88]	; 0x58
 80041cc:	e006      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80041ce:	bf00      	nop
 80041d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80041e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041ec:	2300      	movs	r3, #0
 80041ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80041f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4313      	orrs	r3, r2
 80041fa:	d037      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80041fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004206:	d00e      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800420c:	d816      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d018      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004212:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004216:	d111      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004218:	4bc4      	ldr	r3, [pc, #784]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	4ac3      	ldr	r2, [pc, #780]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800421e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004222:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004224:	e00f      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800422a:	3308      	adds	r3, #8
 800422c:	2101      	movs	r1, #1
 800422e:	4618      	mov	r0, r3
 8004230:	f001 ff54 	bl	80060dc <RCCEx_PLL2_Config>
 8004234:	4603      	mov	r3, r0
 8004236:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800423a:	e004      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004242:	e000      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004246:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10a      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800424e:	4bb7      	ldr	r3, [pc, #732]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004252:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800425a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800425c:	4ab3      	ldr	r2, [pc, #716]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800425e:	430b      	orrs	r3, r1
 8004260:	6513      	str	r3, [r2, #80]	; 0x50
 8004262:	e003      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004264:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004268:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800426c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004274:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004278:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800427c:	2300      	movs	r3, #0
 800427e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004282:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004286:	460b      	mov	r3, r1
 8004288:	4313      	orrs	r3, r2
 800428a:	d039      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800428c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004292:	2b03      	cmp	r3, #3
 8004294:	d81c      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004296:	a201      	add	r2, pc, #4	; (adr r2, 800429c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429c:	080042d9 	.word	0x080042d9
 80042a0:	080042ad 	.word	0x080042ad
 80042a4:	080042bb 	.word	0x080042bb
 80042a8:	080042d9 	.word	0x080042d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ac:	4b9f      	ldr	r3, [pc, #636]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	4a9e      	ldr	r2, [pc, #632]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042b8:	e00f      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042be:	3308      	adds	r3, #8
 80042c0:	2102      	movs	r1, #2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 ff0a 	bl	80060dc <RCCEx_PLL2_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042ce:	e004      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80042d6:	e000      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80042d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10a      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80042e2:	4b92      	ldr	r3, [pc, #584]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e6:	f023 0103 	bic.w	r1, r3, #3
 80042ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f0:	4a8e      	ldr	r2, [pc, #568]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042f2:	430b      	orrs	r3, r1
 80042f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042f6:	e003      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800430c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004310:	2300      	movs	r3, #0
 8004312:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004316:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800431a:	460b      	mov	r3, r1
 800431c:	4313      	orrs	r3, r2
 800431e:	f000 8099 	beq.w	8004454 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004322:	4b83      	ldr	r3, [pc, #524]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a82      	ldr	r2, [pc, #520]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800432e:	f7fc ff01 	bl	8001134 <HAL_GetTick>
 8004332:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004336:	e00b      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004338:	f7fc fefc 	bl	8001134 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b64      	cmp	r3, #100	; 0x64
 8004346:	d903      	bls.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800434e:	e005      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004350:	4b77      	ldr	r3, [pc, #476]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ed      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800435c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004360:	2b00      	cmp	r3, #0
 8004362:	d173      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004364:	4b71      	ldr	r3, [pc, #452]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004366:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800436c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004370:	4053      	eors	r3, r2
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004376:	2b00      	cmp	r3, #0
 8004378:	d015      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800437a:	4b6c      	ldr	r3, [pc, #432]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004382:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004386:	4b69      	ldr	r3, [pc, #420]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	4a68      	ldr	r2, [pc, #416]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004390:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004392:	4b66      	ldr	r3, [pc, #408]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	4a65      	ldr	r2, [pc, #404]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800439e:	4a63      	ldr	r2, [pc, #396]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b2:	d118      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fc febe 	bl	8001134 <HAL_GetTick>
 80043b8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043bc:	e00d      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043be:	f7fc feb9 	bl	8001134 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80043c8:	1ad2      	subs	r2, r2, r3
 80043ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d903      	bls.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80043d8:	e005      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043da:	4b54      	ldr	r3, [pc, #336]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0eb      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80043e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d129      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043fe:	d10e      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004400:	4b4a      	ldr	r3, [pc, #296]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800440c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004410:	091a      	lsrs	r2, r3, #4
 8004412:	4b48      	ldr	r3, [pc, #288]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004414:	4013      	ands	r3, r2
 8004416:	4a45      	ldr	r2, [pc, #276]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004418:	430b      	orrs	r3, r1
 800441a:	6113      	str	r3, [r2, #16]
 800441c:	e005      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800441e:	4b43      	ldr	r3, [pc, #268]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	4a42      	ldr	r2, [pc, #264]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004424:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004428:	6113      	str	r3, [r2, #16]
 800442a:	4b40      	ldr	r3, [pc, #256]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800442c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800442e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004432:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800443a:	4a3c      	ldr	r2, [pc, #240]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800443c:	430b      	orrs	r3, r1
 800443e:	6713      	str	r3, [r2, #112]	; 0x70
 8004440:	e008      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004442:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004446:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800444a:	e003      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800444c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004450:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445c:	f002 0301 	and.w	r3, r2, #1
 8004460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004464:	2300      	movs	r3, #0
 8004466:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800446a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800446e:	460b      	mov	r3, r1
 8004470:	4313      	orrs	r3, r2
 8004472:	f000 808f 	beq.w	8004594 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800447a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800447c:	2b28      	cmp	r3, #40	; 0x28
 800447e:	d871      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004480:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004486:	bf00      	nop
 8004488:	0800456d 	.word	0x0800456d
 800448c:	08004565 	.word	0x08004565
 8004490:	08004565 	.word	0x08004565
 8004494:	08004565 	.word	0x08004565
 8004498:	08004565 	.word	0x08004565
 800449c:	08004565 	.word	0x08004565
 80044a0:	08004565 	.word	0x08004565
 80044a4:	08004565 	.word	0x08004565
 80044a8:	08004539 	.word	0x08004539
 80044ac:	08004565 	.word	0x08004565
 80044b0:	08004565 	.word	0x08004565
 80044b4:	08004565 	.word	0x08004565
 80044b8:	08004565 	.word	0x08004565
 80044bc:	08004565 	.word	0x08004565
 80044c0:	08004565 	.word	0x08004565
 80044c4:	08004565 	.word	0x08004565
 80044c8:	0800454f 	.word	0x0800454f
 80044cc:	08004565 	.word	0x08004565
 80044d0:	08004565 	.word	0x08004565
 80044d4:	08004565 	.word	0x08004565
 80044d8:	08004565 	.word	0x08004565
 80044dc:	08004565 	.word	0x08004565
 80044e0:	08004565 	.word	0x08004565
 80044e4:	08004565 	.word	0x08004565
 80044e8:	0800456d 	.word	0x0800456d
 80044ec:	08004565 	.word	0x08004565
 80044f0:	08004565 	.word	0x08004565
 80044f4:	08004565 	.word	0x08004565
 80044f8:	08004565 	.word	0x08004565
 80044fc:	08004565 	.word	0x08004565
 8004500:	08004565 	.word	0x08004565
 8004504:	08004565 	.word	0x08004565
 8004508:	0800456d 	.word	0x0800456d
 800450c:	08004565 	.word	0x08004565
 8004510:	08004565 	.word	0x08004565
 8004514:	08004565 	.word	0x08004565
 8004518:	08004565 	.word	0x08004565
 800451c:	08004565 	.word	0x08004565
 8004520:	08004565 	.word	0x08004565
 8004524:	08004565 	.word	0x08004565
 8004528:	0800456d 	.word	0x0800456d
 800452c:	58024400 	.word	0x58024400
 8004530:	58024800 	.word	0x58024800
 8004534:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800453c:	3308      	adds	r3, #8
 800453e:	2101      	movs	r1, #1
 8004540:	4618      	mov	r0, r3
 8004542:	f001 fdcb 	bl	80060dc <RCCEx_PLL2_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800454c:	e00f      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800454e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004552:	3328      	adds	r3, #40	; 0x28
 8004554:	2101      	movs	r1, #1
 8004556:	4618      	mov	r0, r3
 8004558:	f001 fe72 	bl	8006240 <RCCEx_PLL3_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004562:	e004      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800456a:	e000      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800456c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800456e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10a      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004576:	4bbf      	ldr	r3, [pc, #764]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800457e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004584:	4abb      	ldr	r2, [pc, #748]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004586:	430b      	orrs	r3, r1
 8004588:	6553      	str	r3, [r2, #84]	; 0x54
 800458a:	e003      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004590:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	f002 0302 	and.w	r3, r2, #2
 80045a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045a4:	2300      	movs	r3, #0
 80045a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045aa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4313      	orrs	r3, r2
 80045b2:	d041      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80045b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ba:	2b05      	cmp	r3, #5
 80045bc:	d824      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80045be:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	08004611 	.word	0x08004611
 80045c8:	080045dd 	.word	0x080045dd
 80045cc:	080045f3 	.word	0x080045f3
 80045d0:	08004611 	.word	0x08004611
 80045d4:	08004611 	.word	0x08004611
 80045d8:	08004611 	.word	0x08004611
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045e0:	3308      	adds	r3, #8
 80045e2:	2101      	movs	r1, #1
 80045e4:	4618      	mov	r0, r3
 80045e6:	f001 fd79 	bl	80060dc <RCCEx_PLL2_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80045f0:	e00f      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045f6:	3328      	adds	r3, #40	; 0x28
 80045f8:	2101      	movs	r1, #1
 80045fa:	4618      	mov	r0, r3
 80045fc:	f001 fe20 	bl	8006240 <RCCEx_PLL3_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004606:	e004      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800460e:	e000      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004612:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800461a:	4b96      	ldr	r3, [pc, #600]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800461c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461e:	f023 0107 	bic.w	r1, r3, #7
 8004622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004628:	4a92      	ldr	r2, [pc, #584]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800462a:	430b      	orrs	r3, r1
 800462c:	6553      	str	r3, [r2, #84]	; 0x54
 800462e:	e003      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004630:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004634:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	f002 0304 	and.w	r3, r2, #4
 8004644:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004648:	2300      	movs	r3, #0
 800464a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800464e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004652:	460b      	mov	r3, r1
 8004654:	4313      	orrs	r3, r2
 8004656:	d044      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004660:	2b05      	cmp	r3, #5
 8004662:	d825      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004664:	a201      	add	r2, pc, #4	; (adr r2, 800466c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466a:	bf00      	nop
 800466c:	080046b9 	.word	0x080046b9
 8004670:	08004685 	.word	0x08004685
 8004674:	0800469b 	.word	0x0800469b
 8004678:	080046b9 	.word	0x080046b9
 800467c:	080046b9 	.word	0x080046b9
 8004680:	080046b9 	.word	0x080046b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004688:	3308      	adds	r3, #8
 800468a:	2101      	movs	r1, #1
 800468c:	4618      	mov	r0, r3
 800468e:	f001 fd25 	bl	80060dc <RCCEx_PLL2_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004698:	e00f      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800469a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800469e:	3328      	adds	r3, #40	; 0x28
 80046a0:	2101      	movs	r1, #1
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 fdcc 	bl	8006240 <RCCEx_PLL3_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046ae:	e004      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80046b6:	e000      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80046b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10b      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046c2:	4b6c      	ldr	r3, [pc, #432]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80046c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c6:	f023 0107 	bic.w	r1, r3, #7
 80046ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d2:	4a68      	ldr	r2, [pc, #416]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80046d4:	430b      	orrs	r3, r1
 80046d6:	6593      	str	r3, [r2, #88]	; 0x58
 80046d8:	e003      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	f002 0320 	and.w	r3, r2, #32
 80046ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046f2:	2300      	movs	r3, #0
 80046f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80046f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4313      	orrs	r3, r2
 8004700:	d055      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800470a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800470e:	d033      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004710:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004714:	d82c      	bhi.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471a:	d02f      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800471c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004720:	d826      	bhi.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004722:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004726:	d02b      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004728:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800472c:	d820      	bhi.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800472e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004732:	d012      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004738:	d81a      	bhi.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800473a:	2b00      	cmp	r3, #0
 800473c:	d022      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800473e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004742:	d115      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004748:	3308      	adds	r3, #8
 800474a:	2100      	movs	r1, #0
 800474c:	4618      	mov	r0, r3
 800474e:	f001 fcc5 	bl	80060dc <RCCEx_PLL2_Config>
 8004752:	4603      	mov	r3, r0
 8004754:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004758:	e015      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800475a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800475e:	3328      	adds	r3, #40	; 0x28
 8004760:	2102      	movs	r1, #2
 8004762:	4618      	mov	r0, r3
 8004764:	f001 fd6c 	bl	8006240 <RCCEx_PLL3_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800476e:	e00a      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004776:	e006      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004778:	bf00      	nop
 800477a:	e004      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800477c:	bf00      	nop
 800477e:	e002      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004780:	bf00      	nop
 8004782:	e000      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004786:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10b      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800478e:	4b39      	ldr	r3, [pc, #228]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004792:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800479a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800479e:	4a35      	ldr	r2, [pc, #212]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6553      	str	r3, [r2, #84]	; 0x54
 80047a4:	e003      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80047ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80047ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047be:	2300      	movs	r3, #0
 80047c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047c4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80047c8:	460b      	mov	r3, r1
 80047ca:	4313      	orrs	r3, r2
 80047cc:	d058      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80047ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047da:	d033      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80047dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047e0:	d82c      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80047e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e6:	d02f      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80047e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ec:	d826      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80047ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047f2:	d02b      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80047f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047f8:	d820      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80047fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047fe:	d012      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004804:	d81a      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d022      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800480a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800480e:	d115      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004814:	3308      	adds	r3, #8
 8004816:	2100      	movs	r1, #0
 8004818:	4618      	mov	r0, r3
 800481a:	f001 fc5f 	bl	80060dc <RCCEx_PLL2_Config>
 800481e:	4603      	mov	r3, r0
 8004820:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004824:	e015      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800482a:	3328      	adds	r3, #40	; 0x28
 800482c:	2102      	movs	r1, #2
 800482e:	4618      	mov	r0, r3
 8004830:	f001 fd06 	bl	8006240 <RCCEx_PLL3_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800483a:	e00a      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004842:	e006      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004844:	bf00      	nop
 8004846:	e004      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004848:	bf00      	nop
 800484a:	e002      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800484c:	bf00      	nop
 800484e:	e000      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004852:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10e      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800485a:	4b06      	ldr	r3, [pc, #24]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800485c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004866:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800486a:	4a02      	ldr	r2, [pc, #8]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800486c:	430b      	orrs	r3, r1
 800486e:	6593      	str	r3, [r2, #88]	; 0x58
 8004870:	e006      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004872:	bf00      	nop
 8004874:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004878:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800487c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800488c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004890:	2300      	movs	r3, #0
 8004892:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004896:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800489a:	460b      	mov	r3, r1
 800489c:	4313      	orrs	r3, r2
 800489e:	d055      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80048a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048ac:	d033      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80048ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048b2:	d82c      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80048b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b8:	d02f      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80048ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048be:	d826      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80048c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048c4:	d02b      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80048c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048ca:	d820      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80048cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048d0:	d012      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80048d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048d6:	d81a      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d022      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80048dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e0:	d115      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048e6:	3308      	adds	r3, #8
 80048e8:	2100      	movs	r1, #0
 80048ea:	4618      	mov	r0, r3
 80048ec:	f001 fbf6 	bl	80060dc <RCCEx_PLL2_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80048f6:	e015      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048fc:	3328      	adds	r3, #40	; 0x28
 80048fe:	2102      	movs	r1, #2
 8004900:	4618      	mov	r0, r3
 8004902:	f001 fc9d 	bl	8006240 <RCCEx_PLL3_Config>
 8004906:	4603      	mov	r3, r0
 8004908:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800490c:	e00a      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004914:	e006      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004916:	bf00      	nop
 8004918:	e004      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800491a:	bf00      	nop
 800491c:	e002      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800491e:	bf00      	nop
 8004920:	e000      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004924:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10b      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800492c:	4ba0      	ldr	r3, [pc, #640]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800492e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004930:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004938:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800493c:	4a9c      	ldr	r2, [pc, #624]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800493e:	430b      	orrs	r3, r1
 8004940:	6593      	str	r3, [r2, #88]	; 0x58
 8004942:	e003      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004944:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004948:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800494c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004954:	f002 0308 	and.w	r3, r2, #8
 8004958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800495c:	2300      	movs	r3, #0
 800495e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004962:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004966:	460b      	mov	r3, r1
 8004968:	4313      	orrs	r3, r2
 800496a:	d01e      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800496c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004978:	d10c      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800497a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800497e:	3328      	adds	r3, #40	; 0x28
 8004980:	2102      	movs	r1, #2
 8004982:	4618      	mov	r0, r3
 8004984:	f001 fc5c 	bl	8006240 <RCCEx_PLL3_Config>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004994:	4b86      	ldr	r3, [pc, #536]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004998:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800499c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049a4:	4a82      	ldr	r2, [pc, #520]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80049a6:	430b      	orrs	r3, r1
 80049a8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	f002 0310 	and.w	r3, r2, #16
 80049b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049ba:	2300      	movs	r3, #0
 80049bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049c0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80049c4:	460b      	mov	r3, r1
 80049c6:	4313      	orrs	r3, r2
 80049c8:	d01e      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80049ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d6:	d10c      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049dc:	3328      	adds	r3, #40	; 0x28
 80049de:	2102      	movs	r1, #2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 fc2d 	bl	8006240 <RCCEx_PLL3_Config>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049f2:	4b6f      	ldr	r3, [pc, #444]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80049f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a02:	4a6b      	ldr	r2, [pc, #428]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a04:	430b      	orrs	r3, r1
 8004a06:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004a14:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a16:	2300      	movs	r3, #0
 8004a18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a1a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4313      	orrs	r3, r2
 8004a22:	d03e      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a30:	d022      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004a32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a36:	d81b      	bhi.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a40:	d00b      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004a42:	e015      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a48:	3308      	adds	r3, #8
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f001 fb45 	bl	80060dc <RCCEx_PLL2_Config>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a58:	e00f      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a5e:	3328      	adds	r3, #40	; 0x28
 8004a60:	2102      	movs	r1, #2
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 fbec 	bl	8006240 <RCCEx_PLL3_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a6e:	e004      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004a76:	e000      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10b      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a82:	4b4b      	ldr	r3, [pc, #300]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a86:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a92:	4a47      	ldr	r2, [pc, #284]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a94:	430b      	orrs	r3, r1
 8004a96:	6593      	str	r3, [r2, #88]	; 0x58
 8004a98:	e003      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a9e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aaa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004aae:	673b      	str	r3, [r7, #112]	; 0x70
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	677b      	str	r3, [r7, #116]	; 0x74
 8004ab4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4313      	orrs	r3, r2
 8004abc:	d03b      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ac6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004aca:	d01f      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004acc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ad0:	d818      	bhi.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad6:	d003      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004ad8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004adc:	d007      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004ade:	e011      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae0:	4b33      	ldr	r3, [pc, #204]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	4a32      	ldr	r2, [pc, #200]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004aec:	e00f      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004af2:	3328      	adds	r3, #40	; 0x28
 8004af4:	2101      	movs	r1, #1
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 fba2 	bl	8006240 <RCCEx_PLL3_Config>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b02:	e004      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004b0a:	e000      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10b      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b16:	4b26      	ldr	r3, [pc, #152]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b26:	4a22      	ldr	r2, [pc, #136]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	6553      	str	r3, [r2, #84]	; 0x54
 8004b2c:	e003      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b32:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b44:	2300      	movs	r3, #0
 8004b46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b48:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	d034      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b60:	d007      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004b62:	e011      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b64:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	4a11      	ldr	r2, [pc, #68]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b70:	e00e      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b76:	3308      	adds	r3, #8
 8004b78:	2102      	movs	r1, #2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f001 faae 	bl	80060dc <RCCEx_PLL2_Config>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b86:	e003      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10d      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba6:	4a02      	ldr	r2, [pc, #8]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bac:	e006      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004bae:	bf00      	nop
 8004bb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004bc8:	663b      	str	r3, [r7, #96]	; 0x60
 8004bca:	2300      	movs	r3, #0
 8004bcc:	667b      	str	r3, [r7, #100]	; 0x64
 8004bce:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	d00c      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bdc:	3328      	adds	r3, #40	; 0x28
 8004bde:	2102      	movs	r1, #2
 8004be0:	4618      	mov	r0, r3
 8004be2:	f001 fb2d 	bl	8006240 <RCCEx_PLL3_Config>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004bfe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c00:	2300      	movs	r3, #0
 8004c02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c04:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	d036      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c18:	d018      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004c1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c1e:	d811      	bhi.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c24:	d014      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2a:	d80b      	bhi.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d011      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c34:	d106      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c36:	4bb7      	ldr	r3, [pc, #732]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3a:	4ab6      	ldr	r2, [pc, #728]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c42:	e008      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c4a:	e004      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004c4c:	bf00      	nop
 8004c4e:	e002      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004c50:	bf00      	nop
 8004c52:	e000      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10a      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c5e:	4bad      	ldr	r3, [pc, #692]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c6c:	4aa9      	ldr	r2, [pc, #676]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c6e:	430b      	orrs	r3, r1
 8004c70:	6553      	str	r3, [r2, #84]	; 0x54
 8004c72:	e003      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004c88:	653b      	str	r3, [r7, #80]	; 0x50
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	657b      	str	r3, [r7, #84]	; 0x54
 8004c8e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004c92:	460b      	mov	r3, r1
 8004c94:	4313      	orrs	r3, r2
 8004c96:	d009      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c98:	4b9e      	ldr	r3, [pc, #632]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c9c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	4a9b      	ldr	r2, [pc, #620]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004cb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cba:	2300      	movs	r3, #0
 8004cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cbe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	d009      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cc8:	4b92      	ldr	r3, [pc, #584]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ccc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cd6:	4a8f      	ldr	r2, [pc, #572]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8004cea:	2300      	movs	r3, #0
 8004cec:	647b      	str	r3, [r7, #68]	; 0x44
 8004cee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	d00e      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cf8:	4b86      	ldr	r3, [pc, #536]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	4a85      	ldr	r2, [pc, #532]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004cfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d02:	6113      	str	r3, [r2, #16]
 8004d04:	4b83      	ldr	r3, [pc, #524]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d06:	6919      	ldr	r1, [r3, #16]
 8004d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d10:	4a80      	ldr	r2, [pc, #512]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d12:	430b      	orrs	r3, r1
 8004d14:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004d22:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d24:	2300      	movs	r3, #0
 8004d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d28:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	d009      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d32:	4b78      	ldr	r3, [pc, #480]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d36:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d40:	4a74      	ldr	r2, [pc, #464]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d42:	430b      	orrs	r3, r1
 8004d44:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004d52:	633b      	str	r3, [r7, #48]	; 0x30
 8004d54:	2300      	movs	r3, #0
 8004d56:	637b      	str	r3, [r7, #52]	; 0x34
 8004d58:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	d00a      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d62:	4b6c      	ldr	r3, [pc, #432]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d66:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d72:	4a68      	ldr	r2, [pc, #416]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d74:	430b      	orrs	r3, r1
 8004d76:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	2100      	movs	r1, #0
 8004d82:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d8a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4313      	orrs	r3, r2
 8004d92:	d011      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d98:	3308      	adds	r3, #8
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 f99d 	bl	80060dc <RCCEx_PLL2_Config>
 8004da2:	4603      	mov	r3, r0
 8004da4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004da8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004db4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	6239      	str	r1, [r7, #32]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	d011      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dd8:	3308      	adds	r3, #8
 8004dda:	2101      	movs	r1, #1
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f001 f97d 	bl	80060dc <RCCEx_PLL2_Config>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004de8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004df4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e00:	2100      	movs	r1, #0
 8004e02:	61b9      	str	r1, [r7, #24]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	61fb      	str	r3, [r7, #28]
 8004e0a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4313      	orrs	r3, r2
 8004e12:	d011      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e18:	3308      	adds	r3, #8
 8004e1a:	2102      	movs	r1, #2
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f001 f95d 	bl	80060dc <RCCEx_PLL2_Config>
 8004e22:	4603      	mov	r3, r0
 8004e24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004e28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e34:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e40:	2100      	movs	r1, #0
 8004e42:	6139      	str	r1, [r7, #16]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4313      	orrs	r3, r2
 8004e52:	d011      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e58:	3328      	adds	r3, #40	; 0x28
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f001 f9ef 	bl	8006240 <RCCEx_PLL3_Config>
 8004e62:	4603      	mov	r3, r0
 8004e64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8004e68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e80:	2100      	movs	r1, #0
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	f003 0310 	and.w	r3, r3, #16
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4313      	orrs	r3, r2
 8004e92:	d011      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e98:	3328      	adds	r3, #40	; 0x28
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f001 f9cf 	bl	8006240 <RCCEx_PLL3_Config>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004ea8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004eb4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	6039      	str	r1, [r7, #0]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	607b      	str	r3, [r7, #4]
 8004eca:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	d011      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ed8:	3328      	adds	r3, #40	; 0x28
 8004eda:	2102      	movs	r1, #2
 8004edc:	4618      	mov	r0, r3
 8004ede:	f001 f9af 	bl	8006240 <RCCEx_PLL3_Config>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004ee8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ef4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8004ef8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	e000      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f12:	bf00      	nop
 8004f14:	58024400 	.word	0x58024400

08004f18 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b090      	sub	sp, #64	; 0x40
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f26:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004f2a:	430b      	orrs	r3, r1
 8004f2c:	f040 8094 	bne.w	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004f30:	4b9b      	ldr	r3, [pc, #620]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	f200 8087 	bhi.w	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004f42:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f48:	08004f5d 	.word	0x08004f5d
 8004f4c:	08004f85 	.word	0x08004f85
 8004f50:	08004fad 	.word	0x08004fad
 8004f54:	08005049 	.word	0x08005049
 8004f58:	08004fd5 	.word	0x08004fd5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f5c:	4b90      	ldr	r3, [pc, #576]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f68:	d108      	bne.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 ff62 	bl	8005e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f78:	f000 bc93 	b.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f80:	f000 bc8f 	b.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f84:	4b86      	ldr	r3, [pc, #536]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f90:	d108      	bne.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f92:	f107 0318 	add.w	r3, r7, #24
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fca6 	bl	80058e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fa0:	f000 bc7f 	b.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fa8:	f000 bc7b 	b.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004fac:	4b7c      	ldr	r3, [pc, #496]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb8:	d108      	bne.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fba:	f107 030c 	add.w	r3, r7, #12
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fde6 	bl	8005b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fc8:	f000 bc6b 	b.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fd0:	f000 bc67 	b.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004fd4:	4b72      	ldr	r3, [pc, #456]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004fdc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004fde:	4b70      	ldr	r3, [pc, #448]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d10c      	bne.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d109      	bne.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ff0:	4b6b      	ldr	r3, [pc, #428]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	08db      	lsrs	r3, r3, #3
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	4a6a      	ldr	r2, [pc, #424]	; (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8005000:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005002:	e01f      	b.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005004:	4b66      	ldr	r3, [pc, #408]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005010:	d106      	bne.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005014:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005018:	d102      	bne.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800501a:	4b63      	ldr	r3, [pc, #396]	; (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800501c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800501e:	e011      	b.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005020:	4b5f      	ldr	r3, [pc, #380]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800502c:	d106      	bne.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800502e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005034:	d102      	bne.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005036:	4b5d      	ldr	r3, [pc, #372]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800503a:	e003      	b.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800503c:	2300      	movs	r3, #0
 800503e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005040:	f000 bc2f 	b.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005044:	f000 bc2d 	b.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005048:	4b59      	ldr	r3, [pc, #356]	; (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800504a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800504c:	f000 bc29 	b.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005054:	f000 bc25 	b.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800505c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005060:	430b      	orrs	r3, r1
 8005062:	f040 80a7 	bne.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005066:	4b4e      	ldr	r3, [pc, #312]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800506e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005076:	d054      	beq.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800507e:	f200 808b 	bhi.w	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005088:	f000 8083 	beq.w	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005092:	f200 8081 	bhi.w	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800509c:	d02f      	beq.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050a4:	d878      	bhi.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d004      	beq.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050b2:	d012      	beq.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80050b4:	e070      	b.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050b6:	4b3a      	ldr	r3, [pc, #232]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050c2:	d107      	bne.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 feb5 	bl	8005e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050d2:	e3e6      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050d8:	e3e3      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050da:	4b31      	ldr	r3, [pc, #196]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050e6:	d107      	bne.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050e8:	f107 0318 	add.w	r3, r7, #24
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 fbfb 	bl	80058e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050f6:	e3d4      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050fc:	e3d1      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80050fe:	4b28      	ldr	r3, [pc, #160]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800510a:	d107      	bne.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800510c:	f107 030c 	add.w	r3, r7, #12
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fd3d 	bl	8005b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800511a:	e3c2      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005120:	e3bf      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005122:	4b1f      	ldr	r3, [pc, #124]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005126:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800512a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800512c:	4b1c      	ldr	r3, [pc, #112]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b04      	cmp	r3, #4
 8005136:	d10c      	bne.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8005138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800513e:	4b18      	ldr	r3, [pc, #96]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	08db      	lsrs	r3, r3, #3
 8005144:	f003 0303 	and.w	r3, r3, #3
 8005148:	4a16      	ldr	r2, [pc, #88]	; (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800514a:	fa22 f303 	lsr.w	r3, r2, r3
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005150:	e01e      	b.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005152:	4b13      	ldr	r3, [pc, #76]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800515e:	d106      	bne.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8005160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005166:	d102      	bne.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800516a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800516c:	e010      	b.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800516e:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005176:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800517a:	d106      	bne.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800517c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005182:	d102      	bne.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005184:	4b09      	ldr	r3, [pc, #36]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005188:	e002      	b.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800518e:	e388      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005190:	e387      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005192:	4b07      	ldr	r3, [pc, #28]	; (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005194:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005196:	e384      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005198:	2300      	movs	r3, #0
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800519c:	e381      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800519e:	bf00      	nop
 80051a0:	58024400 	.word	0x58024400
 80051a4:	03d09000 	.word	0x03d09000
 80051a8:	003d0900 	.word	0x003d0900
 80051ac:	017d7840 	.word	0x017d7840
 80051b0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80051b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051b8:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80051bc:	430b      	orrs	r3, r1
 80051be:	f040 809c 	bne.w	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80051c2:	4b9e      	ldr	r3, [pc, #632]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80051c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80051ca:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051d2:	d054      	beq.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80051d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051da:	f200 808b 	bhi.w	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051e4:	f000 8083 	beq.w	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051ee:	f200 8081 	bhi.w	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051f8:	d02f      	beq.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005200:	d878      	bhi.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	2b00      	cmp	r3, #0
 8005206:	d004      	beq.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800520e:	d012      	beq.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005210:	e070      	b.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005212:	4b8a      	ldr	r3, [pc, #552]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800521e:	d107      	bne.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005224:	4618      	mov	r0, r3
 8005226:	f000 fe07 	bl	8005e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800522e:	e338      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005234:	e335      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005236:	4b81      	ldr	r3, [pc, #516]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800523e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005242:	d107      	bne.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005244:	f107 0318 	add.w	r3, r7, #24
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fb4d 	bl	80058e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005252:	e326      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005258:	e323      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800525a:	4b78      	ldr	r3, [pc, #480]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005262:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005266:	d107      	bne.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005268:	f107 030c 	add.w	r3, r7, #12
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fc8f 	bl	8005b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005276:	e314      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005278:	2300      	movs	r3, #0
 800527a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800527c:	e311      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800527e:	4b6f      	ldr	r3, [pc, #444]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005282:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005286:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005288:	4b6c      	ldr	r3, [pc, #432]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b04      	cmp	r3, #4
 8005292:	d10c      	bne.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005296:	2b00      	cmp	r3, #0
 8005298:	d109      	bne.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800529a:	4b68      	ldr	r3, [pc, #416]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	08db      	lsrs	r3, r3, #3
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	4a66      	ldr	r2, [pc, #408]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80052a6:	fa22 f303 	lsr.w	r3, r2, r3
 80052aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ac:	e01e      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052ae:	4b63      	ldr	r3, [pc, #396]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ba:	d106      	bne.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80052bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052c2:	d102      	bne.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80052c4:	4b5f      	ldr	r3, [pc, #380]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80052c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c8:	e010      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052ca:	4b5c      	ldr	r3, [pc, #368]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052d6:	d106      	bne.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80052d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052de:	d102      	bne.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80052e0:	4b59      	ldr	r3, [pc, #356]	; (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e4:	e002      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80052ea:	e2da      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80052ec:	e2d9      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80052ee:	4b57      	ldr	r3, [pc, #348]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052f2:	e2d6      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052f8:	e2d3      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80052fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052fe:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005302:	430b      	orrs	r3, r1
 8005304:	f040 80a7 	bne.w	8005456 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005308:	4b4c      	ldr	r3, [pc, #304]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800530a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005310:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005318:	d055      	beq.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005320:	f200 8096 	bhi.w	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005326:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800532a:	f000 8084 	beq.w	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005334:	f200 808c 	bhi.w	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533e:	d030      	beq.n	80053a2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005346:	f200 8083 	bhi.w	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800534a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8005350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005356:	d012      	beq.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005358:	e07a      	b.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800535a:	4b38      	ldr	r3, [pc, #224]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005362:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005366:	d107      	bne.n	8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fd63 	bl	8005e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005376:	e294      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800537c:	e291      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800537e:	4b2f      	ldr	r3, [pc, #188]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800538a:	d107      	bne.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800538c:	f107 0318 	add.w	r3, r7, #24
 8005390:	4618      	mov	r0, r3
 8005392:	f000 faa9 	bl	80058e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800539a:	e282      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053a0:	e27f      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053a2:	4b26      	ldr	r3, [pc, #152]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ae:	d107      	bne.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053b0:	f107 030c 	add.w	r3, r7, #12
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 fbeb 	bl	8005b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053be:	e270      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053c4:	e26d      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80053c6:	4b1d      	ldr	r3, [pc, #116]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80053c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053d0:	4b1a      	ldr	r3, [pc, #104]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d10c      	bne.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80053dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d109      	bne.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053e2:	4b16      	ldr	r3, [pc, #88]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	08db      	lsrs	r3, r3, #3
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	4a14      	ldr	r2, [pc, #80]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80053ee:	fa22 f303 	lsr.w	r3, r2, r3
 80053f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053f4:	e01e      	b.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053f6:	4b11      	ldr	r3, [pc, #68]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005402:	d106      	bne.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800540a:	d102      	bne.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800540c:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800540e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005410:	e010      	b.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005412:	4b0a      	ldr	r3, [pc, #40]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800541e:	d106      	bne.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8005420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005426:	d102      	bne.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005428:	4b07      	ldr	r3, [pc, #28]	; (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800542a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800542c:	e002      	b.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005432:	e236      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005434:	e235      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005436:	4b05      	ldr	r3, [pc, #20]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005438:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800543a:	e232      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800543c:	58024400 	.word	0x58024400
 8005440:	03d09000 	.word	0x03d09000
 8005444:	003d0900 	.word	0x003d0900
 8005448:	017d7840 	.word	0x017d7840
 800544c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8005450:	2300      	movs	r3, #0
 8005452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005454:	e225      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800545a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800545e:	430b      	orrs	r3, r1
 8005460:	f040 8085 	bne.w	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005464:	4b9c      	ldr	r3, [pc, #624]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005468:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800546c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005474:	d06b      	beq.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800547c:	d874      	bhi.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005484:	d056      	beq.n	8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800548c:	d86c      	bhi.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005494:	d03b      	beq.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005498:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800549c:	d864      	bhi.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054a4:	d021      	beq.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054ac:	d85c      	bhi.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80054ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d004      	beq.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80054b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ba:	d004      	beq.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80054bc:	e054      	b.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80054be:	f7fe fb5f 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 80054c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80054c4:	e1ed      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054c6:	4b84      	ldr	r3, [pc, #528]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054d2:	d107      	bne.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054d4:	f107 0318 	add.w	r3, r7, #24
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fa05 	bl	80058e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054e2:	e1de      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054e8:	e1db      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054ea:	4b7b      	ldr	r3, [pc, #492]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054f6:	d107      	bne.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054f8:	f107 030c 	add.w	r3, r7, #12
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 fb47 	bl	8005b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005506:	e1cc      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005508:	2300      	movs	r3, #0
 800550a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800550c:	e1c9      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800550e:	4b72      	ldr	r3, [pc, #456]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b04      	cmp	r3, #4
 8005518:	d109      	bne.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800551a:	4b6f      	ldr	r3, [pc, #444]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	08db      	lsrs	r3, r3, #3
 8005520:	f003 0303 	and.w	r3, r3, #3
 8005524:	4a6d      	ldr	r2, [pc, #436]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8005526:	fa22 f303 	lsr.w	r3, r2, r3
 800552a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800552c:	e1b9      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800552e:	2300      	movs	r3, #0
 8005530:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005532:	e1b6      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005534:	4b68      	ldr	r3, [pc, #416]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005540:	d102      	bne.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8005542:	4b67      	ldr	r3, [pc, #412]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005546:	e1ac      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800554c:	e1a9      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800554e:	4b62      	ldr	r3, [pc, #392]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005556:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800555a:	d102      	bne.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800555c:	4b61      	ldr	r3, [pc, #388]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800555e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005560:	e19f      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005566:	e19c      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005568:	2300      	movs	r3, #0
 800556a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800556c:	e199      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800556e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005572:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005576:	430b      	orrs	r3, r1
 8005578:	d173      	bne.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800557a:	4b57      	ldr	r3, [pc, #348]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800557c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005582:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800558a:	d02f      	beq.n	80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005592:	d863      	bhi.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	2b00      	cmp	r3, #0
 8005598:	d004      	beq.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800559a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a0:	d012      	beq.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80055a2:	e05b      	b.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055a4:	4b4c      	ldr	r3, [pc, #304]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055b0:	d107      	bne.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055b2:	f107 0318 	add.w	r3, r7, #24
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f996 	bl	80058e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055c0:	e16f      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c6:	e16c      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055c8:	4b43      	ldr	r3, [pc, #268]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055d4:	d107      	bne.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055d6:	f107 030c 	add.w	r3, r7, #12
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fad8 	bl	8005b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055e4:	e15d      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055ea:	e15a      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80055ec:	4b3a      	ldr	r3, [pc, #232]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80055ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055f4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80055f6:	4b38      	ldr	r3, [pc, #224]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0304 	and.w	r3, r3, #4
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d10c      	bne.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005604:	2b00      	cmp	r3, #0
 8005606:	d109      	bne.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005608:	4b33      	ldr	r3, [pc, #204]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	08db      	lsrs	r3, r3, #3
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	4a32      	ldr	r2, [pc, #200]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8005614:	fa22 f303 	lsr.w	r3, r2, r3
 8005618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800561a:	e01e      	b.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800561c:	4b2e      	ldr	r3, [pc, #184]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005628:	d106      	bne.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800562a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005630:	d102      	bne.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005632:	4b2b      	ldr	r3, [pc, #172]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8005634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005636:	e010      	b.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005638:	4b27      	ldr	r3, [pc, #156]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005644:	d106      	bne.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8005646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800564c:	d102      	bne.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800564e:	4b25      	ldr	r3, [pc, #148]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005650:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005652:	e002      	b.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005654:	2300      	movs	r3, #0
 8005656:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005658:	e123      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800565a:	e122      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005660:	e11f      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005666:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800566a:	430b      	orrs	r3, r1
 800566c:	d13c      	bne.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800566e:	4b1a      	ldr	r3, [pc, #104]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005676:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567a:	2b00      	cmp	r3, #0
 800567c:	d004      	beq.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005684:	d012      	beq.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8005686:	e023      	b.n	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005688:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005690:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005694:	d107      	bne.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fbcc 	bl	8005e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056a4:	e0fd      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056aa:	e0fa      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056ac:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056b8:	d107      	bne.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056ba:	f107 0318 	add.w	r3, r7, #24
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f912 	bl	80058e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056c8:	e0eb      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ce:	e0e8      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056d4:	e0e5      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80056d6:	bf00      	nop
 80056d8:	58024400 	.word	0x58024400
 80056dc:	03d09000 	.word	0x03d09000
 80056e0:	003d0900 	.word	0x003d0900
 80056e4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80056e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ec:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80056f0:	430b      	orrs	r3, r1
 80056f2:	f040 8085 	bne.w	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80056f6:	4b6d      	ldr	r3, [pc, #436]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80056f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80056fe:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005706:	d06b      	beq.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8005708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800570e:	d874      	bhi.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005716:	d056      	beq.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8005718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571e:	d86c      	bhi.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005722:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005726:	d03b      	beq.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8005728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800572e:	d864      	bhi.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005736:	d021      	beq.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8005738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800573e:	d85c      	bhi.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005742:	2b00      	cmp	r3, #0
 8005744:	d004      	beq.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800574c:	d004      	beq.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800574e:	e054      	b.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005750:	f000 f8b4 	bl	80058bc <HAL_RCCEx_GetD3PCLK1Freq>
 8005754:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005756:	e0a4      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005758:	4b54      	ldr	r3, [pc, #336]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005764:	d107      	bne.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005766:	f107 0318 	add.w	r3, r7, #24
 800576a:	4618      	mov	r0, r3
 800576c:	f000 f8bc 	bl	80058e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005774:	e095      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005776:	2300      	movs	r3, #0
 8005778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800577a:	e092      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800577c:	4b4b      	ldr	r3, [pc, #300]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005788:	d107      	bne.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800578a:	f107 030c 	add.w	r3, r7, #12
 800578e:	4618      	mov	r0, r3
 8005790:	f000 f9fe 	bl	8005b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005798:	e083      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800579a:	2300      	movs	r3, #0
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800579e:	e080      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057a0:	4b42      	ldr	r3, [pc, #264]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d109      	bne.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057ac:	4b3f      	ldr	r3, [pc, #252]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	08db      	lsrs	r3, r3, #3
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	4a3e      	ldr	r2, [pc, #248]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80057b8:	fa22 f303 	lsr.w	r3, r2, r3
 80057bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057be:	e070      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80057c0:	2300      	movs	r3, #0
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057c4:	e06d      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80057c6:	4b39      	ldr	r3, [pc, #228]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057d2:	d102      	bne.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80057d4:	4b37      	ldr	r3, [pc, #220]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80057d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057d8:	e063      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057de:	e060      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80057e0:	4b32      	ldr	r3, [pc, #200]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057ec:	d102      	bne.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80057ee:	4b32      	ldr	r3, [pc, #200]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057f2:	e056      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057f8:	e053      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80057fa:	2300      	movs	r3, #0
 80057fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057fe:	e050      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005804:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005808:	430b      	orrs	r3, r1
 800580a:	d148      	bne.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800580c:	4b27      	ldr	r3, [pc, #156]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800580e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005810:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005814:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800581c:	d02a      	beq.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005824:	d838      	bhi.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	2b00      	cmp	r3, #0
 800582a:	d004      	beq.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005832:	d00d      	beq.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005834:	e030      	b.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005836:	4b1d      	ldr	r3, [pc, #116]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005842:	d102      	bne.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8005844:	4b1c      	ldr	r3, [pc, #112]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005848:	e02b      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800584e:	e028      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005850:	4b16      	ldr	r3, [pc, #88]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005858:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800585c:	d107      	bne.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800585e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fae8 	bl	8005e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800586c:	e019      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800586e:	2300      	movs	r3, #0
 8005870:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005872:	e016      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005874:	4b0d      	ldr	r3, [pc, #52]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800587c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005880:	d107      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005882:	f107 0318 	add.w	r3, r7, #24
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f82e 	bl	80058e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005890:	e007      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005896:	e004      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005898:	2300      	movs	r3, #0
 800589a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800589c:	e001      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800589e:	2300      	movs	r3, #0
 80058a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80058a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3740      	adds	r7, #64	; 0x40
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	58024400 	.word	0x58024400
 80058b0:	03d09000 	.word	0x03d09000
 80058b4:	003d0900 	.word	0x003d0900
 80058b8:	017d7840 	.word	0x017d7840

080058bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80058c0:	f7fe f92e 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 80058c4:	4602      	mov	r2, r0
 80058c6:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	091b      	lsrs	r3, r3, #4
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	4904      	ldr	r1, [pc, #16]	; (80058e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80058d2:	5ccb      	ldrb	r3, [r1, r3]
 80058d4:	f003 031f 	and.w	r3, r3, #31
 80058d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80058dc:	4618      	mov	r0, r3
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	58024400 	.word	0x58024400
 80058e4:	0800c698 	.word	0x0800c698

080058e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b089      	sub	sp, #36	; 0x24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058f0:	4ba1      	ldr	r3, [pc, #644]	; (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80058fa:	4b9f      	ldr	r3, [pc, #636]	; (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	0b1b      	lsrs	r3, r3, #12
 8005900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005904:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005906:	4b9c      	ldr	r3, [pc, #624]	; (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590a:	091b      	lsrs	r3, r3, #4
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005912:	4b99      	ldr	r3, [pc, #612]	; (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005916:	08db      	lsrs	r3, r3, #3
 8005918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	fb02 f303 	mul.w	r3, r2, r3
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 8111 	beq.w	8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	2b02      	cmp	r3, #2
 800593a:	f000 8083 	beq.w	8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	2b02      	cmp	r3, #2
 8005942:	f200 80a1 	bhi.w	8005a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d056      	beq.n	8005a00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005952:	e099      	b.n	8005a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005954:	4b88      	ldr	r3, [pc, #544]	; (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b00      	cmp	r3, #0
 800595e:	d02d      	beq.n	80059bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005960:	4b85      	ldr	r3, [pc, #532]	; (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	08db      	lsrs	r3, r3, #3
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	4a84      	ldr	r2, [pc, #528]	; (8005b7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800596c:	fa22 f303 	lsr.w	r3, r2, r3
 8005970:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	ee07 3a90 	vmov	s15, r3
 8005978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800598a:	4b7b      	ldr	r3, [pc, #492]	; (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800599a:	ed97 6a03 	vldr	s12, [r7, #12]
 800599e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80059ba:	e087      	b.n	8005acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	ee07 3a90 	vmov	s15, r3
 80059c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005b84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80059ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ce:	4b6a      	ldr	r3, [pc, #424]	; (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059de:	ed97 6a03 	vldr	s12, [r7, #12]
 80059e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059fe:	e065      	b.n	8005acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a12:	4b59      	ldr	r3, [pc, #356]	; (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a42:	e043      	b.n	8005acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	ee07 3a90 	vmov	s15, r3
 8005a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005b8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a56:	4b48      	ldr	r3, [pc, #288]	; (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a86:	e021      	b.n	8005acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	ee07 3a90 	vmov	s15, r3
 8005a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a9a:	4b37      	ldr	r3, [pc, #220]	; (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005acc:	4b2a      	ldr	r3, [pc, #168]	; (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	0a5b      	lsrs	r3, r3, #9
 8005ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ae6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005af2:	ee17 2a90 	vmov	r2, s15
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005afa:	4b1f      	ldr	r3, [pc, #124]	; (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	0c1b      	lsrs	r3, r3, #16
 8005b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b04:	ee07 3a90 	vmov	s15, r3
 8005b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b20:	ee17 2a90 	vmov	r2, s15
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005b28:	4b13      	ldr	r3, [pc, #76]	; (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	0e1b      	lsrs	r3, r3, #24
 8005b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b4e:	ee17 2a90 	vmov	r2, s15
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b56:	e008      	b.n	8005b6a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	609a      	str	r2, [r3, #8]
}
 8005b6a:	bf00      	nop
 8005b6c:	3724      	adds	r7, #36	; 0x24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	58024400 	.word	0x58024400
 8005b7c:	03d09000 	.word	0x03d09000
 8005b80:	46000000 	.word	0x46000000
 8005b84:	4c742400 	.word	0x4c742400
 8005b88:	4a742400 	.word	0x4a742400
 8005b8c:	4bbebc20 	.word	0x4bbebc20

08005b90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b089      	sub	sp, #36	; 0x24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b98:	4ba1      	ldr	r3, [pc, #644]	; (8005e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	f003 0303 	and.w	r3, r3, #3
 8005ba0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005ba2:	4b9f      	ldr	r3, [pc, #636]	; (8005e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba6:	0d1b      	lsrs	r3, r3, #20
 8005ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005bae:	4b9c      	ldr	r3, [pc, #624]	; (8005e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	0a1b      	lsrs	r3, r3, #8
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005bba:	4b99      	ldr	r3, [pc, #612]	; (8005e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbe:	08db      	lsrs	r3, r3, #3
 8005bc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	fb02 f303 	mul.w	r3, r2, r3
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 8111 	beq.w	8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	f000 8083 	beq.w	8005cec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	f200 80a1 	bhi.w	8005d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d056      	beq.n	8005ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005bfa:	e099      	b.n	8005d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bfc:	4b88      	ldr	r3, [pc, #544]	; (8005e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0320 	and.w	r3, r3, #32
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d02d      	beq.n	8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c08:	4b85      	ldr	r3, [pc, #532]	; (8005e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	08db      	lsrs	r3, r3, #3
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	4a84      	ldr	r2, [pc, #528]	; (8005e24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005c14:	fa22 f303 	lsr.w	r3, r2, r3
 8005c18:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	ee07 3a90 	vmov	s15, r3
 8005c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c32:	4b7b      	ldr	r3, [pc, #492]	; (8005e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c62:	e087      	b.n	8005d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c76:	4b6a      	ldr	r3, [pc, #424]	; (8005e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ca6:	e065      	b.n	8005d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cba:	4b59      	ldr	r3, [pc, #356]	; (8005e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cea:	e043      	b.n	8005d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cfe:	4b48      	ldr	r3, [pc, #288]	; (8005e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d2e:	e021      	b.n	8005d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d42:	4b37      	ldr	r3, [pc, #220]	; (8005e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005d74:	4b2a      	ldr	r3, [pc, #168]	; (8005e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d78:	0a5b      	lsrs	r3, r3, #9
 8005d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d9a:	ee17 2a90 	vmov	r2, s15
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005da2:	4b1f      	ldr	r3, [pc, #124]	; (8005e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	0c1b      	lsrs	r3, r3, #16
 8005da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dac:	ee07 3a90 	vmov	s15, r3
 8005db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005db8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dc8:	ee17 2a90 	vmov	r2, s15
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005dd0:	4b13      	ldr	r3, [pc, #76]	; (8005e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd4:	0e1b      	lsrs	r3, r3, #24
 8005dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df6:	ee17 2a90 	vmov	r2, s15
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005dfe:	e008      	b.n	8005e12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	609a      	str	r2, [r3, #8]
}
 8005e12:	bf00      	nop
 8005e14:	3724      	adds	r7, #36	; 0x24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	58024400 	.word	0x58024400
 8005e24:	03d09000 	.word	0x03d09000
 8005e28:	46000000 	.word	0x46000000
 8005e2c:	4c742400 	.word	0x4c742400
 8005e30:	4a742400 	.word	0x4a742400
 8005e34:	4bbebc20 	.word	0x4bbebc20

08005e38 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b089      	sub	sp, #36	; 0x24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e40:	4ba0      	ldr	r3, [pc, #640]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e44:	f003 0303 	and.w	r3, r3, #3
 8005e48:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005e4a:	4b9e      	ldr	r3, [pc, #632]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4e:	091b      	lsrs	r3, r3, #4
 8005e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e54:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005e56:	4b9b      	ldr	r3, [pc, #620]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e60:	4b98      	ldr	r3, [pc, #608]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e64:	08db      	lsrs	r3, r3, #3
 8005e66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	fb02 f303 	mul.w	r3, r2, r3
 8005e70:	ee07 3a90 	vmov	s15, r3
 8005e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e78:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 8111 	beq.w	80060a6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	f000 8083 	beq.w	8005f92 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	f200 80a1 	bhi.w	8005fd6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d056      	beq.n	8005f4e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005ea0:	e099      	b.n	8005fd6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ea2:	4b88      	ldr	r3, [pc, #544]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0320 	and.w	r3, r3, #32
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d02d      	beq.n	8005f0a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005eae:	4b85      	ldr	r3, [pc, #532]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	08db      	lsrs	r3, r3, #3
 8005eb4:	f003 0303 	and.w	r3, r3, #3
 8005eb8:	4a83      	ldr	r2, [pc, #524]	; (80060c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005eba:	fa22 f303 	lsr.w	r3, r2, r3
 8005ebe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	ee07 3a90 	vmov	s15, r3
 8005ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed8:	4b7a      	ldr	r3, [pc, #488]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee0:	ee07 3a90 	vmov	s15, r3
 8005ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eec:	eddf 5a77 	vldr	s11, [pc, #476]	; 80060cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ef0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ef8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005efc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f04:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f08:	e087      	b.n	800601a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	ee07 3a90 	vmov	s15, r3
 8005f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f14:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80060d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005f18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1c:	4b69      	ldr	r3, [pc, #420]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f24:	ee07 3a90 	vmov	s15, r3
 8005f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f30:	eddf 5a66 	vldr	s11, [pc, #408]	; 80060cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f4c:	e065      	b.n	800601a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	ee07 3a90 	vmov	s15, r3
 8005f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f58:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80060d4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f60:	4b58      	ldr	r3, [pc, #352]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f68:	ee07 3a90 	vmov	s15, r3
 8005f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f70:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f74:	eddf 5a55 	vldr	s11, [pc, #340]	; 80060cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f90:	e043      	b.n	800601a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	ee07 3a90 	vmov	s15, r3
 8005f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80060d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa4:	4b47      	ldr	r3, [pc, #284]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fac:	ee07 3a90 	vmov	s15, r3
 8005fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fb8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80060cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005fbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fd4:	e021      	b.n	800601a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	ee07 3a90 	vmov	s15, r3
 8005fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80060d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe8:	4b36      	ldr	r3, [pc, #216]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff0:	ee07 3a90 	vmov	s15, r3
 8005ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ffc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80060cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006008:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800600c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006014:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006018:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800601a:	4b2a      	ldr	r3, [pc, #168]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800601c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601e:	0a5b      	lsrs	r3, r3, #9
 8006020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006024:	ee07 3a90 	vmov	s15, r3
 8006028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006030:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006034:	edd7 6a07 	vldr	s13, [r7, #28]
 8006038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800603c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006040:	ee17 2a90 	vmov	r2, s15
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006048:	4b1e      	ldr	r3, [pc, #120]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604c:	0c1b      	lsrs	r3, r3, #16
 800604e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006052:	ee07 3a90 	vmov	s15, r3
 8006056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800605e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006062:	edd7 6a07 	vldr	s13, [r7, #28]
 8006066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800606a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800606e:	ee17 2a90 	vmov	r2, s15
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006076:	4b13      	ldr	r3, [pc, #76]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607a:	0e1b      	lsrs	r3, r3, #24
 800607c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006080:	ee07 3a90 	vmov	s15, r3
 8006084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006088:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800608c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006090:	edd7 6a07 	vldr	s13, [r7, #28]
 8006094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800609c:	ee17 2a90 	vmov	r2, s15
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80060a4:	e008      	b.n	80060b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	609a      	str	r2, [r3, #8]
}
 80060b8:	bf00      	nop
 80060ba:	3724      	adds	r7, #36	; 0x24
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	58024400 	.word	0x58024400
 80060c8:	03d09000 	.word	0x03d09000
 80060cc:	46000000 	.word	0x46000000
 80060d0:	4c742400 	.word	0x4c742400
 80060d4:	4a742400 	.word	0x4a742400
 80060d8:	4bbebc20 	.word	0x4bbebc20

080060dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060ea:	4b53      	ldr	r3, [pc, #332]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d101      	bne.n	80060fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e099      	b.n	800622e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80060fa:	4b4f      	ldr	r3, [pc, #316]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a4e      	ldr	r2, [pc, #312]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006100:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006106:	f7fb f815 	bl	8001134 <HAL_GetTick>
 800610a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800610c:	e008      	b.n	8006120 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800610e:	f7fb f811 	bl	8001134 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e086      	b.n	800622e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006120:	4b45      	ldr	r3, [pc, #276]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1f0      	bne.n	800610e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800612c:	4b42      	ldr	r3, [pc, #264]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	031b      	lsls	r3, r3, #12
 800613a:	493f      	ldr	r1, [pc, #252]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 800613c:	4313      	orrs	r3, r2
 800613e:	628b      	str	r3, [r1, #40]	; 0x28
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	3b01      	subs	r3, #1
 8006146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	3b01      	subs	r3, #1
 8006150:	025b      	lsls	r3, r3, #9
 8006152:	b29b      	uxth	r3, r3
 8006154:	431a      	orrs	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	3b01      	subs	r3, #1
 800615c:	041b      	lsls	r3, r3, #16
 800615e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	3b01      	subs	r3, #1
 800616a:	061b      	lsls	r3, r3, #24
 800616c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006170:	4931      	ldr	r1, [pc, #196]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006172:	4313      	orrs	r3, r2
 8006174:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006176:	4b30      	ldr	r3, [pc, #192]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	492d      	ldr	r1, [pc, #180]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006184:	4313      	orrs	r3, r2
 8006186:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006188:	4b2b      	ldr	r3, [pc, #172]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 800618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618c:	f023 0220 	bic.w	r2, r3, #32
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	4928      	ldr	r1, [pc, #160]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006196:	4313      	orrs	r3, r2
 8006198:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800619a:	4b27      	ldr	r3, [pc, #156]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619e:	4a26      	ldr	r2, [pc, #152]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061a0:	f023 0310 	bic.w	r3, r3, #16
 80061a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061a6:	4b24      	ldr	r3, [pc, #144]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061aa:	4b24      	ldr	r3, [pc, #144]	; (800623c <RCCEx_PLL2_Config+0x160>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	69d2      	ldr	r2, [r2, #28]
 80061b2:	00d2      	lsls	r2, r2, #3
 80061b4:	4920      	ldr	r1, [pc, #128]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80061ba:	4b1f      	ldr	r3, [pc, #124]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061be:	4a1e      	ldr	r2, [pc, #120]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061c0:	f043 0310 	orr.w	r3, r3, #16
 80061c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d106      	bne.n	80061da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80061cc:	4b1a      	ldr	r3, [pc, #104]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	4a19      	ldr	r2, [pc, #100]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80061d8:	e00f      	b.n	80061fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d106      	bne.n	80061ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80061e0:	4b15      	ldr	r3, [pc, #84]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	4a14      	ldr	r2, [pc, #80]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80061ec:	e005      	b.n	80061fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80061ee:	4b12      	ldr	r3, [pc, #72]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	4a11      	ldr	r2, [pc, #68]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80061fa:	4b0f      	ldr	r3, [pc, #60]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a0e      	ldr	r2, [pc, #56]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006200:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006206:	f7fa ff95 	bl	8001134 <HAL_GetTick>
 800620a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800620c:	e008      	b.n	8006220 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800620e:	f7fa ff91 	bl	8001134 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e006      	b.n	800622e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006220:	4b05      	ldr	r3, [pc, #20]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0f0      	beq.n	800620e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800622c:	7bfb      	ldrb	r3, [r7, #15]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	58024400 	.word	0x58024400
 800623c:	ffff0007 	.word	0xffff0007

08006240 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800624e:	4b53      	ldr	r3, [pc, #332]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	2b03      	cmp	r3, #3
 8006258:	d101      	bne.n	800625e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e099      	b.n	8006392 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800625e:	4b4f      	ldr	r3, [pc, #316]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a4e      	ldr	r2, [pc, #312]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800626a:	f7fa ff63 	bl	8001134 <HAL_GetTick>
 800626e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006270:	e008      	b.n	8006284 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006272:	f7fa ff5f 	bl	8001134 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d901      	bls.n	8006284 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e086      	b.n	8006392 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006284:	4b45      	ldr	r3, [pc, #276]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1f0      	bne.n	8006272 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006290:	4b42      	ldr	r3, [pc, #264]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	051b      	lsls	r3, r3, #20
 800629e:	493f      	ldr	r1, [pc, #252]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	628b      	str	r3, [r1, #40]	; 0x28
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	025b      	lsls	r3, r3, #9
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	3b01      	subs	r3, #1
 80062c0:	041b      	lsls	r3, r3, #16
 80062c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	061b      	lsls	r3, r3, #24
 80062d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80062d4:	4931      	ldr	r1, [pc, #196]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80062da:	4b30      	ldr	r3, [pc, #192]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	492d      	ldr	r1, [pc, #180]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80062ec:	4b2b      	ldr	r3, [pc, #172]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 80062ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	4928      	ldr	r1, [pc, #160]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80062fe:	4b27      	ldr	r3, [pc, #156]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	4a26      	ldr	r2, [pc, #152]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006308:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800630a:	4b24      	ldr	r3, [pc, #144]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 800630c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800630e:	4b24      	ldr	r3, [pc, #144]	; (80063a0 <RCCEx_PLL3_Config+0x160>)
 8006310:	4013      	ands	r3, r2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	69d2      	ldr	r2, [r2, #28]
 8006316:	00d2      	lsls	r2, r2, #3
 8006318:	4920      	ldr	r1, [pc, #128]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 800631a:	4313      	orrs	r3, r2
 800631c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800631e:	4b1f      	ldr	r3, [pc, #124]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006322:	4a1e      	ldr	r2, [pc, #120]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006328:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d106      	bne.n	800633e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006330:	4b1a      	ldr	r3, [pc, #104]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	4a19      	ldr	r2, [pc, #100]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006336:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800633a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800633c:	e00f      	b.n	800635e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d106      	bne.n	8006352 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006344:	4b15      	ldr	r3, [pc, #84]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	4a14      	ldr	r2, [pc, #80]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 800634a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800634e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006350:	e005      	b.n	800635e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006352:	4b12      	ldr	r3, [pc, #72]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006356:	4a11      	ldr	r2, [pc, #68]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006358:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800635c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800635e:	4b0f      	ldr	r3, [pc, #60]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a0e      	ldr	r2, [pc, #56]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800636a:	f7fa fee3 	bl	8001134 <HAL_GetTick>
 800636e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006370:	e008      	b.n	8006384 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006372:	f7fa fedf 	bl	8001134 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e006      	b.n	8006392 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006384:	4b05      	ldr	r3, [pc, #20]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0f0      	beq.n	8006372 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	58024400 	.word	0x58024400
 80063a0:	ffff0007 	.word	0xffff0007

080063a4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b08a      	sub	sp, #40	; 0x28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e201      	b.n	80067ba <HAL_SAI_Init+0x416>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d113      	bne.n	80063e8 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a99      	ldr	r2, [pc, #612]	; (800662c <HAL_SAI_Init+0x288>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d004      	beq.n	80063d4 <HAL_SAI_Init+0x30>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a98      	ldr	r2, [pc, #608]	; (8006630 <HAL_SAI_Init+0x28c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d107      	bne.n	80063e4 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d103      	bne.n	80063e4 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e1e8      	b.n	80067ba <HAL_SAI_Init+0x416>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a8f      	ldr	r2, [pc, #572]	; (800662c <HAL_SAI_Init+0x288>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d004      	beq.n	80063fc <HAL_SAI_Init+0x58>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a8f      	ldr	r2, [pc, #572]	; (8006634 <HAL_SAI_Init+0x290>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d102      	bne.n	8006402 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 80063fc:	4b8e      	ldr	r3, [pc, #568]	; (8006638 <HAL_SAI_Init+0x294>)
 80063fe:	61bb      	str	r3, [r7, #24]
 8006400:	e00e      	b.n	8006420 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a8a      	ldr	r2, [pc, #552]	; (8006630 <HAL_SAI_Init+0x28c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d004      	beq.n	8006416 <HAL_SAI_Init+0x72>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a8a      	ldr	r2, [pc, #552]	; (800663c <HAL_SAI_Init+0x298>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d102      	bne.n	800641c <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8006416:	4b8a      	ldr	r3, [pc, #552]	; (8006640 <HAL_SAI_Init+0x29c>)
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	e001      	b.n	8006420 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e1cc      	b.n	80067ba <HAL_SAI_Init+0x416>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d106      	bne.n	800643a <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7fa f93f 	bl	80006b8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f9cc 	bl	80067d8 <SAI_Disable>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e1b7      	b.n	80067ba <HAL_SAI_Init+0x416>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	2b02      	cmp	r3, #2
 8006458:	d00c      	beq.n	8006474 <HAL_SAI_Init+0xd0>
 800645a:	2b02      	cmp	r3, #2
 800645c:	d80d      	bhi.n	800647a <HAL_SAI_Init+0xd6>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <HAL_SAI_Init+0xc4>
 8006462:	2b01      	cmp	r3, #1
 8006464:	d003      	beq.n	800646e <HAL_SAI_Init+0xca>
 8006466:	e008      	b.n	800647a <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006468:	2300      	movs	r3, #0
 800646a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800646c:	e008      	b.n	8006480 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800646e:	2310      	movs	r3, #16
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006472:	e005      	b.n	8006480 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006474:	2320      	movs	r3, #32
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006478:	e002      	b.n	8006480 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 800647a:	2300      	movs	r3, #0
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800647e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	2b05      	cmp	r3, #5
 8006486:	d822      	bhi.n	80064ce <HAL_SAI_Init+0x12a>
 8006488:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <HAL_SAI_Init+0xec>)
 800648a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648e:	bf00      	nop
 8006490:	080064a9 	.word	0x080064a9
 8006494:	080064af 	.word	0x080064af
 8006498:	080064b7 	.word	0x080064b7
 800649c:	080064cf 	.word	0x080064cf
 80064a0:	080064cf 	.word	0x080064cf
 80064a4:	080064bf 	.word	0x080064bf
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	61fb      	str	r3, [r7, #28]
      break;
 80064ac:	e012      	b.n	80064d4 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80064ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064b2:	61fb      	str	r3, [r7, #28]
      break;
 80064b4:	e00e      	b.n	80064d4 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80064b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064ba:	61fb      	str	r3, [r7, #28]
      break;
 80064bc:	e00a      	b.n	80064d4 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80064be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064c2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	f043 0303 	orr.w	r3, r3, #3
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80064cc:	e002      	b.n	80064d4 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	61fb      	str	r3, [r7, #28]
      break;
 80064d2:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d8:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 808a 	beq.w	80065f8 <HAL_SAI_Init+0x254>
  {
    uint32_t freq = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a4f      	ldr	r2, [pc, #316]	; (800662c <HAL_SAI_Init+0x288>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d004      	beq.n	80064fc <HAL_SAI_Init+0x158>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a4f      	ldr	r2, [pc, #316]	; (8006634 <HAL_SAI_Init+0x290>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d106      	bne.n	800650a <HAL_SAI_Init+0x166>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80064fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006500:	f04f 0100 	mov.w	r1, #0
 8006504:	f7fe fd08 	bl	8004f18 <HAL_RCCEx_GetPeriphCLKFreq>
 8006508:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a48      	ldr	r2, [pc, #288]	; (8006630 <HAL_SAI_Init+0x28c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d106      	bne.n	8006522 <HAL_SAI_Init+0x17e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006514:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006518:	f04f 0100 	mov.w	r1, #0
 800651c:	f7fe fcfc 	bl	8004f18 <HAL_RCCEx_GetPeriphCLKFreq>
 8006520:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a45      	ldr	r2, [pc, #276]	; (800663c <HAL_SAI_Init+0x298>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d106      	bne.n	800653a <HAL_SAI_Init+0x196>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800652c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006530:	f04f 0100 	mov.w	r1, #0
 8006534:	f7fe fcf0 	bl	8004f18 <HAL_RCCEx_GetPeriphCLKFreq>
 8006538:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006542:	d120      	bne.n	8006586 <HAL_SAI_Init+0x1e2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006548:	2b04      	cmp	r3, #4
 800654a:	d102      	bne.n	8006552 <HAL_SAI_Init+0x1ae>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800654c:	2340      	movs	r3, #64	; 0x40
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	e00a      	b.n	8006568 <HAL_SAI_Init+0x1c4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006556:	2b08      	cmp	r3, #8
 8006558:	d103      	bne.n	8006562 <HAL_SAI_Init+0x1be>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800655a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	e002      	b.n	8006568 <HAL_SAI_Init+0x1c4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006566:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	4619      	mov	r1, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	fb02 f303 	mul.w	r3, r2, r3
 800657e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	e017      	b.n	80065b6 <HAL_SAI_Init+0x212>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800658e:	d101      	bne.n	8006594 <HAL_SAI_Init+0x1f0>
 8006590:	2302      	movs	r3, #2
 8006592:	e000      	b.n	8006596 <HAL_SAI_Init+0x1f2>
 8006594:	2301      	movs	r3, #1
 8006596:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	4613      	mov	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	4619      	mov	r1, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	fb02 f303 	mul.w	r3, r2, r3
 80065ae:	021b      	lsls	r3, r3, #8
 80065b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80065b4:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	4a22      	ldr	r2, [pc, #136]	; (8006644 <HAL_SAI_Init+0x2a0>)
 80065ba:	fba2 2303 	umull	r2, r3, r2, r3
 80065be:	08da      	lsrs	r2, r3, #3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80065c4:	6939      	ldr	r1, [r7, #16]
 80065c6:	4b1f      	ldr	r3, [pc, #124]	; (8006644 <HAL_SAI_Init+0x2a0>)
 80065c8:	fba3 2301 	umull	r2, r3, r3, r1
 80065cc:	08da      	lsrs	r2, r3, #3
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	1aca      	subs	r2, r1, r3
 80065d8:	2a08      	cmp	r2, #8
 80065da:	d904      	bls.n	80065e6 <HAL_SAI_Init+0x242>
    {
      hsai->Init.Mckdiv += 1U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d104      	bne.n	80065f8 <HAL_SAI_Init+0x254>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	085a      	lsrs	r2, r3, #1
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <HAL_SAI_Init+0x264>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2b02      	cmp	r3, #2
 8006606:	d109      	bne.n	800661c <HAL_SAI_Init+0x278>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_SAI_Init+0x270>
 8006610:	2300      	movs	r3, #0
 8006612:	e001      	b.n	8006618 <HAL_SAI_Init+0x274>
 8006614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006618:	623b      	str	r3, [r7, #32]
 800661a:	e017      	b.n	800664c <HAL_SAI_Init+0x2a8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006620:	2b01      	cmp	r3, #1
 8006622:	d111      	bne.n	8006648 <HAL_SAI_Init+0x2a4>
 8006624:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006628:	e00f      	b.n	800664a <HAL_SAI_Init+0x2a6>
 800662a:	bf00      	nop
 800662c:	40015804 	.word	0x40015804
 8006630:	58005404 	.word	0x58005404
 8006634:	40015824 	.word	0x40015824
 8006638:	40015800 	.word	0x40015800
 800663c:	58005424 	.word	0x58005424
 8006640:	58005400 	.word	0x58005400
 8006644:	cccccccd 	.word	0xcccccccd
 8006648:	2300      	movs	r3, #0
 800664a:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6819      	ldr	r1, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	4b5b      	ldr	r3, [pc, #364]	; (80067c4 <HAL_SAI_Init+0x420>)
 8006658:	400b      	ands	r3, r1
 800665a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6819      	ldr	r1, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006670:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006676:	431a      	orrs	r2, r3
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8006684:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006690:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	051b      	lsls	r3, r3, #20
 8006698:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800669e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6859      	ldr	r1, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	4b43      	ldr	r3, [pc, #268]	; (80067c8 <HAL_SAI_Init+0x424>)
 80066ba:	400b      	ands	r3, r1
 80066bc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6859      	ldr	r1, [r3, #4]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	69da      	ldr	r2, [r3, #28]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	430a      	orrs	r2, r1
 80066da:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6899      	ldr	r1, [r3, #8]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	4b39      	ldr	r3, [pc, #228]	; (80067cc <HAL_SAI_Init+0x428>)
 80066e8:	400b      	ands	r3, r1
 80066ea:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6899      	ldr	r1, [r3, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80066fc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8006702:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006708:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670e:	3b01      	subs	r3, #1
 8006710:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006712:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68d9      	ldr	r1, [r3, #12]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	f24f 0320 	movw	r3, #61472	; 0xf020
 800672a:	400b      	ands	r3, r1
 800672c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68d9      	ldr	r1, [r3, #12]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800673c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006742:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006744:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674a:	3b01      	subs	r3, #1
 800674c:	021b      	lsls	r3, r3, #8
 800674e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a1c      	ldr	r2, [pc, #112]	; (80067d0 <HAL_SAI_Init+0x42c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d004      	beq.n	800676c <HAL_SAI_Init+0x3c8>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a1b      	ldr	r2, [pc, #108]	; (80067d4 <HAL_SAI_Init+0x430>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d119      	bne.n	80067a0 <HAL_SAI_Init+0x3fc>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006770:	f023 0201 	bic.w	r2, r3, #1
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800677e:	2b01      	cmp	r3, #1
 8006780:	d10e      	bne.n	80067a0 <HAL_SAI_Init+0x3fc>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678a:	3b01      	subs	r3, #1
 800678c:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800678e:	431a      	orrs	r2, r3
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006798:	f043 0201 	orr.w	r2, r3, #1
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3728      	adds	r7, #40	; 0x28
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	f005c010 	.word	0xf005c010
 80067c8:	ffff1ff0 	.word	0xffff1ff0
 80067cc:	fff88000 	.word	0xfff88000
 80067d0:	40015804 	.word	0x40015804
 80067d4:	58005404 	.word	0x58005404

080067d8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80067e0:	4b18      	ldr	r3, [pc, #96]	; (8006844 <SAI_Disable+0x6c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a18      	ldr	r2, [pc, #96]	; (8006848 <SAI_Disable+0x70>)
 80067e6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ea:	0b1b      	lsrs	r3, r3, #12
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006802:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10a      	bne.n	8006820 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006810:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	72fb      	strb	r3, [r7, #11]
      break;
 800681e:	e009      	b.n	8006834 <SAI_Disable+0x5c>
    }
    count--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3b01      	subs	r3, #1
 8006824:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1e7      	bne.n	8006804 <SAI_Disable+0x2c>

  return status;
 8006834:	7afb      	ldrb	r3, [r7, #11]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	24000000 	.word	0x24000000
 8006848:	95cbec1b 	.word	0x95cbec1b

0800684c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e10f      	b.n	8006a7e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a87      	ldr	r2, [pc, #540]	; (8006a88 <HAL_SPI_Init+0x23c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d00f      	beq.n	800688e <HAL_SPI_Init+0x42>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a86      	ldr	r2, [pc, #536]	; (8006a8c <HAL_SPI_Init+0x240>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00a      	beq.n	800688e <HAL_SPI_Init+0x42>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a84      	ldr	r2, [pc, #528]	; (8006a90 <HAL_SPI_Init+0x244>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d005      	beq.n	800688e <HAL_SPI_Init+0x42>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	2b0f      	cmp	r3, #15
 8006888:	d901      	bls.n	800688e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e0f7      	b.n	8006a7e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f900 	bl	8006a94 <SPI_GetPacketSize>
 8006894:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a7b      	ldr	r2, [pc, #492]	; (8006a88 <HAL_SPI_Init+0x23c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00c      	beq.n	80068ba <HAL_SPI_Init+0x6e>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a79      	ldr	r2, [pc, #484]	; (8006a8c <HAL_SPI_Init+0x240>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d007      	beq.n	80068ba <HAL_SPI_Init+0x6e>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a78      	ldr	r2, [pc, #480]	; (8006a90 <HAL_SPI_Init+0x244>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d002      	beq.n	80068ba <HAL_SPI_Init+0x6e>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b08      	cmp	r3, #8
 80068b8:	d811      	bhi.n	80068de <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80068be:	4a72      	ldr	r2, [pc, #456]	; (8006a88 <HAL_SPI_Init+0x23c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d009      	beq.n	80068d8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a70      	ldr	r2, [pc, #448]	; (8006a8c <HAL_SPI_Init+0x240>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d004      	beq.n	80068d8 <HAL_SPI_Init+0x8c>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a6f      	ldr	r2, [pc, #444]	; (8006a90 <HAL_SPI_Init+0x244>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d104      	bne.n	80068e2 <HAL_SPI_Init+0x96>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b10      	cmp	r3, #16
 80068dc:	d901      	bls.n	80068e2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e0cd      	b.n	8006a7e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d106      	bne.n	80068fc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7fa f844 	bl	8000984 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 0201 	bic.w	r2, r2, #1
 8006912:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800691e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006928:	d119      	bne.n	800695e <HAL_SPI_Init+0x112>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006932:	d103      	bne.n	800693c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006938:	2b00      	cmp	r3, #0
 800693a:	d008      	beq.n	800694e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10c      	bne.n	800695e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800694c:	d107      	bne.n	800695e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800695c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00f      	beq.n	800698a <HAL_SPI_Init+0x13e>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	2b06      	cmp	r3, #6
 8006970:	d90b      	bls.n	800698a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	601a      	str	r2, [r3, #0]
 8006988:	e007      	b.n	800699a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006998:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69da      	ldr	r2, [r3, #28]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a2:	431a      	orrs	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	431a      	orrs	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ac:	ea42 0103 	orr.w	r1, r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	431a      	orrs	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	431a      	orrs	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	431a      	orrs	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ee:	431a      	orrs	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	431a      	orrs	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069fa:	ea42 0103 	orr.w	r1, r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d113      	bne.n	8006a3a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a24:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a38:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0201 	bic.w	r2, r2, #1
 8006a48:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	40013000 	.word	0x40013000
 8006a8c:	40003800 	.word	0x40003800
 8006a90:	40003c00 	.word	0x40003c00

08006a94 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa0:	095b      	lsrs	r3, r3, #5
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	3307      	adds	r3, #7
 8006ab2:	08db      	lsrs	r3, r3, #3
 8006ab4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	fb02 f303 	mul.w	r3, r2, r3
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b082      	sub	sp, #8
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e049      	b.n	8006b70 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d106      	bne.n	8006af6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7fa f95f 	bl	8000db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2202      	movs	r2, #2
 8006afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	3304      	adds	r3, #4
 8006b06:	4619      	mov	r1, r3
 8006b08:	4610      	mov	r0, r2
 8006b0a:	f000 faa3 	bl	8007054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e049      	b.n	8006c1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d106      	bne.n	8006ba4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f841 	bl	8006c26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	f000 fa4c 	bl	8007054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
	...

08006c3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e0ff      	b.n	8006e5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b14      	cmp	r3, #20
 8006c66:	f200 80f0 	bhi.w	8006e4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c6a:	a201      	add	r2, pc, #4	; (adr r2, 8006c70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c70:	08006cc5 	.word	0x08006cc5
 8006c74:	08006e4b 	.word	0x08006e4b
 8006c78:	08006e4b 	.word	0x08006e4b
 8006c7c:	08006e4b 	.word	0x08006e4b
 8006c80:	08006d05 	.word	0x08006d05
 8006c84:	08006e4b 	.word	0x08006e4b
 8006c88:	08006e4b 	.word	0x08006e4b
 8006c8c:	08006e4b 	.word	0x08006e4b
 8006c90:	08006d47 	.word	0x08006d47
 8006c94:	08006e4b 	.word	0x08006e4b
 8006c98:	08006e4b 	.word	0x08006e4b
 8006c9c:	08006e4b 	.word	0x08006e4b
 8006ca0:	08006d87 	.word	0x08006d87
 8006ca4:	08006e4b 	.word	0x08006e4b
 8006ca8:	08006e4b 	.word	0x08006e4b
 8006cac:	08006e4b 	.word	0x08006e4b
 8006cb0:	08006dc9 	.word	0x08006dc9
 8006cb4:	08006e4b 	.word	0x08006e4b
 8006cb8:	08006e4b 	.word	0x08006e4b
 8006cbc:	08006e4b 	.word	0x08006e4b
 8006cc0:	08006e09 	.word	0x08006e09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68b9      	ldr	r1, [r7, #8]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 fa68 	bl	80071a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0208 	orr.w	r2, r2, #8
 8006cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	699a      	ldr	r2, [r3, #24]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0204 	bic.w	r2, r2, #4
 8006cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6999      	ldr	r1, [r3, #24]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	691a      	ldr	r2, [r3, #16]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	619a      	str	r2, [r3, #24]
      break;
 8006d02:	e0a5      	b.n	8006e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68b9      	ldr	r1, [r7, #8]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 fad8 	bl	80072c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	699a      	ldr	r2, [r3, #24]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6999      	ldr	r1, [r3, #24]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	021a      	lsls	r2, r3, #8
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	619a      	str	r2, [r3, #24]
      break;
 8006d44:	e084      	b.n	8006e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68b9      	ldr	r1, [r7, #8]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fb41 	bl	80073d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69da      	ldr	r2, [r3, #28]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0208 	orr.w	r2, r2, #8
 8006d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	69da      	ldr	r2, [r3, #28]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0204 	bic.w	r2, r2, #4
 8006d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69d9      	ldr	r1, [r3, #28]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	691a      	ldr	r2, [r3, #16]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	61da      	str	r2, [r3, #28]
      break;
 8006d84:	e064      	b.n	8006e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68b9      	ldr	r1, [r7, #8]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 fba9 	bl	80074e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69da      	ldr	r2, [r3, #28]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69da      	ldr	r2, [r3, #28]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	69d9      	ldr	r1, [r3, #28]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	021a      	lsls	r2, r3, #8
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	61da      	str	r2, [r3, #28]
      break;
 8006dc6:	e043      	b.n	8006e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 fbf2 	bl	80075b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0208 	orr.w	r2, r2, #8
 8006de2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0204 	bic.w	r2, r2, #4
 8006df2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	691a      	ldr	r2, [r3, #16]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e06:	e023      	b.n	8006e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68b9      	ldr	r1, [r7, #8]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fc36 	bl	8007680 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	021a      	lsls	r2, r3, #8
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e48:	e002      	b.n	8006e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop

08006e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d101      	bne.n	8006e80 <HAL_TIM_ConfigClockSource+0x1c>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	e0dc      	b.n	800703a <HAL_TIM_ConfigClockSource+0x1d6>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	4b6a      	ldr	r3, [pc, #424]	; (8007044 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ea6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a64      	ldr	r2, [pc, #400]	; (8007048 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	f000 80a9 	beq.w	800700e <HAL_TIM_ConfigClockSource+0x1aa>
 8006ebc:	4a62      	ldr	r2, [pc, #392]	; (8007048 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	f200 80ae 	bhi.w	8007020 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ec4:	4a61      	ldr	r2, [pc, #388]	; (800704c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	f000 80a1 	beq.w	800700e <HAL_TIM_ConfigClockSource+0x1aa>
 8006ecc:	4a5f      	ldr	r2, [pc, #380]	; (800704c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	f200 80a6 	bhi.w	8007020 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ed4:	4a5e      	ldr	r2, [pc, #376]	; (8007050 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	f000 8099 	beq.w	800700e <HAL_TIM_ConfigClockSource+0x1aa>
 8006edc:	4a5c      	ldr	r2, [pc, #368]	; (8007050 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	f200 809e 	bhi.w	8007020 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ee4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ee8:	f000 8091 	beq.w	800700e <HAL_TIM_ConfigClockSource+0x1aa>
 8006eec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ef0:	f200 8096 	bhi.w	8007020 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ef8:	f000 8089 	beq.w	800700e <HAL_TIM_ConfigClockSource+0x1aa>
 8006efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f00:	f200 808e 	bhi.w	8007020 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f08:	d03e      	beq.n	8006f88 <HAL_TIM_ConfigClockSource+0x124>
 8006f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f0e:	f200 8087 	bhi.w	8007020 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f16:	f000 8086 	beq.w	8007026 <HAL_TIM_ConfigClockSource+0x1c2>
 8006f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1e:	d87f      	bhi.n	8007020 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f20:	2b70      	cmp	r3, #112	; 0x70
 8006f22:	d01a      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0xf6>
 8006f24:	2b70      	cmp	r3, #112	; 0x70
 8006f26:	d87b      	bhi.n	8007020 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f28:	2b60      	cmp	r3, #96	; 0x60
 8006f2a:	d050      	beq.n	8006fce <HAL_TIM_ConfigClockSource+0x16a>
 8006f2c:	2b60      	cmp	r3, #96	; 0x60
 8006f2e:	d877      	bhi.n	8007020 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f30:	2b50      	cmp	r3, #80	; 0x50
 8006f32:	d03c      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x14a>
 8006f34:	2b50      	cmp	r3, #80	; 0x50
 8006f36:	d873      	bhi.n	8007020 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f38:	2b40      	cmp	r3, #64	; 0x40
 8006f3a:	d058      	beq.n	8006fee <HAL_TIM_ConfigClockSource+0x18a>
 8006f3c:	2b40      	cmp	r3, #64	; 0x40
 8006f3e:	d86f      	bhi.n	8007020 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f40:	2b30      	cmp	r3, #48	; 0x30
 8006f42:	d064      	beq.n	800700e <HAL_TIM_ConfigClockSource+0x1aa>
 8006f44:	2b30      	cmp	r3, #48	; 0x30
 8006f46:	d86b      	bhi.n	8007020 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f48:	2b20      	cmp	r3, #32
 8006f4a:	d060      	beq.n	800700e <HAL_TIM_ConfigClockSource+0x1aa>
 8006f4c:	2b20      	cmp	r3, #32
 8006f4e:	d867      	bhi.n	8007020 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d05c      	beq.n	800700e <HAL_TIM_ConfigClockSource+0x1aa>
 8006f54:	2b10      	cmp	r3, #16
 8006f56:	d05a      	beq.n	800700e <HAL_TIM_ConfigClockSource+0x1aa>
 8006f58:	e062      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f6a:	f000 fc6d 	bl	8007848 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	609a      	str	r2, [r3, #8]
      break;
 8006f86:	e04f      	b.n	8007028 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f98:	f000 fc56 	bl	8007848 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006faa:	609a      	str	r2, [r3, #8]
      break;
 8006fac:	e03c      	b.n	8007028 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fba:	461a      	mov	r2, r3
 8006fbc:	f000 fbc6 	bl	800774c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2150      	movs	r1, #80	; 0x50
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fc20 	bl	800780c <TIM_ITRx_SetConfig>
      break;
 8006fcc:	e02c      	b.n	8007028 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f000 fbe5 	bl	80077aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2160      	movs	r1, #96	; 0x60
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 fc10 	bl	800780c <TIM_ITRx_SetConfig>
      break;
 8006fec:	e01c      	b.n	8007028 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f000 fba6 	bl	800774c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2140      	movs	r1, #64	; 0x40
 8007006:	4618      	mov	r0, r3
 8007008:	f000 fc00 	bl	800780c <TIM_ITRx_SetConfig>
      break;
 800700c:	e00c      	b.n	8007028 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4619      	mov	r1, r3
 8007018:	4610      	mov	r0, r2
 800701a:	f000 fbf7 	bl	800780c <TIM_ITRx_SetConfig>
      break;
 800701e:	e003      	b.n	8007028 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	73fb      	strb	r3, [r7, #15]
      break;
 8007024:	e000      	b.n	8007028 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007038:	7bfb      	ldrb	r3, [r7, #15]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	ffceff88 	.word	0xffceff88
 8007048:	00100040 	.word	0x00100040
 800704c:	00100030 	.word	0x00100030
 8007050:	00100020 	.word	0x00100020

08007054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a44      	ldr	r2, [pc, #272]	; (8007178 <TIM_Base_SetConfig+0x124>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d013      	beq.n	8007094 <TIM_Base_SetConfig+0x40>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007072:	d00f      	beq.n	8007094 <TIM_Base_SetConfig+0x40>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a41      	ldr	r2, [pc, #260]	; (800717c <TIM_Base_SetConfig+0x128>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00b      	beq.n	8007094 <TIM_Base_SetConfig+0x40>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a40      	ldr	r2, [pc, #256]	; (8007180 <TIM_Base_SetConfig+0x12c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d007      	beq.n	8007094 <TIM_Base_SetConfig+0x40>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a3f      	ldr	r2, [pc, #252]	; (8007184 <TIM_Base_SetConfig+0x130>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d003      	beq.n	8007094 <TIM_Base_SetConfig+0x40>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a3e      	ldr	r2, [pc, #248]	; (8007188 <TIM_Base_SetConfig+0x134>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d108      	bne.n	80070a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a33      	ldr	r2, [pc, #204]	; (8007178 <TIM_Base_SetConfig+0x124>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d027      	beq.n	80070fe <TIM_Base_SetConfig+0xaa>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b4:	d023      	beq.n	80070fe <TIM_Base_SetConfig+0xaa>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a30      	ldr	r2, [pc, #192]	; (800717c <TIM_Base_SetConfig+0x128>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d01f      	beq.n	80070fe <TIM_Base_SetConfig+0xaa>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a2f      	ldr	r2, [pc, #188]	; (8007180 <TIM_Base_SetConfig+0x12c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d01b      	beq.n	80070fe <TIM_Base_SetConfig+0xaa>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a2e      	ldr	r2, [pc, #184]	; (8007184 <TIM_Base_SetConfig+0x130>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d017      	beq.n	80070fe <TIM_Base_SetConfig+0xaa>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a2d      	ldr	r2, [pc, #180]	; (8007188 <TIM_Base_SetConfig+0x134>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d013      	beq.n	80070fe <TIM_Base_SetConfig+0xaa>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a2c      	ldr	r2, [pc, #176]	; (800718c <TIM_Base_SetConfig+0x138>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d00f      	beq.n	80070fe <TIM_Base_SetConfig+0xaa>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a2b      	ldr	r2, [pc, #172]	; (8007190 <TIM_Base_SetConfig+0x13c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d00b      	beq.n	80070fe <TIM_Base_SetConfig+0xaa>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a2a      	ldr	r2, [pc, #168]	; (8007194 <TIM_Base_SetConfig+0x140>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d007      	beq.n	80070fe <TIM_Base_SetConfig+0xaa>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a29      	ldr	r2, [pc, #164]	; (8007198 <TIM_Base_SetConfig+0x144>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d003      	beq.n	80070fe <TIM_Base_SetConfig+0xaa>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a28      	ldr	r2, [pc, #160]	; (800719c <TIM_Base_SetConfig+0x148>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d108      	bne.n	8007110 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	4313      	orrs	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a10      	ldr	r2, [pc, #64]	; (8007178 <TIM_Base_SetConfig+0x124>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d00f      	beq.n	800715c <TIM_Base_SetConfig+0x108>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a12      	ldr	r2, [pc, #72]	; (8007188 <TIM_Base_SetConfig+0x134>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d00b      	beq.n	800715c <TIM_Base_SetConfig+0x108>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a11      	ldr	r2, [pc, #68]	; (800718c <TIM_Base_SetConfig+0x138>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d007      	beq.n	800715c <TIM_Base_SetConfig+0x108>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a10      	ldr	r2, [pc, #64]	; (8007190 <TIM_Base_SetConfig+0x13c>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d003      	beq.n	800715c <TIM_Base_SetConfig+0x108>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a0f      	ldr	r2, [pc, #60]	; (8007194 <TIM_Base_SetConfig+0x140>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d103      	bne.n	8007164 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	691a      	ldr	r2, [r3, #16]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	615a      	str	r2, [r3, #20]
}
 800716a:	bf00      	nop
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40010000 	.word	0x40010000
 800717c:	40000400 	.word	0x40000400
 8007180:	40000800 	.word	0x40000800
 8007184:	40000c00 	.word	0x40000c00
 8007188:	40010400 	.word	0x40010400
 800718c:	40014000 	.word	0x40014000
 8007190:	40014400 	.word	0x40014400
 8007194:	40014800 	.word	0x40014800
 8007198:	4000e000 	.word	0x4000e000
 800719c:	4000e400 	.word	0x4000e400

080071a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	f023 0201 	bic.w	r2, r3, #1
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4b37      	ldr	r3, [pc, #220]	; (80072a8 <TIM_OC1_SetConfig+0x108>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f023 0303 	bic.w	r3, r3, #3
 80071d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f023 0302 	bic.w	r3, r3, #2
 80071e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a2d      	ldr	r2, [pc, #180]	; (80072ac <TIM_OC1_SetConfig+0x10c>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d00f      	beq.n	800721c <TIM_OC1_SetConfig+0x7c>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a2c      	ldr	r2, [pc, #176]	; (80072b0 <TIM_OC1_SetConfig+0x110>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d00b      	beq.n	800721c <TIM_OC1_SetConfig+0x7c>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a2b      	ldr	r2, [pc, #172]	; (80072b4 <TIM_OC1_SetConfig+0x114>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d007      	beq.n	800721c <TIM_OC1_SetConfig+0x7c>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a2a      	ldr	r2, [pc, #168]	; (80072b8 <TIM_OC1_SetConfig+0x118>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d003      	beq.n	800721c <TIM_OC1_SetConfig+0x7c>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a29      	ldr	r2, [pc, #164]	; (80072bc <TIM_OC1_SetConfig+0x11c>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d10c      	bne.n	8007236 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f023 0308 	bic.w	r3, r3, #8
 8007222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	4313      	orrs	r3, r2
 800722c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f023 0304 	bic.w	r3, r3, #4
 8007234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a1c      	ldr	r2, [pc, #112]	; (80072ac <TIM_OC1_SetConfig+0x10c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d00f      	beq.n	800725e <TIM_OC1_SetConfig+0xbe>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a1b      	ldr	r2, [pc, #108]	; (80072b0 <TIM_OC1_SetConfig+0x110>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d00b      	beq.n	800725e <TIM_OC1_SetConfig+0xbe>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a1a      	ldr	r2, [pc, #104]	; (80072b4 <TIM_OC1_SetConfig+0x114>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d007      	beq.n	800725e <TIM_OC1_SetConfig+0xbe>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a19      	ldr	r2, [pc, #100]	; (80072b8 <TIM_OC1_SetConfig+0x118>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d003      	beq.n	800725e <TIM_OC1_SetConfig+0xbe>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a18      	ldr	r2, [pc, #96]	; (80072bc <TIM_OC1_SetConfig+0x11c>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d111      	bne.n	8007282 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800726c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	4313      	orrs	r3, r2
 8007280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	621a      	str	r2, [r3, #32]
}
 800729c:	bf00      	nop
 800729e:	371c      	adds	r7, #28
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	fffeff8f 	.word	0xfffeff8f
 80072ac:	40010000 	.word	0x40010000
 80072b0:	40010400 	.word	0x40010400
 80072b4:	40014000 	.word	0x40014000
 80072b8:	40014400 	.word	0x40014400
 80072bc:	40014800 	.word	0x40014800

080072c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	f023 0210 	bic.w	r2, r3, #16
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4b34      	ldr	r3, [pc, #208]	; (80073bc <TIM_OC2_SetConfig+0xfc>)
 80072ec:	4013      	ands	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	021b      	lsls	r3, r3, #8
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	4313      	orrs	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f023 0320 	bic.w	r3, r3, #32
 800730a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	011b      	lsls	r3, r3, #4
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	4313      	orrs	r3, r2
 8007316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a29      	ldr	r2, [pc, #164]	; (80073c0 <TIM_OC2_SetConfig+0x100>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d003      	beq.n	8007328 <TIM_OC2_SetConfig+0x68>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a28      	ldr	r2, [pc, #160]	; (80073c4 <TIM_OC2_SetConfig+0x104>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d10d      	bne.n	8007344 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800732e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	011b      	lsls	r3, r3, #4
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	4313      	orrs	r3, r2
 800733a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007342:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a1e      	ldr	r2, [pc, #120]	; (80073c0 <TIM_OC2_SetConfig+0x100>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d00f      	beq.n	800736c <TIM_OC2_SetConfig+0xac>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a1d      	ldr	r2, [pc, #116]	; (80073c4 <TIM_OC2_SetConfig+0x104>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d00b      	beq.n	800736c <TIM_OC2_SetConfig+0xac>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a1c      	ldr	r2, [pc, #112]	; (80073c8 <TIM_OC2_SetConfig+0x108>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d007      	beq.n	800736c <TIM_OC2_SetConfig+0xac>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a1b      	ldr	r2, [pc, #108]	; (80073cc <TIM_OC2_SetConfig+0x10c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d003      	beq.n	800736c <TIM_OC2_SetConfig+0xac>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a1a      	ldr	r2, [pc, #104]	; (80073d0 <TIM_OC2_SetConfig+0x110>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d113      	bne.n	8007394 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007372:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800737a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	4313      	orrs	r3, r2
 8007386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	4313      	orrs	r3, r2
 8007392:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	621a      	str	r2, [r3, #32]
}
 80073ae:	bf00      	nop
 80073b0:	371c      	adds	r7, #28
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	feff8fff 	.word	0xfeff8fff
 80073c0:	40010000 	.word	0x40010000
 80073c4:	40010400 	.word	0x40010400
 80073c8:	40014000 	.word	0x40014000
 80073cc:	40014400 	.word	0x40014400
 80073d0:	40014800 	.word	0x40014800

080073d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b087      	sub	sp, #28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	4b33      	ldr	r3, [pc, #204]	; (80074cc <TIM_OC3_SetConfig+0xf8>)
 8007400:	4013      	ands	r3, r2
 8007402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 0303 	bic.w	r3, r3, #3
 800740a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800741c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	021b      	lsls	r3, r3, #8
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a28      	ldr	r2, [pc, #160]	; (80074d0 <TIM_OC3_SetConfig+0xfc>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d003      	beq.n	800743a <TIM_OC3_SetConfig+0x66>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a27      	ldr	r2, [pc, #156]	; (80074d4 <TIM_OC3_SetConfig+0x100>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d10d      	bne.n	8007456 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007440:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	021b      	lsls	r3, r3, #8
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	4313      	orrs	r3, r2
 800744c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a1d      	ldr	r2, [pc, #116]	; (80074d0 <TIM_OC3_SetConfig+0xfc>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d00f      	beq.n	800747e <TIM_OC3_SetConfig+0xaa>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a1c      	ldr	r2, [pc, #112]	; (80074d4 <TIM_OC3_SetConfig+0x100>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d00b      	beq.n	800747e <TIM_OC3_SetConfig+0xaa>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a1b      	ldr	r2, [pc, #108]	; (80074d8 <TIM_OC3_SetConfig+0x104>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d007      	beq.n	800747e <TIM_OC3_SetConfig+0xaa>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a1a      	ldr	r2, [pc, #104]	; (80074dc <TIM_OC3_SetConfig+0x108>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d003      	beq.n	800747e <TIM_OC3_SetConfig+0xaa>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a19      	ldr	r2, [pc, #100]	; (80074e0 <TIM_OC3_SetConfig+0x10c>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d113      	bne.n	80074a6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800748c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	4313      	orrs	r3, r2
 8007498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	621a      	str	r2, [r3, #32]
}
 80074c0:	bf00      	nop
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	fffeff8f 	.word	0xfffeff8f
 80074d0:	40010000 	.word	0x40010000
 80074d4:	40010400 	.word	0x40010400
 80074d8:	40014000 	.word	0x40014000
 80074dc:	40014400 	.word	0x40014400
 80074e0:	40014800 	.word	0x40014800

080074e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4b24      	ldr	r3, [pc, #144]	; (80075a0 <TIM_OC4_SetConfig+0xbc>)
 8007510:	4013      	ands	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800751a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	021b      	lsls	r3, r3, #8
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	4313      	orrs	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800752e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	031b      	lsls	r3, r3, #12
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	4313      	orrs	r3, r2
 800753a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a19      	ldr	r2, [pc, #100]	; (80075a4 <TIM_OC4_SetConfig+0xc0>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d00f      	beq.n	8007564 <TIM_OC4_SetConfig+0x80>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a18      	ldr	r2, [pc, #96]	; (80075a8 <TIM_OC4_SetConfig+0xc4>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d00b      	beq.n	8007564 <TIM_OC4_SetConfig+0x80>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a17      	ldr	r2, [pc, #92]	; (80075ac <TIM_OC4_SetConfig+0xc8>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d007      	beq.n	8007564 <TIM_OC4_SetConfig+0x80>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a16      	ldr	r2, [pc, #88]	; (80075b0 <TIM_OC4_SetConfig+0xcc>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d003      	beq.n	8007564 <TIM_OC4_SetConfig+0x80>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a15      	ldr	r2, [pc, #84]	; (80075b4 <TIM_OC4_SetConfig+0xd0>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d109      	bne.n	8007578 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800756a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	019b      	lsls	r3, r3, #6
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	4313      	orrs	r3, r2
 8007576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	621a      	str	r2, [r3, #32]
}
 8007592:	bf00      	nop
 8007594:	371c      	adds	r7, #28
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	feff8fff 	.word	0xfeff8fff
 80075a4:	40010000 	.word	0x40010000
 80075a8:	40010400 	.word	0x40010400
 80075ac:	40014000 	.word	0x40014000
 80075b0:	40014400 	.word	0x40014400
 80075b4:	40014800 	.word	0x40014800

080075b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	4b21      	ldr	r3, [pc, #132]	; (8007668 <TIM_OC5_SetConfig+0xb0>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80075f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	041b      	lsls	r3, r3, #16
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	4313      	orrs	r3, r2
 8007604:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a18      	ldr	r2, [pc, #96]	; (800766c <TIM_OC5_SetConfig+0xb4>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d00f      	beq.n	800762e <TIM_OC5_SetConfig+0x76>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a17      	ldr	r2, [pc, #92]	; (8007670 <TIM_OC5_SetConfig+0xb8>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d00b      	beq.n	800762e <TIM_OC5_SetConfig+0x76>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a16      	ldr	r2, [pc, #88]	; (8007674 <TIM_OC5_SetConfig+0xbc>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d007      	beq.n	800762e <TIM_OC5_SetConfig+0x76>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a15      	ldr	r2, [pc, #84]	; (8007678 <TIM_OC5_SetConfig+0xc0>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d003      	beq.n	800762e <TIM_OC5_SetConfig+0x76>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a14      	ldr	r2, [pc, #80]	; (800767c <TIM_OC5_SetConfig+0xc4>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d109      	bne.n	8007642 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007634:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	021b      	lsls	r3, r3, #8
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	4313      	orrs	r3, r2
 8007640:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	621a      	str	r2, [r3, #32]
}
 800765c:	bf00      	nop
 800765e:	371c      	adds	r7, #28
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	fffeff8f 	.word	0xfffeff8f
 800766c:	40010000 	.word	0x40010000
 8007670:	40010400 	.word	0x40010400
 8007674:	40014000 	.word	0x40014000
 8007678:	40014400 	.word	0x40014400
 800767c:	40014800 	.word	0x40014800

08007680 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	4b22      	ldr	r3, [pc, #136]	; (8007734 <TIM_OC6_SetConfig+0xb4>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	021b      	lsls	r3, r3, #8
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	051b      	lsls	r3, r3, #20
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a19      	ldr	r2, [pc, #100]	; (8007738 <TIM_OC6_SetConfig+0xb8>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d00f      	beq.n	80076f8 <TIM_OC6_SetConfig+0x78>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a18      	ldr	r2, [pc, #96]	; (800773c <TIM_OC6_SetConfig+0xbc>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d00b      	beq.n	80076f8 <TIM_OC6_SetConfig+0x78>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a17      	ldr	r2, [pc, #92]	; (8007740 <TIM_OC6_SetConfig+0xc0>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d007      	beq.n	80076f8 <TIM_OC6_SetConfig+0x78>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a16      	ldr	r2, [pc, #88]	; (8007744 <TIM_OC6_SetConfig+0xc4>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d003      	beq.n	80076f8 <TIM_OC6_SetConfig+0x78>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a15      	ldr	r2, [pc, #84]	; (8007748 <TIM_OC6_SetConfig+0xc8>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d109      	bne.n	800770c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	029b      	lsls	r3, r3, #10
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	4313      	orrs	r3, r2
 800770a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	621a      	str	r2, [r3, #32]
}
 8007726:	bf00      	nop
 8007728:	371c      	adds	r7, #28
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	feff8fff 	.word	0xfeff8fff
 8007738:	40010000 	.word	0x40010000
 800773c:	40010400 	.word	0x40010400
 8007740:	40014000 	.word	0x40014000
 8007744:	40014400 	.word	0x40014400
 8007748:	40014800 	.word	0x40014800

0800774c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a1b      	ldr	r3, [r3, #32]
 800775c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	f023 0201 	bic.w	r2, r3, #1
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	011b      	lsls	r3, r3, #4
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	4313      	orrs	r3, r2
 8007780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f023 030a 	bic.w	r3, r3, #10
 8007788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4313      	orrs	r3, r2
 8007790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	621a      	str	r2, [r3, #32]
}
 800779e:	bf00      	nop
 80077a0:	371c      	adds	r7, #28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b087      	sub	sp, #28
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	f023 0210 	bic.w	r2, r3, #16
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	031b      	lsls	r3, r3, #12
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4313      	orrs	r3, r2
 80077de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	011b      	lsls	r3, r3, #4
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	621a      	str	r2, [r3, #32]
}
 80077fe:	bf00      	nop
 8007800:	371c      	adds	r7, #28
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
	...

0800780c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4b09      	ldr	r3, [pc, #36]	; (8007844 <TIM_ITRx_SetConfig+0x38>)
 8007820:	4013      	ands	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	4313      	orrs	r3, r2
 800782a:	f043 0307 	orr.w	r3, r3, #7
 800782e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	609a      	str	r2, [r3, #8]
}
 8007836:	bf00      	nop
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	ffcfff8f 	.word	0xffcfff8f

08007848 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
 8007854:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007862:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	021a      	lsls	r2, r3, #8
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	431a      	orrs	r2, r3
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	4313      	orrs	r3, r2
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	4313      	orrs	r3, r2
 8007874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	609a      	str	r2, [r3, #8]
}
 800787c:	bf00      	nop
 800787e:	371c      	adds	r7, #28
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007898:	2b01      	cmp	r3, #1
 800789a:	d101      	bne.n	80078a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800789c:	2302      	movs	r3, #2
 800789e:	e077      	b.n	8007990 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2202      	movs	r2, #2
 80078ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a35      	ldr	r2, [pc, #212]	; (800799c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d004      	beq.n	80078d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a34      	ldr	r2, [pc, #208]	; (80079a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d108      	bne.n	80078e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80078da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a25      	ldr	r2, [pc, #148]	; (800799c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d02c      	beq.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007912:	d027      	beq.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a22      	ldr	r2, [pc, #136]	; (80079a4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d022      	beq.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a21      	ldr	r2, [pc, #132]	; (80079a8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d01d      	beq.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a1f      	ldr	r2, [pc, #124]	; (80079ac <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d018      	beq.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a1a      	ldr	r2, [pc, #104]	; (80079a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d013      	beq.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a1b      	ldr	r2, [pc, #108]	; (80079b0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d00e      	beq.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a1a      	ldr	r2, [pc, #104]	; (80079b4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d009      	beq.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a18      	ldr	r2, [pc, #96]	; (80079b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d004      	beq.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a17      	ldr	r2, [pc, #92]	; (80079bc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d10c      	bne.n	800797e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800796a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	4313      	orrs	r3, r2
 8007974:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	40010000 	.word	0x40010000
 80079a0:	40010400 	.word	0x40010400
 80079a4:	40000400 	.word	0x40000400
 80079a8:	40000800 	.word	0x40000800
 80079ac:	40000c00 	.word	0x40000c00
 80079b0:	40001800 	.word	0x40001800
 80079b4:	40014000 	.word	0x40014000
 80079b8:	4000e000 	.word	0x4000e000
 80079bc:	4000e400 	.word	0x4000e400

080079c0 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e03c      	b.n	8007a4c <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d106      	bne.n	80079ec <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7f9 fa52 	bl	8000e90 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2202      	movs	r2, #2
 80079f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 0201 	bic.w	r2, r2, #1
 8007a02:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f85b 	bl	8007ac0 <USART_SetConfig>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d101      	bne.n	8007a14 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e01b      	b.n	8007a4c <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a22:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a32:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0201 	orr.w	r2, r2, #1
 8007a42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fddd 	bl	8008604 <USART_CheckIdleState>
 8007a4a:	4603      	mov	r3, r0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	603b      	str	r3, [r7, #0]
 8007a60:	4613      	mov	r3, r2
 8007a62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007a64:	e018      	b.n	8007a98 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6c:	d014      	beq.n	8007a98 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a6e:	f7f9 fb61 	bl	8001134 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d302      	bcc.n	8007a84 <USART_WaitOnFlagUntilTimeout+0x30>
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d109      	bne.n	8007a98 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e00f      	b.n	8007ab8 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	69da      	ldr	r2, [r3, #28]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	bf0c      	ite	eq
 8007aa8:	2301      	moveq	r3, #1
 8007aaa:	2300      	movne	r3, #0
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	461a      	mov	r2, r3
 8007ab0:	79fb      	ldrb	r3, [r7, #7]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d0d7      	beq.n	8007a66 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08e      	sub	sp, #56	; 0x38
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	633b      	str	r3, [r7, #48]	; 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689a      	ldr	r2, [r3, #8]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	431a      	orrs	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	4bc9      	ldr	r3, [pc, #804]	; (8007e14 <USART_SetConfig+0x354>)
 8007af0:	4013      	ands	r3, r2
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	6812      	ldr	r2, [r2, #0]
 8007af6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007af8:	430b      	orrs	r3, r1
 8007afa:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8007afc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	699a      	ldr	r2, [r3, #24]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b22:	4313      	orrs	r3, r2
 8007b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	4bba      	ldr	r3, [pc, #744]	; (8007e18 <USART_SetConfig+0x358>)
 8007b2e:	4013      	ands	r3, r2
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	6812      	ldr	r2, [r2, #0]
 8007b34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b36:	430b      	orrs	r3, r1
 8007b38:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b40:	f023 010f 	bic.w	r1, r3, #15
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	430a      	orrs	r2, r1
 8007b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4ab1      	ldr	r2, [pc, #708]	; (8007e1c <USART_SetConfig+0x35c>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d176      	bne.n	8007c48 <USART_SetConfig+0x188>
 8007b5a:	4bb1      	ldr	r3, [pc, #708]	; (8007e20 <USART_SetConfig+0x360>)
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b62:	2b28      	cmp	r3, #40	; 0x28
 8007b64:	d86c      	bhi.n	8007c40 <USART_SetConfig+0x180>
 8007b66:	a201      	add	r2, pc, #4	; (adr r2, 8007b6c <USART_SetConfig+0xac>)
 8007b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6c:	08007c11 	.word	0x08007c11
 8007b70:	08007c41 	.word	0x08007c41
 8007b74:	08007c41 	.word	0x08007c41
 8007b78:	08007c41 	.word	0x08007c41
 8007b7c:	08007c41 	.word	0x08007c41
 8007b80:	08007c41 	.word	0x08007c41
 8007b84:	08007c41 	.word	0x08007c41
 8007b88:	08007c41 	.word	0x08007c41
 8007b8c:	08007c19 	.word	0x08007c19
 8007b90:	08007c41 	.word	0x08007c41
 8007b94:	08007c41 	.word	0x08007c41
 8007b98:	08007c41 	.word	0x08007c41
 8007b9c:	08007c41 	.word	0x08007c41
 8007ba0:	08007c41 	.word	0x08007c41
 8007ba4:	08007c41 	.word	0x08007c41
 8007ba8:	08007c41 	.word	0x08007c41
 8007bac:	08007c21 	.word	0x08007c21
 8007bb0:	08007c41 	.word	0x08007c41
 8007bb4:	08007c41 	.word	0x08007c41
 8007bb8:	08007c41 	.word	0x08007c41
 8007bbc:	08007c41 	.word	0x08007c41
 8007bc0:	08007c41 	.word	0x08007c41
 8007bc4:	08007c41 	.word	0x08007c41
 8007bc8:	08007c41 	.word	0x08007c41
 8007bcc:	08007c29 	.word	0x08007c29
 8007bd0:	08007c41 	.word	0x08007c41
 8007bd4:	08007c41 	.word	0x08007c41
 8007bd8:	08007c41 	.word	0x08007c41
 8007bdc:	08007c41 	.word	0x08007c41
 8007be0:	08007c41 	.word	0x08007c41
 8007be4:	08007c41 	.word	0x08007c41
 8007be8:	08007c41 	.word	0x08007c41
 8007bec:	08007c31 	.word	0x08007c31
 8007bf0:	08007c41 	.word	0x08007c41
 8007bf4:	08007c41 	.word	0x08007c41
 8007bf8:	08007c41 	.word	0x08007c41
 8007bfc:	08007c41 	.word	0x08007c41
 8007c00:	08007c41 	.word	0x08007c41
 8007c04:	08007c41 	.word	0x08007c41
 8007c08:	08007c41 	.word	0x08007c41
 8007c0c:	08007c39 	.word	0x08007c39
 8007c10:	2301      	movs	r3, #1
 8007c12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007c16:	e18e      	b.n	8007f36 <USART_SetConfig+0x476>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007c1e:	e18a      	b.n	8007f36 <USART_SetConfig+0x476>
 8007c20:	2304      	movs	r3, #4
 8007c22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007c26:	e186      	b.n	8007f36 <USART_SetConfig+0x476>
 8007c28:	2308      	movs	r3, #8
 8007c2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007c2e:	e182      	b.n	8007f36 <USART_SetConfig+0x476>
 8007c30:	2310      	movs	r3, #16
 8007c32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007c36:	e17e      	b.n	8007f36 <USART_SetConfig+0x476>
 8007c38:	2320      	movs	r3, #32
 8007c3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007c3e:	e17a      	b.n	8007f36 <USART_SetConfig+0x476>
 8007c40:	2340      	movs	r3, #64	; 0x40
 8007c42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007c46:	e176      	b.n	8007f36 <USART_SetConfig+0x476>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a75      	ldr	r2, [pc, #468]	; (8007e24 <USART_SetConfig+0x364>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d130      	bne.n	8007cb4 <USART_SetConfig+0x1f4>
 8007c52:	4b73      	ldr	r3, [pc, #460]	; (8007e20 <USART_SetConfig+0x360>)
 8007c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c56:	f003 0307 	and.w	r3, r3, #7
 8007c5a:	2b05      	cmp	r3, #5
 8007c5c:	d826      	bhi.n	8007cac <USART_SetConfig+0x1ec>
 8007c5e:	a201      	add	r2, pc, #4	; (adr r2, 8007c64 <USART_SetConfig+0x1a4>)
 8007c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c64:	08007c7d 	.word	0x08007c7d
 8007c68:	08007c85 	.word	0x08007c85
 8007c6c:	08007c8d 	.word	0x08007c8d
 8007c70:	08007c95 	.word	0x08007c95
 8007c74:	08007c9d 	.word	0x08007c9d
 8007c78:	08007ca5 	.word	0x08007ca5
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007c82:	e158      	b.n	8007f36 <USART_SetConfig+0x476>
 8007c84:	2302      	movs	r3, #2
 8007c86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007c8a:	e154      	b.n	8007f36 <USART_SetConfig+0x476>
 8007c8c:	2304      	movs	r3, #4
 8007c8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007c92:	e150      	b.n	8007f36 <USART_SetConfig+0x476>
 8007c94:	2308      	movs	r3, #8
 8007c96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007c9a:	e14c      	b.n	8007f36 <USART_SetConfig+0x476>
 8007c9c:	2310      	movs	r3, #16
 8007c9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007ca2:	e148      	b.n	8007f36 <USART_SetConfig+0x476>
 8007ca4:	2320      	movs	r3, #32
 8007ca6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007caa:	e144      	b.n	8007f36 <USART_SetConfig+0x476>
 8007cac:	2340      	movs	r3, #64	; 0x40
 8007cae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007cb2:	e140      	b.n	8007f36 <USART_SetConfig+0x476>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a5b      	ldr	r2, [pc, #364]	; (8007e28 <USART_SetConfig+0x368>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d130      	bne.n	8007d20 <USART_SetConfig+0x260>
 8007cbe:	4b58      	ldr	r3, [pc, #352]	; (8007e20 <USART_SetConfig+0x360>)
 8007cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc2:	f003 0307 	and.w	r3, r3, #7
 8007cc6:	2b05      	cmp	r3, #5
 8007cc8:	d826      	bhi.n	8007d18 <USART_SetConfig+0x258>
 8007cca:	a201      	add	r2, pc, #4	; (adr r2, 8007cd0 <USART_SetConfig+0x210>)
 8007ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd0:	08007ce9 	.word	0x08007ce9
 8007cd4:	08007cf1 	.word	0x08007cf1
 8007cd8:	08007cf9 	.word	0x08007cf9
 8007cdc:	08007d01 	.word	0x08007d01
 8007ce0:	08007d09 	.word	0x08007d09
 8007ce4:	08007d11 	.word	0x08007d11
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007cee:	e122      	b.n	8007f36 <USART_SetConfig+0x476>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007cf6:	e11e      	b.n	8007f36 <USART_SetConfig+0x476>
 8007cf8:	2304      	movs	r3, #4
 8007cfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007cfe:	e11a      	b.n	8007f36 <USART_SetConfig+0x476>
 8007d00:	2308      	movs	r3, #8
 8007d02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007d06:	e116      	b.n	8007f36 <USART_SetConfig+0x476>
 8007d08:	2310      	movs	r3, #16
 8007d0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007d0e:	e112      	b.n	8007f36 <USART_SetConfig+0x476>
 8007d10:	2320      	movs	r3, #32
 8007d12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007d16:	e10e      	b.n	8007f36 <USART_SetConfig+0x476>
 8007d18:	2340      	movs	r3, #64	; 0x40
 8007d1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007d1e:	e10a      	b.n	8007f36 <USART_SetConfig+0x476>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a41      	ldr	r2, [pc, #260]	; (8007e2c <USART_SetConfig+0x36c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	f040 8086 	bne.w	8007e38 <USART_SetConfig+0x378>
 8007d2c:	4b3c      	ldr	r3, [pc, #240]	; (8007e20 <USART_SetConfig+0x360>)
 8007d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d34:	2b28      	cmp	r3, #40	; 0x28
 8007d36:	d87b      	bhi.n	8007e30 <USART_SetConfig+0x370>
 8007d38:	a201      	add	r2, pc, #4	; (adr r2, 8007d40 <USART_SetConfig+0x280>)
 8007d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3e:	bf00      	nop
 8007d40:	08007de5 	.word	0x08007de5
 8007d44:	08007e31 	.word	0x08007e31
 8007d48:	08007e31 	.word	0x08007e31
 8007d4c:	08007e31 	.word	0x08007e31
 8007d50:	08007e31 	.word	0x08007e31
 8007d54:	08007e31 	.word	0x08007e31
 8007d58:	08007e31 	.word	0x08007e31
 8007d5c:	08007e31 	.word	0x08007e31
 8007d60:	08007ded 	.word	0x08007ded
 8007d64:	08007e31 	.word	0x08007e31
 8007d68:	08007e31 	.word	0x08007e31
 8007d6c:	08007e31 	.word	0x08007e31
 8007d70:	08007e31 	.word	0x08007e31
 8007d74:	08007e31 	.word	0x08007e31
 8007d78:	08007e31 	.word	0x08007e31
 8007d7c:	08007e31 	.word	0x08007e31
 8007d80:	08007df5 	.word	0x08007df5
 8007d84:	08007e31 	.word	0x08007e31
 8007d88:	08007e31 	.word	0x08007e31
 8007d8c:	08007e31 	.word	0x08007e31
 8007d90:	08007e31 	.word	0x08007e31
 8007d94:	08007e31 	.word	0x08007e31
 8007d98:	08007e31 	.word	0x08007e31
 8007d9c:	08007e31 	.word	0x08007e31
 8007da0:	08007dfd 	.word	0x08007dfd
 8007da4:	08007e31 	.word	0x08007e31
 8007da8:	08007e31 	.word	0x08007e31
 8007dac:	08007e31 	.word	0x08007e31
 8007db0:	08007e31 	.word	0x08007e31
 8007db4:	08007e31 	.word	0x08007e31
 8007db8:	08007e31 	.word	0x08007e31
 8007dbc:	08007e31 	.word	0x08007e31
 8007dc0:	08007e05 	.word	0x08007e05
 8007dc4:	08007e31 	.word	0x08007e31
 8007dc8:	08007e31 	.word	0x08007e31
 8007dcc:	08007e31 	.word	0x08007e31
 8007dd0:	08007e31 	.word	0x08007e31
 8007dd4:	08007e31 	.word	0x08007e31
 8007dd8:	08007e31 	.word	0x08007e31
 8007ddc:	08007e31 	.word	0x08007e31
 8007de0:	08007e0d 	.word	0x08007e0d
 8007de4:	2301      	movs	r3, #1
 8007de6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007dea:	e0a4      	b.n	8007f36 <USART_SetConfig+0x476>
 8007dec:	2302      	movs	r3, #2
 8007dee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007df2:	e0a0      	b.n	8007f36 <USART_SetConfig+0x476>
 8007df4:	2304      	movs	r3, #4
 8007df6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007dfa:	e09c      	b.n	8007f36 <USART_SetConfig+0x476>
 8007dfc:	2308      	movs	r3, #8
 8007dfe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007e02:	e098      	b.n	8007f36 <USART_SetConfig+0x476>
 8007e04:	2310      	movs	r3, #16
 8007e06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007e0a:	e094      	b.n	8007f36 <USART_SetConfig+0x476>
 8007e0c:	2320      	movs	r3, #32
 8007e0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007e12:	e090      	b.n	8007f36 <USART_SetConfig+0x476>
 8007e14:	cfff69f3 	.word	0xcfff69f3
 8007e18:	ffffc0f6 	.word	0xffffc0f6
 8007e1c:	40011000 	.word	0x40011000
 8007e20:	58024400 	.word	0x58024400
 8007e24:	40004400 	.word	0x40004400
 8007e28:	40004800 	.word	0x40004800
 8007e2c:	40011400 	.word	0x40011400
 8007e30:	2340      	movs	r3, #64	; 0x40
 8007e32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007e36:	e07e      	b.n	8007f36 <USART_SetConfig+0x476>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4ab5      	ldr	r2, [pc, #724]	; (8008114 <USART_SetConfig+0x654>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d176      	bne.n	8007f30 <USART_SetConfig+0x470>
 8007e42:	4bb5      	ldr	r3, [pc, #724]	; (8008118 <USART_SetConfig+0x658>)
 8007e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e4a:	2b28      	cmp	r3, #40	; 0x28
 8007e4c:	d86c      	bhi.n	8007f28 <USART_SetConfig+0x468>
 8007e4e:	a201      	add	r2, pc, #4	; (adr r2, 8007e54 <USART_SetConfig+0x394>)
 8007e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e54:	08007ef9 	.word	0x08007ef9
 8007e58:	08007f29 	.word	0x08007f29
 8007e5c:	08007f29 	.word	0x08007f29
 8007e60:	08007f29 	.word	0x08007f29
 8007e64:	08007f29 	.word	0x08007f29
 8007e68:	08007f29 	.word	0x08007f29
 8007e6c:	08007f29 	.word	0x08007f29
 8007e70:	08007f29 	.word	0x08007f29
 8007e74:	08007f01 	.word	0x08007f01
 8007e78:	08007f29 	.word	0x08007f29
 8007e7c:	08007f29 	.word	0x08007f29
 8007e80:	08007f29 	.word	0x08007f29
 8007e84:	08007f29 	.word	0x08007f29
 8007e88:	08007f29 	.word	0x08007f29
 8007e8c:	08007f29 	.word	0x08007f29
 8007e90:	08007f29 	.word	0x08007f29
 8007e94:	08007f09 	.word	0x08007f09
 8007e98:	08007f29 	.word	0x08007f29
 8007e9c:	08007f29 	.word	0x08007f29
 8007ea0:	08007f29 	.word	0x08007f29
 8007ea4:	08007f29 	.word	0x08007f29
 8007ea8:	08007f29 	.word	0x08007f29
 8007eac:	08007f29 	.word	0x08007f29
 8007eb0:	08007f29 	.word	0x08007f29
 8007eb4:	08007f11 	.word	0x08007f11
 8007eb8:	08007f29 	.word	0x08007f29
 8007ebc:	08007f29 	.word	0x08007f29
 8007ec0:	08007f29 	.word	0x08007f29
 8007ec4:	08007f29 	.word	0x08007f29
 8007ec8:	08007f29 	.word	0x08007f29
 8007ecc:	08007f29 	.word	0x08007f29
 8007ed0:	08007f29 	.word	0x08007f29
 8007ed4:	08007f19 	.word	0x08007f19
 8007ed8:	08007f29 	.word	0x08007f29
 8007edc:	08007f29 	.word	0x08007f29
 8007ee0:	08007f29 	.word	0x08007f29
 8007ee4:	08007f29 	.word	0x08007f29
 8007ee8:	08007f29 	.word	0x08007f29
 8007eec:	08007f29 	.word	0x08007f29
 8007ef0:	08007f29 	.word	0x08007f29
 8007ef4:	08007f21 	.word	0x08007f21
 8007ef8:	2301      	movs	r3, #1
 8007efa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007efe:	e01a      	b.n	8007f36 <USART_SetConfig+0x476>
 8007f00:	2302      	movs	r3, #2
 8007f02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f06:	e016      	b.n	8007f36 <USART_SetConfig+0x476>
 8007f08:	2304      	movs	r3, #4
 8007f0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f0e:	e012      	b.n	8007f36 <USART_SetConfig+0x476>
 8007f10:	2308      	movs	r3, #8
 8007f12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f16:	e00e      	b.n	8007f36 <USART_SetConfig+0x476>
 8007f18:	2310      	movs	r3, #16
 8007f1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f1e:	e00a      	b.n	8007f36 <USART_SetConfig+0x476>
 8007f20:	2320      	movs	r3, #32
 8007f22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f26:	e006      	b.n	8007f36 <USART_SetConfig+0x476>
 8007f28:	2340      	movs	r3, #64	; 0x40
 8007f2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f2e:	e002      	b.n	8007f36 <USART_SetConfig+0x476>
 8007f30:	2340      	movs	r3, #64	; 0x40
 8007f32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  switch (clocksource)
 8007f36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f3a:	2b20      	cmp	r3, #32
 8007f3c:	f200 832f 	bhi.w	800859e <USART_SetConfig+0xade>
 8007f40:	a201      	add	r2, pc, #4	; (adr r2, 8007f48 <USART_SetConfig+0x488>)
 8007f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f46:	bf00      	nop
 8007f48:	08007fcd 	.word	0x08007fcd
 8007f4c:	08008083 	.word	0x08008083
 8007f50:	08008143 	.word	0x08008143
 8007f54:	0800859f 	.word	0x0800859f
 8007f58:	080081fd 	.word	0x080081fd
 8007f5c:	0800859f 	.word	0x0800859f
 8007f60:	0800859f 	.word	0x0800859f
 8007f64:	0800859f 	.word	0x0800859f
 8007f68:	080082b7 	.word	0x080082b7
 8007f6c:	0800859f 	.word	0x0800859f
 8007f70:	0800859f 	.word	0x0800859f
 8007f74:	0800859f 	.word	0x0800859f
 8007f78:	0800859f 	.word	0x0800859f
 8007f7c:	0800859f 	.word	0x0800859f
 8007f80:	0800859f 	.word	0x0800859f
 8007f84:	0800859f 	.word	0x0800859f
 8007f88:	0800842f 	.word	0x0800842f
 8007f8c:	0800859f 	.word	0x0800859f
 8007f90:	0800859f 	.word	0x0800859f
 8007f94:	0800859f 	.word	0x0800859f
 8007f98:	0800859f 	.word	0x0800859f
 8007f9c:	0800859f 	.word	0x0800859f
 8007fa0:	0800859f 	.word	0x0800859f
 8007fa4:	0800859f 	.word	0x0800859f
 8007fa8:	0800859f 	.word	0x0800859f
 8007fac:	0800859f 	.word	0x0800859f
 8007fb0:	0800859f 	.word	0x0800859f
 8007fb4:	0800859f 	.word	0x0800859f
 8007fb8:	0800859f 	.word	0x0800859f
 8007fbc:	0800859f 	.word	0x0800859f
 8007fc0:	0800859f 	.word	0x0800859f
 8007fc4:	0800859f 	.word	0x0800859f
 8007fc8:	080084ed 	.word	0x080084ed
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8007fcc:	f7fb fdd8 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8007fd0:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d044      	beq.n	8008064 <USART_SetConfig+0x5a4>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d03e      	beq.n	8008060 <USART_SetConfig+0x5a0>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d038      	beq.n	800805c <USART_SetConfig+0x59c>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d032      	beq.n	8008058 <USART_SetConfig+0x598>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff6:	2b04      	cmp	r3, #4
 8007ff8:	d02c      	beq.n	8008054 <USART_SetConfig+0x594>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	2b05      	cmp	r3, #5
 8008000:	d026      	beq.n	8008050 <USART_SetConfig+0x590>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008006:	2b06      	cmp	r3, #6
 8008008:	d020      	beq.n	800804c <USART_SetConfig+0x58c>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800e:	2b07      	cmp	r3, #7
 8008010:	d01a      	beq.n	8008048 <USART_SetConfig+0x588>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008016:	2b08      	cmp	r3, #8
 8008018:	d014      	beq.n	8008044 <USART_SetConfig+0x584>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801e:	2b09      	cmp	r3, #9
 8008020:	d00e      	beq.n	8008040 <USART_SetConfig+0x580>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	2b0a      	cmp	r3, #10
 8008028:	d008      	beq.n	800803c <USART_SetConfig+0x57c>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802e:	2b0b      	cmp	r3, #11
 8008030:	d102      	bne.n	8008038 <USART_SetConfig+0x578>
 8008032:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008036:	e016      	b.n	8008066 <USART_SetConfig+0x5a6>
 8008038:	2301      	movs	r3, #1
 800803a:	e014      	b.n	8008066 <USART_SetConfig+0x5a6>
 800803c:	2380      	movs	r3, #128	; 0x80
 800803e:	e012      	b.n	8008066 <USART_SetConfig+0x5a6>
 8008040:	2340      	movs	r3, #64	; 0x40
 8008042:	e010      	b.n	8008066 <USART_SetConfig+0x5a6>
 8008044:	2320      	movs	r3, #32
 8008046:	e00e      	b.n	8008066 <USART_SetConfig+0x5a6>
 8008048:	2310      	movs	r3, #16
 800804a:	e00c      	b.n	8008066 <USART_SetConfig+0x5a6>
 800804c:	230c      	movs	r3, #12
 800804e:	e00a      	b.n	8008066 <USART_SetConfig+0x5a6>
 8008050:	230a      	movs	r3, #10
 8008052:	e008      	b.n	8008066 <USART_SetConfig+0x5a6>
 8008054:	2308      	movs	r3, #8
 8008056:	e006      	b.n	8008066 <USART_SetConfig+0x5a6>
 8008058:	2306      	movs	r3, #6
 800805a:	e004      	b.n	8008066 <USART_SetConfig+0x5a6>
 800805c:	2304      	movs	r3, #4
 800805e:	e002      	b.n	8008066 <USART_SetConfig+0x5a6>
 8008060:	2302      	movs	r3, #2
 8008062:	e000      	b.n	8008066 <USART_SetConfig+0x5a6>
 8008064:	2301      	movs	r3, #1
 8008066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008068:	fbb2 f3f3 	udiv	r3, r2, r3
 800806c:	005a      	lsls	r2, r3, #1
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	085b      	lsrs	r3, r3, #1
 8008074:	441a      	add	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	fbb2 f3f3 	udiv	r3, r2, r3
 800807e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008080:	e291      	b.n	80085a6 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8008082:	f7fb fd93 	bl	8003bac <HAL_RCC_GetPCLK2Freq>
 8008086:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	2b00      	cmp	r3, #0
 800808e:	d049      	beq.n	8008124 <USART_SetConfig+0x664>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	2b01      	cmp	r3, #1
 8008096:	d043      	beq.n	8008120 <USART_SetConfig+0x660>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	2b02      	cmp	r3, #2
 800809e:	d03d      	beq.n	800811c <USART_SetConfig+0x65c>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d032      	beq.n	800810e <USART_SetConfig+0x64e>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	2b04      	cmp	r3, #4
 80080ae:	d02c      	beq.n	800810a <USART_SetConfig+0x64a>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	2b05      	cmp	r3, #5
 80080b6:	d026      	beq.n	8008106 <USART_SetConfig+0x646>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	2b06      	cmp	r3, #6
 80080be:	d020      	beq.n	8008102 <USART_SetConfig+0x642>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	2b07      	cmp	r3, #7
 80080c6:	d01a      	beq.n	80080fe <USART_SetConfig+0x63e>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080cc:	2b08      	cmp	r3, #8
 80080ce:	d014      	beq.n	80080fa <USART_SetConfig+0x63a>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	2b09      	cmp	r3, #9
 80080d6:	d00e      	beq.n	80080f6 <USART_SetConfig+0x636>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	2b0a      	cmp	r3, #10
 80080de:	d008      	beq.n	80080f2 <USART_SetConfig+0x632>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e4:	2b0b      	cmp	r3, #11
 80080e6:	d102      	bne.n	80080ee <USART_SetConfig+0x62e>
 80080e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080ec:	e01b      	b.n	8008126 <USART_SetConfig+0x666>
 80080ee:	2301      	movs	r3, #1
 80080f0:	e019      	b.n	8008126 <USART_SetConfig+0x666>
 80080f2:	2380      	movs	r3, #128	; 0x80
 80080f4:	e017      	b.n	8008126 <USART_SetConfig+0x666>
 80080f6:	2340      	movs	r3, #64	; 0x40
 80080f8:	e015      	b.n	8008126 <USART_SetConfig+0x666>
 80080fa:	2320      	movs	r3, #32
 80080fc:	e013      	b.n	8008126 <USART_SetConfig+0x666>
 80080fe:	2310      	movs	r3, #16
 8008100:	e011      	b.n	8008126 <USART_SetConfig+0x666>
 8008102:	230c      	movs	r3, #12
 8008104:	e00f      	b.n	8008126 <USART_SetConfig+0x666>
 8008106:	230a      	movs	r3, #10
 8008108:	e00d      	b.n	8008126 <USART_SetConfig+0x666>
 800810a:	2308      	movs	r3, #8
 800810c:	e00b      	b.n	8008126 <USART_SetConfig+0x666>
 800810e:	2306      	movs	r3, #6
 8008110:	e009      	b.n	8008126 <USART_SetConfig+0x666>
 8008112:	bf00      	nop
 8008114:	40011c00 	.word	0x40011c00
 8008118:	58024400 	.word	0x58024400
 800811c:	2304      	movs	r3, #4
 800811e:	e002      	b.n	8008126 <USART_SetConfig+0x666>
 8008120:	2302      	movs	r3, #2
 8008122:	e000      	b.n	8008126 <USART_SetConfig+0x666>
 8008124:	2301      	movs	r3, #1
 8008126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008128:	fbb2 f3f3 	udiv	r3, r2, r3
 800812c:	005a      	lsls	r2, r3, #1
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	085b      	lsrs	r3, r3, #1
 8008134:	441a      	add	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	fbb2 f3f3 	udiv	r3, r2, r3
 800813e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008140:	e231      	b.n	80085a6 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008142:	f107 0318 	add.w	r3, r7, #24
 8008146:	4618      	mov	r0, r3
 8008148:	f7fd fbce 	bl	80058e8 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800814c:	69fa      	ldr	r2, [r7, #28]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008152:	2b00      	cmp	r3, #0
 8008154:	d044      	beq.n	80081e0 <USART_SetConfig+0x720>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	2b01      	cmp	r3, #1
 800815c:	d03e      	beq.n	80081dc <USART_SetConfig+0x71c>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008162:	2b02      	cmp	r3, #2
 8008164:	d038      	beq.n	80081d8 <USART_SetConfig+0x718>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	2b03      	cmp	r3, #3
 800816c:	d032      	beq.n	80081d4 <USART_SetConfig+0x714>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008172:	2b04      	cmp	r3, #4
 8008174:	d02c      	beq.n	80081d0 <USART_SetConfig+0x710>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817a:	2b05      	cmp	r3, #5
 800817c:	d026      	beq.n	80081cc <USART_SetConfig+0x70c>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	2b06      	cmp	r3, #6
 8008184:	d020      	beq.n	80081c8 <USART_SetConfig+0x708>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818a:	2b07      	cmp	r3, #7
 800818c:	d01a      	beq.n	80081c4 <USART_SetConfig+0x704>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	2b08      	cmp	r3, #8
 8008194:	d014      	beq.n	80081c0 <USART_SetConfig+0x700>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	2b09      	cmp	r3, #9
 800819c:	d00e      	beq.n	80081bc <USART_SetConfig+0x6fc>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	2b0a      	cmp	r3, #10
 80081a4:	d008      	beq.n	80081b8 <USART_SetConfig+0x6f8>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	2b0b      	cmp	r3, #11
 80081ac:	d102      	bne.n	80081b4 <USART_SetConfig+0x6f4>
 80081ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081b2:	e016      	b.n	80081e2 <USART_SetConfig+0x722>
 80081b4:	2301      	movs	r3, #1
 80081b6:	e014      	b.n	80081e2 <USART_SetConfig+0x722>
 80081b8:	2380      	movs	r3, #128	; 0x80
 80081ba:	e012      	b.n	80081e2 <USART_SetConfig+0x722>
 80081bc:	2340      	movs	r3, #64	; 0x40
 80081be:	e010      	b.n	80081e2 <USART_SetConfig+0x722>
 80081c0:	2320      	movs	r3, #32
 80081c2:	e00e      	b.n	80081e2 <USART_SetConfig+0x722>
 80081c4:	2310      	movs	r3, #16
 80081c6:	e00c      	b.n	80081e2 <USART_SetConfig+0x722>
 80081c8:	230c      	movs	r3, #12
 80081ca:	e00a      	b.n	80081e2 <USART_SetConfig+0x722>
 80081cc:	230a      	movs	r3, #10
 80081ce:	e008      	b.n	80081e2 <USART_SetConfig+0x722>
 80081d0:	2308      	movs	r3, #8
 80081d2:	e006      	b.n	80081e2 <USART_SetConfig+0x722>
 80081d4:	2306      	movs	r3, #6
 80081d6:	e004      	b.n	80081e2 <USART_SetConfig+0x722>
 80081d8:	2304      	movs	r3, #4
 80081da:	e002      	b.n	80081e2 <USART_SetConfig+0x722>
 80081dc:	2302      	movs	r3, #2
 80081de:	e000      	b.n	80081e2 <USART_SetConfig+0x722>
 80081e0:	2301      	movs	r3, #1
 80081e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e6:	005a      	lsls	r2, r3, #1
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	085b      	lsrs	r3, r3, #1
 80081ee:	441a      	add	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f8:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 80081fa:	e1d4      	b.n	80085a6 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081fc:	f107 030c 	add.w	r3, r7, #12
 8008200:	4618      	mov	r0, r3
 8008202:	f7fd fcc5 	bl	8005b90 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820c:	2b00      	cmp	r3, #0
 800820e:	d044      	beq.n	800829a <USART_SetConfig+0x7da>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008214:	2b01      	cmp	r3, #1
 8008216:	d03e      	beq.n	8008296 <USART_SetConfig+0x7d6>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821c:	2b02      	cmp	r3, #2
 800821e:	d038      	beq.n	8008292 <USART_SetConfig+0x7d2>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008224:	2b03      	cmp	r3, #3
 8008226:	d032      	beq.n	800828e <USART_SetConfig+0x7ce>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822c:	2b04      	cmp	r3, #4
 800822e:	d02c      	beq.n	800828a <USART_SetConfig+0x7ca>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008234:	2b05      	cmp	r3, #5
 8008236:	d026      	beq.n	8008286 <USART_SetConfig+0x7c6>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	2b06      	cmp	r3, #6
 800823e:	d020      	beq.n	8008282 <USART_SetConfig+0x7c2>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	2b07      	cmp	r3, #7
 8008246:	d01a      	beq.n	800827e <USART_SetConfig+0x7be>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824c:	2b08      	cmp	r3, #8
 800824e:	d014      	beq.n	800827a <USART_SetConfig+0x7ba>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008254:	2b09      	cmp	r3, #9
 8008256:	d00e      	beq.n	8008276 <USART_SetConfig+0x7b6>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825c:	2b0a      	cmp	r3, #10
 800825e:	d008      	beq.n	8008272 <USART_SetConfig+0x7b2>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008264:	2b0b      	cmp	r3, #11
 8008266:	d102      	bne.n	800826e <USART_SetConfig+0x7ae>
 8008268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800826c:	e016      	b.n	800829c <USART_SetConfig+0x7dc>
 800826e:	2301      	movs	r3, #1
 8008270:	e014      	b.n	800829c <USART_SetConfig+0x7dc>
 8008272:	2380      	movs	r3, #128	; 0x80
 8008274:	e012      	b.n	800829c <USART_SetConfig+0x7dc>
 8008276:	2340      	movs	r3, #64	; 0x40
 8008278:	e010      	b.n	800829c <USART_SetConfig+0x7dc>
 800827a:	2320      	movs	r3, #32
 800827c:	e00e      	b.n	800829c <USART_SetConfig+0x7dc>
 800827e:	2310      	movs	r3, #16
 8008280:	e00c      	b.n	800829c <USART_SetConfig+0x7dc>
 8008282:	230c      	movs	r3, #12
 8008284:	e00a      	b.n	800829c <USART_SetConfig+0x7dc>
 8008286:	230a      	movs	r3, #10
 8008288:	e008      	b.n	800829c <USART_SetConfig+0x7dc>
 800828a:	2308      	movs	r3, #8
 800828c:	e006      	b.n	800829c <USART_SetConfig+0x7dc>
 800828e:	2306      	movs	r3, #6
 8008290:	e004      	b.n	800829c <USART_SetConfig+0x7dc>
 8008292:	2304      	movs	r3, #4
 8008294:	e002      	b.n	800829c <USART_SetConfig+0x7dc>
 8008296:	2302      	movs	r3, #2
 8008298:	e000      	b.n	800829c <USART_SetConfig+0x7dc>
 800829a:	2301      	movs	r3, #1
 800829c:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a0:	005a      	lsls	r2, r3, #1
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	085b      	lsrs	r3, r3, #1
 80082a8:	441a      	add	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80082b2:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 80082b4:	e177      	b.n	80085a6 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082b6:	4b8a      	ldr	r3, [pc, #552]	; (80084e0 <USART_SetConfig+0xa20>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0320 	and.w	r3, r3, #32
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d05d      	beq.n	800837e <USART_SetConfig+0x8be>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 80082c2:	4b87      	ldr	r3, [pc, #540]	; (80084e0 <USART_SetConfig+0xa20>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	08db      	lsrs	r3, r3, #3
 80082c8:	f003 0303 	and.w	r3, r3, #3
 80082cc:	4a85      	ldr	r2, [pc, #532]	; (80084e4 <USART_SetConfig+0xa24>)
 80082ce:	40da      	lsrs	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d044      	beq.n	8008362 <USART_SetConfig+0x8a2>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d03e      	beq.n	800835e <USART_SetConfig+0x89e>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d038      	beq.n	800835a <USART_SetConfig+0x89a>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	d032      	beq.n	8008356 <USART_SetConfig+0x896>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	2b04      	cmp	r3, #4
 80082f6:	d02c      	beq.n	8008352 <USART_SetConfig+0x892>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fc:	2b05      	cmp	r3, #5
 80082fe:	d026      	beq.n	800834e <USART_SetConfig+0x88e>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008304:	2b06      	cmp	r3, #6
 8008306:	d020      	beq.n	800834a <USART_SetConfig+0x88a>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830c:	2b07      	cmp	r3, #7
 800830e:	d01a      	beq.n	8008346 <USART_SetConfig+0x886>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	2b08      	cmp	r3, #8
 8008316:	d014      	beq.n	8008342 <USART_SetConfig+0x882>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831c:	2b09      	cmp	r3, #9
 800831e:	d00e      	beq.n	800833e <USART_SetConfig+0x87e>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008324:	2b0a      	cmp	r3, #10
 8008326:	d008      	beq.n	800833a <USART_SetConfig+0x87a>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832c:	2b0b      	cmp	r3, #11
 800832e:	d102      	bne.n	8008336 <USART_SetConfig+0x876>
 8008330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008334:	e016      	b.n	8008364 <USART_SetConfig+0x8a4>
 8008336:	2301      	movs	r3, #1
 8008338:	e014      	b.n	8008364 <USART_SetConfig+0x8a4>
 800833a:	2380      	movs	r3, #128	; 0x80
 800833c:	e012      	b.n	8008364 <USART_SetConfig+0x8a4>
 800833e:	2340      	movs	r3, #64	; 0x40
 8008340:	e010      	b.n	8008364 <USART_SetConfig+0x8a4>
 8008342:	2320      	movs	r3, #32
 8008344:	e00e      	b.n	8008364 <USART_SetConfig+0x8a4>
 8008346:	2310      	movs	r3, #16
 8008348:	e00c      	b.n	8008364 <USART_SetConfig+0x8a4>
 800834a:	230c      	movs	r3, #12
 800834c:	e00a      	b.n	8008364 <USART_SetConfig+0x8a4>
 800834e:	230a      	movs	r3, #10
 8008350:	e008      	b.n	8008364 <USART_SetConfig+0x8a4>
 8008352:	2308      	movs	r3, #8
 8008354:	e006      	b.n	8008364 <USART_SetConfig+0x8a4>
 8008356:	2306      	movs	r3, #6
 8008358:	e004      	b.n	8008364 <USART_SetConfig+0x8a4>
 800835a:	2304      	movs	r3, #4
 800835c:	e002      	b.n	8008364 <USART_SetConfig+0x8a4>
 800835e:	2302      	movs	r3, #2
 8008360:	e000      	b.n	8008364 <USART_SetConfig+0x8a4>
 8008362:	2301      	movs	r3, #1
 8008364:	fbb2 f3f3 	udiv	r3, r2, r3
 8008368:	005a      	lsls	r2, r3, #1
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	085b      	lsrs	r3, r3, #1
 8008370:	441a      	add	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	fbb2 f3f3 	udiv	r3, r2, r3
 800837a:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800837c:	e113      	b.n	80085a6 <USART_SetConfig+0xae6>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008382:	2b00      	cmp	r3, #0
 8008384:	d044      	beq.n	8008410 <USART_SetConfig+0x950>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	2b01      	cmp	r3, #1
 800838c:	d03e      	beq.n	800840c <USART_SetConfig+0x94c>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008392:	2b02      	cmp	r3, #2
 8008394:	d038      	beq.n	8008408 <USART_SetConfig+0x948>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	2b03      	cmp	r3, #3
 800839c:	d032      	beq.n	8008404 <USART_SetConfig+0x944>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d02c      	beq.n	8008400 <USART_SetConfig+0x940>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083aa:	2b05      	cmp	r3, #5
 80083ac:	d026      	beq.n	80083fc <USART_SetConfig+0x93c>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	2b06      	cmp	r3, #6
 80083b4:	d020      	beq.n	80083f8 <USART_SetConfig+0x938>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ba:	2b07      	cmp	r3, #7
 80083bc:	d01a      	beq.n	80083f4 <USART_SetConfig+0x934>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c2:	2b08      	cmp	r3, #8
 80083c4:	d014      	beq.n	80083f0 <USART_SetConfig+0x930>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	2b09      	cmp	r3, #9
 80083cc:	d00e      	beq.n	80083ec <USART_SetConfig+0x92c>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	2b0a      	cmp	r3, #10
 80083d4:	d008      	beq.n	80083e8 <USART_SetConfig+0x928>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	2b0b      	cmp	r3, #11
 80083dc:	d102      	bne.n	80083e4 <USART_SetConfig+0x924>
 80083de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083e2:	e016      	b.n	8008412 <USART_SetConfig+0x952>
 80083e4:	2301      	movs	r3, #1
 80083e6:	e014      	b.n	8008412 <USART_SetConfig+0x952>
 80083e8:	2380      	movs	r3, #128	; 0x80
 80083ea:	e012      	b.n	8008412 <USART_SetConfig+0x952>
 80083ec:	2340      	movs	r3, #64	; 0x40
 80083ee:	e010      	b.n	8008412 <USART_SetConfig+0x952>
 80083f0:	2320      	movs	r3, #32
 80083f2:	e00e      	b.n	8008412 <USART_SetConfig+0x952>
 80083f4:	2310      	movs	r3, #16
 80083f6:	e00c      	b.n	8008412 <USART_SetConfig+0x952>
 80083f8:	230c      	movs	r3, #12
 80083fa:	e00a      	b.n	8008412 <USART_SetConfig+0x952>
 80083fc:	230a      	movs	r3, #10
 80083fe:	e008      	b.n	8008412 <USART_SetConfig+0x952>
 8008400:	2308      	movs	r3, #8
 8008402:	e006      	b.n	8008412 <USART_SetConfig+0x952>
 8008404:	2306      	movs	r3, #6
 8008406:	e004      	b.n	8008412 <USART_SetConfig+0x952>
 8008408:	2304      	movs	r3, #4
 800840a:	e002      	b.n	8008412 <USART_SetConfig+0x952>
 800840c:	2302      	movs	r3, #2
 800840e:	e000      	b.n	8008412 <USART_SetConfig+0x952>
 8008410:	2301      	movs	r3, #1
 8008412:	4a34      	ldr	r2, [pc, #208]	; (80084e4 <USART_SetConfig+0xa24>)
 8008414:	fbb2 f3f3 	udiv	r3, r2, r3
 8008418:	005a      	lsls	r2, r3, #1
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	085b      	lsrs	r3, r3, #1
 8008420:	441a      	add	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	fbb2 f3f3 	udiv	r3, r2, r3
 800842a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800842c:	e0bb      	b.n	80085a6 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008432:	2b00      	cmp	r3, #0
 8008434:	d044      	beq.n	80084c0 <USART_SetConfig+0xa00>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843a:	2b01      	cmp	r3, #1
 800843c:	d03e      	beq.n	80084bc <USART_SetConfig+0x9fc>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008442:	2b02      	cmp	r3, #2
 8008444:	d038      	beq.n	80084b8 <USART_SetConfig+0x9f8>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844a:	2b03      	cmp	r3, #3
 800844c:	d032      	beq.n	80084b4 <USART_SetConfig+0x9f4>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008452:	2b04      	cmp	r3, #4
 8008454:	d02c      	beq.n	80084b0 <USART_SetConfig+0x9f0>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845a:	2b05      	cmp	r3, #5
 800845c:	d026      	beq.n	80084ac <USART_SetConfig+0x9ec>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008462:	2b06      	cmp	r3, #6
 8008464:	d020      	beq.n	80084a8 <USART_SetConfig+0x9e8>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	2b07      	cmp	r3, #7
 800846c:	d01a      	beq.n	80084a4 <USART_SetConfig+0x9e4>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008472:	2b08      	cmp	r3, #8
 8008474:	d014      	beq.n	80084a0 <USART_SetConfig+0x9e0>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847a:	2b09      	cmp	r3, #9
 800847c:	d00e      	beq.n	800849c <USART_SetConfig+0x9dc>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008482:	2b0a      	cmp	r3, #10
 8008484:	d008      	beq.n	8008498 <USART_SetConfig+0x9d8>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848a:	2b0b      	cmp	r3, #11
 800848c:	d102      	bne.n	8008494 <USART_SetConfig+0x9d4>
 800848e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008492:	e016      	b.n	80084c2 <USART_SetConfig+0xa02>
 8008494:	2301      	movs	r3, #1
 8008496:	e014      	b.n	80084c2 <USART_SetConfig+0xa02>
 8008498:	2380      	movs	r3, #128	; 0x80
 800849a:	e012      	b.n	80084c2 <USART_SetConfig+0xa02>
 800849c:	2340      	movs	r3, #64	; 0x40
 800849e:	e010      	b.n	80084c2 <USART_SetConfig+0xa02>
 80084a0:	2320      	movs	r3, #32
 80084a2:	e00e      	b.n	80084c2 <USART_SetConfig+0xa02>
 80084a4:	2310      	movs	r3, #16
 80084a6:	e00c      	b.n	80084c2 <USART_SetConfig+0xa02>
 80084a8:	230c      	movs	r3, #12
 80084aa:	e00a      	b.n	80084c2 <USART_SetConfig+0xa02>
 80084ac:	230a      	movs	r3, #10
 80084ae:	e008      	b.n	80084c2 <USART_SetConfig+0xa02>
 80084b0:	2308      	movs	r3, #8
 80084b2:	e006      	b.n	80084c2 <USART_SetConfig+0xa02>
 80084b4:	2306      	movs	r3, #6
 80084b6:	e004      	b.n	80084c2 <USART_SetConfig+0xa02>
 80084b8:	2304      	movs	r3, #4
 80084ba:	e002      	b.n	80084c2 <USART_SetConfig+0xa02>
 80084bc:	2302      	movs	r3, #2
 80084be:	e000      	b.n	80084c2 <USART_SetConfig+0xa02>
 80084c0:	2301      	movs	r3, #1
 80084c2:	4a09      	ldr	r2, [pc, #36]	; (80084e8 <USART_SetConfig+0xa28>)
 80084c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c8:	005a      	lsls	r2, r3, #1
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	085b      	lsrs	r3, r3, #1
 80084d0:	441a      	add	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80084dc:	e063      	b.n	80085a6 <USART_SetConfig+0xae6>
 80084de:	bf00      	nop
 80084e0:	58024400 	.word	0x58024400
 80084e4:	03d09000 	.word	0x03d09000
 80084e8:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d044      	beq.n	800857e <USART_SetConfig+0xabe>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d03e      	beq.n	800857a <USART_SetConfig+0xaba>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008500:	2b02      	cmp	r3, #2
 8008502:	d038      	beq.n	8008576 <USART_SetConfig+0xab6>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008508:	2b03      	cmp	r3, #3
 800850a:	d032      	beq.n	8008572 <USART_SetConfig+0xab2>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008510:	2b04      	cmp	r3, #4
 8008512:	d02c      	beq.n	800856e <USART_SetConfig+0xaae>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008518:	2b05      	cmp	r3, #5
 800851a:	d026      	beq.n	800856a <USART_SetConfig+0xaaa>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008520:	2b06      	cmp	r3, #6
 8008522:	d020      	beq.n	8008566 <USART_SetConfig+0xaa6>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008528:	2b07      	cmp	r3, #7
 800852a:	d01a      	beq.n	8008562 <USART_SetConfig+0xaa2>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008530:	2b08      	cmp	r3, #8
 8008532:	d014      	beq.n	800855e <USART_SetConfig+0xa9e>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	2b09      	cmp	r3, #9
 800853a:	d00e      	beq.n	800855a <USART_SetConfig+0xa9a>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008540:	2b0a      	cmp	r3, #10
 8008542:	d008      	beq.n	8008556 <USART_SetConfig+0xa96>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	2b0b      	cmp	r3, #11
 800854a:	d102      	bne.n	8008552 <USART_SetConfig+0xa92>
 800854c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008550:	e016      	b.n	8008580 <USART_SetConfig+0xac0>
 8008552:	2301      	movs	r3, #1
 8008554:	e014      	b.n	8008580 <USART_SetConfig+0xac0>
 8008556:	2380      	movs	r3, #128	; 0x80
 8008558:	e012      	b.n	8008580 <USART_SetConfig+0xac0>
 800855a:	2340      	movs	r3, #64	; 0x40
 800855c:	e010      	b.n	8008580 <USART_SetConfig+0xac0>
 800855e:	2320      	movs	r3, #32
 8008560:	e00e      	b.n	8008580 <USART_SetConfig+0xac0>
 8008562:	2310      	movs	r3, #16
 8008564:	e00c      	b.n	8008580 <USART_SetConfig+0xac0>
 8008566:	230c      	movs	r3, #12
 8008568:	e00a      	b.n	8008580 <USART_SetConfig+0xac0>
 800856a:	230a      	movs	r3, #10
 800856c:	e008      	b.n	8008580 <USART_SetConfig+0xac0>
 800856e:	2308      	movs	r3, #8
 8008570:	e006      	b.n	8008580 <USART_SetConfig+0xac0>
 8008572:	2306      	movs	r3, #6
 8008574:	e004      	b.n	8008580 <USART_SetConfig+0xac0>
 8008576:	2304      	movs	r3, #4
 8008578:	e002      	b.n	8008580 <USART_SetConfig+0xac0>
 800857a:	2302      	movs	r3, #2
 800857c:	e000      	b.n	8008580 <USART_SetConfig+0xac0>
 800857e:	2301      	movs	r3, #1
 8008580:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008584:	fbb2 f3f3 	udiv	r3, r2, r3
 8008588:	005a      	lsls	r2, r3, #1
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	085b      	lsrs	r3, r3, #1
 8008590:	441a      	add	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	fbb2 f3f3 	udiv	r3, r2, r3
 800859a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800859c:	e003      	b.n	80085a6 <USART_SetConfig+0xae6>
    default:
      ret = HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      break;
 80085a4:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	2b0f      	cmp	r3, #15
 80085aa:	d916      	bls.n	80085da <USART_SetConfig+0xb1a>
 80085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085b2:	d212      	bcs.n	80085da <USART_SetConfig+0xb1a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	f023 030f 	bic.w	r3, r3, #15
 80085bc:	84fb      	strh	r3, [r7, #38]	; 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c0:	085b      	lsrs	r3, r3, #1
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	f003 0307 	and.w	r3, r3, #7
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085cc:	4313      	orrs	r3, r2
 80085ce:	84fb      	strh	r3, [r7, #38]	; 0x26
    husart->Instance->BRR = brrtemp;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80085d6:	60da      	str	r2, [r3, #12]
 80085d8:	e002      	b.n	80085e0 <USART_SetConfig+0xb20>
  }
  else
  {
    ret = HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 80085f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3738      	adds	r7, #56	; 0x38
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af02      	add	r7, sp, #8
 800860a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008612:	f7f8 fd8f 	bl	8001134 <HAL_GetTick>
 8008616:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0308 	and.w	r3, r3, #8
 8008622:	2b08      	cmp	r3, #8
 8008624:	d10e      	bne.n	8008644 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8008626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7ff fa0d 	bl	8007a54 <USART_WaitOnFlagUntilTimeout>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d001      	beq.n	8008644 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008640:	2303      	movs	r3, #3
 8008642:	e01e      	b.n	8008682 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0304 	and.w	r3, r3, #4
 800864e:	2b04      	cmp	r3, #4
 8008650:	d10e      	bne.n	8008670 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8008652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7ff f9f7 	bl	8007a54 <USART_WaitOnFlagUntilTimeout>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e008      	b.n	8008682 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800868a:	b480      	push	{r7}
 800868c:	b085      	sub	sp, #20
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008698:	2b01      	cmp	r3, #1
 800869a:	d101      	bne.n	80086a0 <HAL_USARTEx_DisableFifoMode+0x16>
 800869c:	2302      	movs	r3, #2
 800869e:	e027      	b.n	80086f0 <HAL_USARTEx_DisableFifoMode+0x66>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2202      	movs	r2, #2
 80086ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f022 0201 	bic.w	r2, r2, #1
 80086c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80086ce:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800870c:	2b01      	cmp	r3, #1
 800870e:	d101      	bne.n	8008714 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8008710:	2302      	movs	r3, #2
 8008712:	e02d      	b.n	8008770 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2202      	movs	r2, #2
 8008720:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f022 0201 	bic.w	r2, r2, #1
 800873a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	430a      	orrs	r2, r1
 800874e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f84f 	bl	80087f4 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008788:	2b01      	cmp	r3, #1
 800878a:	d101      	bne.n	8008790 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800878c:	2302      	movs	r3, #2
 800878e:	e02d      	b.n	80087ec <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2202      	movs	r2, #2
 800879c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f022 0201 	bic.w	r2, r2, #1
 80087b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	430a      	orrs	r2, r1
 80087ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f811 	bl	80087f4 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008800:	2b00      	cmp	r3, #0
 8008802:	d106      	bne.n	8008812 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2201      	movs	r2, #1
 800880e:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008810:	e02f      	b.n	8008872 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008812:	2310      	movs	r3, #16
 8008814:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008816:	2310      	movs	r3, #16
 8008818:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8008820:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8008822:	b2db      	uxtb	r3, r3
 8008824:	f003 0307 	and.w	r3, r3, #7
 8008828:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8008830:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8008832:	b2db      	uxtb	r3, r3
 8008834:	f003 0307 	and.w	r3, r3, #7
 8008838:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800883a:	7bbb      	ldrb	r3, [r7, #14]
 800883c:	7b3a      	ldrb	r2, [r7, #12]
 800883e:	4910      	ldr	r1, [pc, #64]	; (8008880 <USARTEx_SetNbDataToProcess+0x8c>)
 8008840:	5c8a      	ldrb	r2, [r1, r2]
 8008842:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 8008846:	7b3a      	ldrb	r2, [r7, #12]
 8008848:	490e      	ldr	r1, [pc, #56]	; (8008884 <USARTEx_SetNbDataToProcess+0x90>)
 800884a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800884c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008850:	b29a      	uxth	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008856:	7bfb      	ldrb	r3, [r7, #15]
 8008858:	7b7a      	ldrb	r2, [r7, #13]
 800885a:	4909      	ldr	r1, [pc, #36]	; (8008880 <USARTEx_SetNbDataToProcess+0x8c>)
 800885c:	5c8a      	ldrb	r2, [r1, r2]
 800885e:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 8008862:	7b7a      	ldrb	r2, [r7, #13]
 8008864:	4907      	ldr	r1, [pc, #28]	; (8008884 <USARTEx_SetNbDataToProcess+0x90>)
 8008866:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008868:	fb93 f3f2 	sdiv	r3, r3, r2
 800886c:	b29a      	uxth	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 8008872:	bf00      	nop
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	0800c6a8 	.word	0x0800c6a8
 8008884:	0800c6b0 	.word	0x0800c6b0

08008888 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008888:	b084      	sub	sp, #16
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	f107 001c 	add.w	r0, r7, #28
 8008896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	2b01      	cmp	r3, #1
 800889e:	d120      	bne.n	80088e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68da      	ldr	r2, [r3, #12]
 80088b0:	4b2a      	ldr	r3, [pc, #168]	; (800895c <USB_CoreInit+0xd4>)
 80088b2:	4013      	ands	r3, r2
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80088c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d105      	bne.n	80088d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f001 faf8 	bl	8009ecc <USB_CoreReset>
 80088dc:	4603      	mov	r3, r0
 80088de:	73fb      	strb	r3, [r7, #15]
 80088e0:	e01a      	b.n	8008918 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 faec 	bl	8009ecc <USB_CoreReset>
 80088f4:	4603      	mov	r3, r0
 80088f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80088f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d106      	bne.n	800890c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008902:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	639a      	str	r2, [r3, #56]	; 0x38
 800890a:	e005      	b.n	8008918 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008910:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891a:	2b01      	cmp	r3, #1
 800891c:	d116      	bne.n	800894c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008922:	b29a      	uxth	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800892c:	4b0c      	ldr	r3, [pc, #48]	; (8008960 <USB_CoreInit+0xd8>)
 800892e:	4313      	orrs	r3, r2
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f043 0206 	orr.w	r2, r3, #6
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f043 0220 	orr.w	r2, r3, #32
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800894c:	7bfb      	ldrb	r3, [r7, #15]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008958:	b004      	add	sp, #16
 800895a:	4770      	bx	lr
 800895c:	ffbdffbf 	.word	0xffbdffbf
 8008960:	03ee0000 	.word	0x03ee0000

08008964 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008964:	b480      	push	{r7}
 8008966:	b087      	sub	sp, #28
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	4613      	mov	r3, r2
 8008970:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008972:	79fb      	ldrb	r3, [r7, #7]
 8008974:	2b02      	cmp	r3, #2
 8008976:	d165      	bne.n	8008a44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	4a41      	ldr	r2, [pc, #260]	; (8008a80 <USB_SetTurnaroundTime+0x11c>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d906      	bls.n	800898e <USB_SetTurnaroundTime+0x2a>
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	4a40      	ldr	r2, [pc, #256]	; (8008a84 <USB_SetTurnaroundTime+0x120>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d202      	bcs.n	800898e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008988:	230f      	movs	r3, #15
 800898a:	617b      	str	r3, [r7, #20]
 800898c:	e062      	b.n	8008a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	4a3c      	ldr	r2, [pc, #240]	; (8008a84 <USB_SetTurnaroundTime+0x120>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d306      	bcc.n	80089a4 <USB_SetTurnaroundTime+0x40>
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	4a3b      	ldr	r2, [pc, #236]	; (8008a88 <USB_SetTurnaroundTime+0x124>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d202      	bcs.n	80089a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800899e:	230e      	movs	r3, #14
 80089a0:	617b      	str	r3, [r7, #20]
 80089a2:	e057      	b.n	8008a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	4a38      	ldr	r2, [pc, #224]	; (8008a88 <USB_SetTurnaroundTime+0x124>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d306      	bcc.n	80089ba <USB_SetTurnaroundTime+0x56>
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	4a37      	ldr	r2, [pc, #220]	; (8008a8c <USB_SetTurnaroundTime+0x128>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d202      	bcs.n	80089ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80089b4:	230d      	movs	r3, #13
 80089b6:	617b      	str	r3, [r7, #20]
 80089b8:	e04c      	b.n	8008a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	4a33      	ldr	r2, [pc, #204]	; (8008a8c <USB_SetTurnaroundTime+0x128>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d306      	bcc.n	80089d0 <USB_SetTurnaroundTime+0x6c>
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	4a32      	ldr	r2, [pc, #200]	; (8008a90 <USB_SetTurnaroundTime+0x12c>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d802      	bhi.n	80089d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80089ca:	230c      	movs	r3, #12
 80089cc:	617b      	str	r3, [r7, #20]
 80089ce:	e041      	b.n	8008a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	4a2f      	ldr	r2, [pc, #188]	; (8008a90 <USB_SetTurnaroundTime+0x12c>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d906      	bls.n	80089e6 <USB_SetTurnaroundTime+0x82>
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	4a2e      	ldr	r2, [pc, #184]	; (8008a94 <USB_SetTurnaroundTime+0x130>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d802      	bhi.n	80089e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80089e0:	230b      	movs	r3, #11
 80089e2:	617b      	str	r3, [r7, #20]
 80089e4:	e036      	b.n	8008a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	4a2a      	ldr	r2, [pc, #168]	; (8008a94 <USB_SetTurnaroundTime+0x130>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d906      	bls.n	80089fc <USB_SetTurnaroundTime+0x98>
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	4a29      	ldr	r2, [pc, #164]	; (8008a98 <USB_SetTurnaroundTime+0x134>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d802      	bhi.n	80089fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80089f6:	230a      	movs	r3, #10
 80089f8:	617b      	str	r3, [r7, #20]
 80089fa:	e02b      	b.n	8008a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	4a26      	ldr	r2, [pc, #152]	; (8008a98 <USB_SetTurnaroundTime+0x134>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d906      	bls.n	8008a12 <USB_SetTurnaroundTime+0xae>
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	4a25      	ldr	r2, [pc, #148]	; (8008a9c <USB_SetTurnaroundTime+0x138>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d202      	bcs.n	8008a12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008a0c:	2309      	movs	r3, #9
 8008a0e:	617b      	str	r3, [r7, #20]
 8008a10:	e020      	b.n	8008a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	4a21      	ldr	r2, [pc, #132]	; (8008a9c <USB_SetTurnaroundTime+0x138>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d306      	bcc.n	8008a28 <USB_SetTurnaroundTime+0xc4>
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	4a20      	ldr	r2, [pc, #128]	; (8008aa0 <USB_SetTurnaroundTime+0x13c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d802      	bhi.n	8008a28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008a22:	2308      	movs	r3, #8
 8008a24:	617b      	str	r3, [r7, #20]
 8008a26:	e015      	b.n	8008a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	4a1d      	ldr	r2, [pc, #116]	; (8008aa0 <USB_SetTurnaroundTime+0x13c>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d906      	bls.n	8008a3e <USB_SetTurnaroundTime+0xda>
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	4a1c      	ldr	r2, [pc, #112]	; (8008aa4 <USB_SetTurnaroundTime+0x140>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d202      	bcs.n	8008a3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008a38:	2307      	movs	r3, #7
 8008a3a:	617b      	str	r3, [r7, #20]
 8008a3c:	e00a      	b.n	8008a54 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008a3e:	2306      	movs	r3, #6
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	e007      	b.n	8008a54 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008a44:	79fb      	ldrb	r3, [r7, #7]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d102      	bne.n	8008a50 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008a4a:	2309      	movs	r3, #9
 8008a4c:	617b      	str	r3, [r7, #20]
 8008a4e:	e001      	b.n	8008a54 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008a50:	2309      	movs	r3, #9
 8008a52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	68da      	ldr	r2, [r3, #12]
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	029b      	lsls	r3, r3, #10
 8008a68:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008a6c:	431a      	orrs	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	371c      	adds	r7, #28
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	00d8acbf 	.word	0x00d8acbf
 8008a84:	00e4e1c0 	.word	0x00e4e1c0
 8008a88:	00f42400 	.word	0x00f42400
 8008a8c:	01067380 	.word	0x01067380
 8008a90:	011a499f 	.word	0x011a499f
 8008a94:	01312cff 	.word	0x01312cff
 8008a98:	014ca43f 	.word	0x014ca43f
 8008a9c:	016e3600 	.word	0x016e3600
 8008aa0:	01a6ab1f 	.word	0x01a6ab1f
 8008aa4:	01e84800 	.word	0x01e84800

08008aa8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f043 0201 	orr.w	r2, r3, #1
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	370c      	adds	r7, #12
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b083      	sub	sp, #12
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f023 0201 	bic.w	r2, r3, #1
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008af8:	2300      	movs	r3, #0
 8008afa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b08:	78fb      	ldrb	r3, [r7, #3]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d115      	bne.n	8008b3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b1a:	2001      	movs	r0, #1
 8008b1c:	f7f8 fb16 	bl	800114c <HAL_Delay>
      ms++;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	3301      	adds	r3, #1
 8008b24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f001 f93f 	bl	8009daa <USB_GetMode>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d01e      	beq.n	8008b70 <USB_SetCurrentMode+0x84>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2b31      	cmp	r3, #49	; 0x31
 8008b36:	d9f0      	bls.n	8008b1a <USB_SetCurrentMode+0x2e>
 8008b38:	e01a      	b.n	8008b70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b3a:	78fb      	ldrb	r3, [r7, #3]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d115      	bne.n	8008b6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b4c:	2001      	movs	r0, #1
 8008b4e:	f7f8 fafd 	bl	800114c <HAL_Delay>
      ms++;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	3301      	adds	r3, #1
 8008b56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f001 f926 	bl	8009daa <USB_GetMode>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d005      	beq.n	8008b70 <USB_SetCurrentMode+0x84>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2b31      	cmp	r3, #49	; 0x31
 8008b68:	d9f0      	bls.n	8008b4c <USB_SetCurrentMode+0x60>
 8008b6a:	e001      	b.n	8008b70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e005      	b.n	8008b7c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b32      	cmp	r3, #50	; 0x32
 8008b74:	d101      	bne.n	8008b7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e000      	b.n	8008b7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b84:	b084      	sub	sp, #16
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b086      	sub	sp, #24
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b96:	2300      	movs	r3, #0
 8008b98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	613b      	str	r3, [r7, #16]
 8008ba2:	e009      	b.n	8008bb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	3340      	adds	r3, #64	; 0x40
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	2200      	movs	r2, #0
 8008bb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	613b      	str	r3, [r7, #16]
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	2b0e      	cmp	r3, #14
 8008bbc:	d9f2      	bls.n	8008ba4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d11c      	bne.n	8008bfe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bd2:	f043 0302 	orr.w	r3, r3, #2
 8008bd6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bdc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	e005      	b.n	8008c0a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c10:	461a      	mov	r2, r3
 8008c12:	2300      	movs	r3, #0
 8008c14:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c24:	461a      	mov	r2, r3
 8008c26:	680b      	ldr	r3, [r1, #0]
 8008c28:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d10c      	bne.n	8008c4a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d104      	bne.n	8008c40 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c36:	2100      	movs	r1, #0
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f965 	bl	8008f08 <USB_SetDevSpeed>
 8008c3e:	e008      	b.n	8008c52 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c40:	2101      	movs	r1, #1
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f960 	bl	8008f08 <USB_SetDevSpeed>
 8008c48:	e003      	b.n	8008c52 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c4a:	2103      	movs	r1, #3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f95b 	bl	8008f08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c52:	2110      	movs	r1, #16
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f8f3 	bl	8008e40 <USB_FlushTxFifo>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f91f 	bl	8008ea8 <USB_FlushRxFifo>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c86:	461a      	mov	r2, r3
 8008c88:	2300      	movs	r3, #0
 8008c8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c92:	461a      	mov	r2, r3
 8008c94:	2300      	movs	r3, #0
 8008c96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c98:	2300      	movs	r3, #0
 8008c9a:	613b      	str	r3, [r7, #16]
 8008c9c:	e043      	b.n	8008d26 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	015a      	lsls	r2, r3, #5
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cb4:	d118      	bne.n	8008ce8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10a      	bne.n	8008cd2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc8:	461a      	mov	r2, r3
 8008cca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cce:	6013      	str	r3, [r2, #0]
 8008cd0:	e013      	b.n	8008cfa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	015a      	lsls	r2, r3, #5
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cde:	461a      	mov	r2, r3
 8008ce0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ce4:	6013      	str	r3, [r2, #0]
 8008ce6:	e008      	b.n	8008cfa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d06:	461a      	mov	r2, r3
 8008d08:	2300      	movs	r3, #0
 8008d0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d18:	461a      	mov	r2, r3
 8008d1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	3301      	adds	r3, #1
 8008d24:	613b      	str	r3, [r7, #16]
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d3b7      	bcc.n	8008c9e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d2e:	2300      	movs	r3, #0
 8008d30:	613b      	str	r3, [r7, #16]
 8008d32:	e043      	b.n	8008dbc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d4a:	d118      	bne.n	8008d7e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10a      	bne.n	8008d68 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	015a      	lsls	r2, r3, #5
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	4413      	add	r3, r2
 8008d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5e:	461a      	mov	r2, r3
 8008d60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d64:	6013      	str	r3, [r2, #0]
 8008d66:	e013      	b.n	8008d90 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d74:	461a      	mov	r2, r3
 8008d76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d7a:	6013      	str	r3, [r2, #0]
 8008d7c:	e008      	b.n	8008d90 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	2300      	movs	r3, #0
 8008da0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dae:	461a      	mov	r2, r3
 8008db0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008db4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	3301      	adds	r3, #1
 8008dba:	613b      	str	r3, [r7, #16]
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	693a      	ldr	r2, [r7, #16]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d3b7      	bcc.n	8008d34 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dd6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008de4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d105      	bne.n	8008df8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	f043 0210 	orr.w	r2, r3, #16
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	699a      	ldr	r2, [r3, #24]
 8008dfc:	4b0e      	ldr	r3, [pc, #56]	; (8008e38 <USB_DevInit+0x2b4>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d005      	beq.n	8008e16 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	f043 0208 	orr.w	r2, r3, #8
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d105      	bne.n	8008e28 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	699a      	ldr	r2, [r3, #24]
 8008e20:	4b06      	ldr	r3, [pc, #24]	; (8008e3c <USB_DevInit+0x2b8>)
 8008e22:	4313      	orrs	r3, r2
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3718      	adds	r7, #24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e34:	b004      	add	sp, #16
 8008e36:	4770      	bx	lr
 8008e38:	803c3800 	.word	0x803c3800
 8008e3c:	40000004 	.word	0x40000004

08008e40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	3301      	adds	r3, #1
 8008e52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4a13      	ldr	r2, [pc, #76]	; (8008ea4 <USB_FlushTxFifo+0x64>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d901      	bls.n	8008e60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e01b      	b.n	8008e98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	daf2      	bge.n	8008e4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	019b      	lsls	r3, r3, #6
 8008e70:	f043 0220 	orr.w	r2, r3, #32
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	4a08      	ldr	r2, [pc, #32]	; (8008ea4 <USB_FlushTxFifo+0x64>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d901      	bls.n	8008e8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e006      	b.n	8008e98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	f003 0320 	and.w	r3, r3, #32
 8008e92:	2b20      	cmp	r3, #32
 8008e94:	d0f0      	beq.n	8008e78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3714      	adds	r7, #20
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	00030d40 	.word	0x00030d40

08008ea8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	4a11      	ldr	r2, [pc, #68]	; (8008f04 <USB_FlushRxFifo+0x5c>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d901      	bls.n	8008ec6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e018      	b.n	8008ef8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	daf2      	bge.n	8008eb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2210      	movs	r2, #16
 8008ed6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	3301      	adds	r3, #1
 8008edc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	4a08      	ldr	r2, [pc, #32]	; (8008f04 <USB_FlushRxFifo+0x5c>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d901      	bls.n	8008eea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e006      	b.n	8008ef8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	f003 0310 	and.w	r3, r3, #16
 8008ef2:	2b10      	cmp	r3, #16
 8008ef4:	d0f0      	beq.n	8008ed8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3714      	adds	r7, #20
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr
 8008f04:	00030d40 	.word	0x00030d40

08008f08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	78fb      	ldrb	r3, [r7, #3]
 8008f22:	68f9      	ldr	r1, [r7, #12]
 8008f24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b087      	sub	sp, #28
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f003 0306 	and.w	r3, r3, #6
 8008f52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d102      	bne.n	8008f60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	75fb      	strb	r3, [r7, #23]
 8008f5e:	e00a      	b.n	8008f76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d002      	beq.n	8008f6c <USB_GetDevSpeed+0x32>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2b06      	cmp	r3, #6
 8008f6a:	d102      	bne.n	8008f72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	75fb      	strb	r3, [r7, #23]
 8008f70:	e001      	b.n	8008f76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008f72:	230f      	movs	r3, #15
 8008f74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	371c      	adds	r7, #28
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	785b      	ldrb	r3, [r3, #1]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d139      	bne.n	8009014 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa6:	69da      	ldr	r2, [r3, #28]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	f003 030f 	and.w	r3, r3, #15
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	68f9      	ldr	r1, [r7, #12]
 8008fba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d153      	bne.n	8009080 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	015a      	lsls	r2, r3, #5
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	791b      	ldrb	r3, [r3, #4]
 8008ff2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ff4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	059b      	lsls	r3, r3, #22
 8008ffa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ffc:	431a      	orrs	r2, r3
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	0159      	lsls	r1, r3, #5
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	440b      	add	r3, r1
 8009006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800900a:	4619      	mov	r1, r3
 800900c:	4b20      	ldr	r3, [pc, #128]	; (8009090 <USB_ActivateEndpoint+0x10c>)
 800900e:	4313      	orrs	r3, r2
 8009010:	600b      	str	r3, [r1, #0]
 8009012:	e035      	b.n	8009080 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800901a:	69da      	ldr	r2, [r3, #28]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	f003 030f 	and.w	r3, r3, #15
 8009024:	2101      	movs	r1, #1
 8009026:	fa01 f303 	lsl.w	r3, r1, r3
 800902a:	041b      	lsls	r3, r3, #16
 800902c:	68f9      	ldr	r1, [r7, #12]
 800902e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009032:	4313      	orrs	r3, r2
 8009034:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	015a      	lsls	r2, r3, #5
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	4413      	add	r3, r2
 800903e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d119      	bne.n	8009080 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	015a      	lsls	r2, r3, #5
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	4413      	add	r3, r2
 8009054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	791b      	ldrb	r3, [r3, #4]
 8009066:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009068:	430b      	orrs	r3, r1
 800906a:	431a      	orrs	r2, r3
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	0159      	lsls	r1, r3, #5
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	440b      	add	r3, r1
 8009074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009078:	4619      	mov	r1, r3
 800907a:	4b05      	ldr	r3, [pc, #20]	; (8009090 <USB_ActivateEndpoint+0x10c>)
 800907c:	4313      	orrs	r3, r2
 800907e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	10008000 	.word	0x10008000

08009094 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	785b      	ldrb	r3, [r3, #1]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d161      	bne.n	8009174 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	015a      	lsls	r2, r3, #5
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	4413      	add	r3, r2
 80090b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090c6:	d11f      	bne.n	8009108 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	015a      	lsls	r2, r3, #5
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	4413      	add	r3, r2
 80090d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	0151      	lsls	r1, r2, #5
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	440a      	add	r2, r1
 80090de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	015a      	lsls	r2, r3, #5
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	4413      	add	r3, r2
 80090f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	0151      	lsls	r1, r2, #5
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	440a      	add	r2, r1
 80090fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009102:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009106:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800910e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	f003 030f 	and.w	r3, r3, #15
 8009118:	2101      	movs	r1, #1
 800911a:	fa01 f303 	lsl.w	r3, r1, r3
 800911e:	b29b      	uxth	r3, r3
 8009120:	43db      	mvns	r3, r3
 8009122:	68f9      	ldr	r1, [r7, #12]
 8009124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009128:	4013      	ands	r3, r2
 800912a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009132:	69da      	ldr	r2, [r3, #28]
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	f003 030f 	and.w	r3, r3, #15
 800913c:	2101      	movs	r1, #1
 800913e:	fa01 f303 	lsl.w	r3, r1, r3
 8009142:	b29b      	uxth	r3, r3
 8009144:	43db      	mvns	r3, r3
 8009146:	68f9      	ldr	r1, [r7, #12]
 8009148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800914c:	4013      	ands	r3, r2
 800914e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4413      	add	r3, r2
 8009158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	0159      	lsls	r1, r3, #5
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	440b      	add	r3, r1
 8009166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800916a:	4619      	mov	r1, r3
 800916c:	4b35      	ldr	r3, [pc, #212]	; (8009244 <USB_DeactivateEndpoint+0x1b0>)
 800916e:	4013      	ands	r3, r2
 8009170:	600b      	str	r3, [r1, #0]
 8009172:	e060      	b.n	8009236 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	4413      	add	r3, r2
 800917c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800918a:	d11f      	bne.n	80091cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	4413      	add	r3, r2
 8009194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	0151      	lsls	r1, r2, #5
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	440a      	add	r2, r1
 80091a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	015a      	lsls	r2, r3, #5
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	4413      	add	r3, r2
 80091b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	0151      	lsls	r1, r2, #5
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	440a      	add	r2, r1
 80091c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	f003 030f 	and.w	r3, r3, #15
 80091dc:	2101      	movs	r1, #1
 80091de:	fa01 f303 	lsl.w	r3, r1, r3
 80091e2:	041b      	lsls	r3, r3, #16
 80091e4:	43db      	mvns	r3, r3
 80091e6:	68f9      	ldr	r1, [r7, #12]
 80091e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091ec:	4013      	ands	r3, r2
 80091ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f6:	69da      	ldr	r2, [r3, #28]
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	f003 030f 	and.w	r3, r3, #15
 8009200:	2101      	movs	r1, #1
 8009202:	fa01 f303 	lsl.w	r3, r1, r3
 8009206:	041b      	lsls	r3, r3, #16
 8009208:	43db      	mvns	r3, r3
 800920a:	68f9      	ldr	r1, [r7, #12]
 800920c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009210:	4013      	ands	r3, r2
 8009212:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	015a      	lsls	r2, r3, #5
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	4413      	add	r3, r2
 800921c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	0159      	lsls	r1, r3, #5
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	440b      	add	r3, r1
 800922a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800922e:	4619      	mov	r1, r3
 8009230:	4b05      	ldr	r3, [pc, #20]	; (8009248 <USB_DeactivateEndpoint+0x1b4>)
 8009232:	4013      	ands	r3, r2
 8009234:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	ec337800 	.word	0xec337800
 8009248:	eff37800 	.word	0xeff37800

0800924c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b08a      	sub	sp, #40	; 0x28
 8009250:	af02      	add	r7, sp, #8
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	4613      	mov	r3, r2
 8009258:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	785b      	ldrb	r3, [r3, #1]
 8009268:	2b01      	cmp	r3, #1
 800926a:	f040 8181 	bne.w	8009570 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d132      	bne.n	80092dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	4413      	add	r3, r2
 800927e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009282:	691a      	ldr	r2, [r3, #16]
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	0159      	lsls	r1, r3, #5
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	440b      	add	r3, r1
 800928c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009290:	4619      	mov	r1, r3
 8009292:	4ba5      	ldr	r3, [pc, #660]	; (8009528 <USB_EPStartXfer+0x2dc>)
 8009294:	4013      	ands	r3, r2
 8009296:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	0151      	lsls	r1, r2, #5
 80092aa:	69fa      	ldr	r2, [r7, #28]
 80092ac:	440a      	add	r2, r1
 80092ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	015a      	lsls	r2, r3, #5
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	4413      	add	r3, r2
 80092c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c4:	691a      	ldr	r2, [r3, #16]
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	0159      	lsls	r1, r3, #5
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	440b      	add	r3, r1
 80092ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d2:	4619      	mov	r1, r3
 80092d4:	4b95      	ldr	r3, [pc, #596]	; (800952c <USB_EPStartXfer+0x2e0>)
 80092d6:	4013      	ands	r3, r2
 80092d8:	610b      	str	r3, [r1, #16]
 80092da:	e092      	b.n	8009402 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e8:	691a      	ldr	r2, [r3, #16]
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	0159      	lsls	r1, r3, #5
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	440b      	add	r3, r1
 80092f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f6:	4619      	mov	r1, r3
 80092f8:	4b8c      	ldr	r3, [pc, #560]	; (800952c <USB_EPStartXfer+0x2e0>)
 80092fa:	4013      	ands	r3, r2
 80092fc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	015a      	lsls	r2, r3, #5
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	4413      	add	r3, r2
 8009306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930a:	691a      	ldr	r2, [r3, #16]
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	0159      	lsls	r1, r3, #5
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	440b      	add	r3, r1
 8009314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009318:	4619      	mov	r1, r3
 800931a:	4b83      	ldr	r3, [pc, #524]	; (8009528 <USB_EPStartXfer+0x2dc>)
 800931c:	4013      	ands	r3, r2
 800931e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d11a      	bne.n	800935c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	691a      	ldr	r2, [r3, #16]
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	429a      	cmp	r2, r3
 8009330:	d903      	bls.n	800933a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	689a      	ldr	r2, [r3, #8]
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	015a      	lsls	r2, r3, #5
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	4413      	add	r3, r2
 8009342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	69ba      	ldr	r2, [r7, #24]
 800934a:	0151      	lsls	r1, r2, #5
 800934c:	69fa      	ldr	r2, [r7, #28]
 800934e:	440a      	add	r2, r1
 8009350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009354:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009358:	6113      	str	r3, [r2, #16]
 800935a:	e01b      	b.n	8009394 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	015a      	lsls	r2, r3, #5
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	4413      	add	r3, r2
 8009364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009368:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	6919      	ldr	r1, [r3, #16]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	440b      	add	r3, r1
 8009374:	1e59      	subs	r1, r3, #1
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	fbb1 f3f3 	udiv	r3, r1, r3
 800937e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009380:	4b6b      	ldr	r3, [pc, #428]	; (8009530 <USB_EPStartXfer+0x2e4>)
 8009382:	400b      	ands	r3, r1
 8009384:	69b9      	ldr	r1, [r7, #24]
 8009386:	0148      	lsls	r0, r1, #5
 8009388:	69f9      	ldr	r1, [r7, #28]
 800938a:	4401      	add	r1, r0
 800938c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009390:	4313      	orrs	r3, r2
 8009392:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	015a      	lsls	r2, r3, #5
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	4413      	add	r3, r2
 800939c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a0:	691a      	ldr	r2, [r3, #16]
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093aa:	69b9      	ldr	r1, [r7, #24]
 80093ac:	0148      	lsls	r0, r1, #5
 80093ae:	69f9      	ldr	r1, [r7, #28]
 80093b0:	4401      	add	r1, r0
 80093b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093b6:	4313      	orrs	r3, r2
 80093b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	791b      	ldrb	r3, [r3, #4]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d11f      	bne.n	8009402 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	69ba      	ldr	r2, [r7, #24]
 80093d2:	0151      	lsls	r1, r2, #5
 80093d4:	69fa      	ldr	r2, [r7, #28]
 80093d6:	440a      	add	r2, r1
 80093d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80093e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	015a      	lsls	r2, r3, #5
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	4413      	add	r3, r2
 80093ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	69ba      	ldr	r2, [r7, #24]
 80093f2:	0151      	lsls	r1, r2, #5
 80093f4:	69fa      	ldr	r2, [r7, #28]
 80093f6:	440a      	add	r2, r1
 80093f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009400:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009402:	79fb      	ldrb	r3, [r7, #7]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d14b      	bne.n	80094a0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	69db      	ldr	r3, [r3, #28]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d009      	beq.n	8009424 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	4413      	add	r3, r2
 8009418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800941c:	461a      	mov	r2, r3
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	69db      	ldr	r3, [r3, #28]
 8009422:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	791b      	ldrb	r3, [r3, #4]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d128      	bne.n	800947e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009438:	2b00      	cmp	r3, #0
 800943a:	d110      	bne.n	800945e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	69ba      	ldr	r2, [r7, #24]
 800944c:	0151      	lsls	r1, r2, #5
 800944e:	69fa      	ldr	r2, [r7, #28]
 8009450:	440a      	add	r2, r1
 8009452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009456:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800945a:	6013      	str	r3, [r2, #0]
 800945c:	e00f      	b.n	800947e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	015a      	lsls	r2, r3, #5
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	4413      	add	r3, r2
 8009466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	0151      	lsls	r1, r2, #5
 8009470:	69fa      	ldr	r2, [r7, #28]
 8009472:	440a      	add	r2, r1
 8009474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800947c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	4413      	add	r3, r2
 8009486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	69ba      	ldr	r2, [r7, #24]
 800948e:	0151      	lsls	r1, r2, #5
 8009490:	69fa      	ldr	r2, [r7, #28]
 8009492:	440a      	add	r2, r1
 8009494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009498:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800949c:	6013      	str	r3, [r2, #0]
 800949e:	e16a      	b.n	8009776 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	015a      	lsls	r2, r3, #5
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	4413      	add	r3, r2
 80094a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	69ba      	ldr	r2, [r7, #24]
 80094b0:	0151      	lsls	r1, r2, #5
 80094b2:	69fa      	ldr	r2, [r7, #28]
 80094b4:	440a      	add	r2, r1
 80094b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	791b      	ldrb	r3, [r3, #4]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d015      	beq.n	80094f4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 8152 	beq.w	8009776 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	f003 030f 	and.w	r3, r3, #15
 80094e2:	2101      	movs	r1, #1
 80094e4:	fa01 f303 	lsl.w	r3, r1, r3
 80094e8:	69f9      	ldr	r1, [r7, #28]
 80094ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094ee:	4313      	orrs	r3, r2
 80094f0:	634b      	str	r3, [r1, #52]	; 0x34
 80094f2:	e140      	b.n	8009776 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009500:	2b00      	cmp	r3, #0
 8009502:	d117      	bne.n	8009534 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	015a      	lsls	r2, r3, #5
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	4413      	add	r3, r2
 800950c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	69ba      	ldr	r2, [r7, #24]
 8009514:	0151      	lsls	r1, r2, #5
 8009516:	69fa      	ldr	r2, [r7, #28]
 8009518:	440a      	add	r2, r1
 800951a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800951e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	e016      	b.n	8009554 <USB_EPStartXfer+0x308>
 8009526:	bf00      	nop
 8009528:	e007ffff 	.word	0xe007ffff
 800952c:	fff80000 	.word	0xfff80000
 8009530:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	015a      	lsls	r2, r3, #5
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	4413      	add	r3, r2
 800953c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	69ba      	ldr	r2, [r7, #24]
 8009544:	0151      	lsls	r1, r2, #5
 8009546:	69fa      	ldr	r2, [r7, #28]
 8009548:	440a      	add	r2, r1
 800954a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800954e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009552:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	68d9      	ldr	r1, [r3, #12]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	781a      	ldrb	r2, [r3, #0]
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	b298      	uxth	r0, r3
 8009562:	79fb      	ldrb	r3, [r7, #7]
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	4603      	mov	r3, r0
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f000 f9b9 	bl	80098e0 <USB_WritePacket>
 800956e:	e102      	b.n	8009776 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800957c:	691a      	ldr	r2, [r3, #16]
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	0159      	lsls	r1, r3, #5
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	440b      	add	r3, r1
 8009586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800958a:	4619      	mov	r1, r3
 800958c:	4b7c      	ldr	r3, [pc, #496]	; (8009780 <USB_EPStartXfer+0x534>)
 800958e:	4013      	ands	r3, r2
 8009590:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	4413      	add	r3, r2
 800959a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800959e:	691a      	ldr	r2, [r3, #16]
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	0159      	lsls	r1, r3, #5
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	440b      	add	r3, r1
 80095a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ac:	4619      	mov	r1, r3
 80095ae:	4b75      	ldr	r3, [pc, #468]	; (8009784 <USB_EPStartXfer+0x538>)
 80095b0:	4013      	ands	r3, r2
 80095b2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d12f      	bne.n	800961a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d003      	beq.n	80095ca <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	689a      	ldr	r2, [r3, #8]
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	689a      	ldr	r2, [r3, #8]
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	015a      	lsls	r2, r3, #5
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	4413      	add	r3, r2
 80095da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095de:	691a      	ldr	r2, [r3, #16]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	6a1b      	ldr	r3, [r3, #32]
 80095e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095e8:	69b9      	ldr	r1, [r7, #24]
 80095ea:	0148      	lsls	r0, r1, #5
 80095ec:	69f9      	ldr	r1, [r7, #28]
 80095ee:	4401      	add	r1, r0
 80095f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80095f4:	4313      	orrs	r3, r2
 80095f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	015a      	lsls	r2, r3, #5
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	4413      	add	r3, r2
 8009600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	69ba      	ldr	r2, [r7, #24]
 8009608:	0151      	lsls	r1, r2, #5
 800960a:	69fa      	ldr	r2, [r7, #28]
 800960c:	440a      	add	r2, r1
 800960e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009612:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009616:	6113      	str	r3, [r2, #16]
 8009618:	e05f      	b.n	80096da <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d123      	bne.n	800966a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	015a      	lsls	r2, r3, #5
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	4413      	add	r3, r2
 800962a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800962e:	691a      	ldr	r2, [r3, #16]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009638:	69b9      	ldr	r1, [r7, #24]
 800963a:	0148      	lsls	r0, r1, #5
 800963c:	69f9      	ldr	r1, [r7, #28]
 800963e:	4401      	add	r1, r0
 8009640:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009644:	4313      	orrs	r3, r2
 8009646:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	69ba      	ldr	r2, [r7, #24]
 8009658:	0151      	lsls	r1, r2, #5
 800965a:	69fa      	ldr	r2, [r7, #28]
 800965c:	440a      	add	r2, r1
 800965e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009666:	6113      	str	r3, [r2, #16]
 8009668:	e037      	b.n	80096da <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	691a      	ldr	r2, [r3, #16]
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	4413      	add	r3, r2
 8009674:	1e5a      	subs	r2, r3, #1
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	fbb2 f3f3 	udiv	r3, r2, r3
 800967e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	8afa      	ldrh	r2, [r7, #22]
 8009686:	fb03 f202 	mul.w	r2, r3, r2
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	015a      	lsls	r2, r3, #5
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	4413      	add	r3, r2
 8009696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800969a:	691a      	ldr	r2, [r3, #16]
 800969c:	8afb      	ldrh	r3, [r7, #22]
 800969e:	04d9      	lsls	r1, r3, #19
 80096a0:	4b39      	ldr	r3, [pc, #228]	; (8009788 <USB_EPStartXfer+0x53c>)
 80096a2:	400b      	ands	r3, r1
 80096a4:	69b9      	ldr	r1, [r7, #24]
 80096a6:	0148      	lsls	r0, r1, #5
 80096a8:	69f9      	ldr	r1, [r7, #28]
 80096aa:	4401      	add	r1, r0
 80096ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096b0:	4313      	orrs	r3, r2
 80096b2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c0:	691a      	ldr	r2, [r3, #16]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096ca:	69b9      	ldr	r1, [r7, #24]
 80096cc:	0148      	lsls	r0, r1, #5
 80096ce:	69f9      	ldr	r1, [r7, #28]
 80096d0:	4401      	add	r1, r0
 80096d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096d6:	4313      	orrs	r3, r2
 80096d8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d10d      	bne.n	80096fc <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d009      	beq.n	80096fc <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	68d9      	ldr	r1, [r3, #12]
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f8:	460a      	mov	r2, r1
 80096fa:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	791b      	ldrb	r3, [r3, #4]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d128      	bne.n	8009756 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009710:	2b00      	cmp	r3, #0
 8009712:	d110      	bne.n	8009736 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	015a      	lsls	r2, r3, #5
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	4413      	add	r3, r2
 800971c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69ba      	ldr	r2, [r7, #24]
 8009724:	0151      	lsls	r1, r2, #5
 8009726:	69fa      	ldr	r2, [r7, #28]
 8009728:	440a      	add	r2, r1
 800972a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800972e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	e00f      	b.n	8009756 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	015a      	lsls	r2, r3, #5
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	4413      	add	r3, r2
 800973e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	69ba      	ldr	r2, [r7, #24]
 8009746:	0151      	lsls	r1, r2, #5
 8009748:	69fa      	ldr	r2, [r7, #28]
 800974a:	440a      	add	r2, r1
 800974c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009754:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	015a      	lsls	r2, r3, #5
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	4413      	add	r3, r2
 800975e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	69ba      	ldr	r2, [r7, #24]
 8009766:	0151      	lsls	r1, r2, #5
 8009768:	69fa      	ldr	r2, [r7, #28]
 800976a:	440a      	add	r2, r1
 800976c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009770:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009774:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3720      	adds	r7, #32
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	fff80000 	.word	0xfff80000
 8009784:	e007ffff 	.word	0xe007ffff
 8009788:	1ff80000 	.word	0x1ff80000

0800978c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800978c:	b480      	push	{r7}
 800978e:	b087      	sub	sp, #28
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009796:	2300      	movs	r3, #0
 8009798:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	785b      	ldrb	r3, [r3, #1]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d14a      	bne.n	8009840 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	015a      	lsls	r2, r3, #5
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	4413      	add	r3, r2
 80097b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097c2:	f040 8086 	bne.w	80098d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	7812      	ldrb	r2, [r2, #0]
 80097da:	0151      	lsls	r1, r2, #5
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	440a      	add	r2, r1
 80097e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	015a      	lsls	r2, r3, #5
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	4413      	add	r3, r2
 80097f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	7812      	ldrb	r2, [r2, #0]
 80097fe:	0151      	lsls	r1, r2, #5
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	440a      	add	r2, r1
 8009804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009808:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800980c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	3301      	adds	r3, #1
 8009812:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f242 7210 	movw	r2, #10000	; 0x2710
 800981a:	4293      	cmp	r3, r2
 800981c:	d902      	bls.n	8009824 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	75fb      	strb	r3, [r7, #23]
          break;
 8009822:	e056      	b.n	80098d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	015a      	lsls	r2, r3, #5
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	4413      	add	r3, r2
 800982e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009838:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800983c:	d0e7      	beq.n	800980e <USB_EPStopXfer+0x82>
 800983e:	e048      	b.n	80098d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	015a      	lsls	r2, r3, #5
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	4413      	add	r3, r2
 800984a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009858:	d13b      	bne.n	80098d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	015a      	lsls	r2, r3, #5
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	4413      	add	r3, r2
 8009864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	7812      	ldrb	r2, [r2, #0]
 800986e:	0151      	lsls	r1, r2, #5
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	440a      	add	r2, r1
 8009874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009878:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800987c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	7812      	ldrb	r2, [r2, #0]
 8009892:	0151      	lsls	r1, r2, #5
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	440a      	add	r2, r1
 8009898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800989c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	3301      	adds	r3, #1
 80098a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d902      	bls.n	80098b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	75fb      	strb	r3, [r7, #23]
          break;
 80098b6:	e00c      	b.n	80098d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098d0:	d0e7      	beq.n	80098a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80098d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	371c      	adds	r7, #28
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b089      	sub	sp, #36	; 0x24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	4611      	mov	r1, r2
 80098ec:	461a      	mov	r2, r3
 80098ee:	460b      	mov	r3, r1
 80098f0:	71fb      	strb	r3, [r7, #7]
 80098f2:	4613      	mov	r3, r2
 80098f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80098fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009902:	2b00      	cmp	r3, #0
 8009904:	d123      	bne.n	800994e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009906:	88bb      	ldrh	r3, [r7, #4]
 8009908:	3303      	adds	r3, #3
 800990a:	089b      	lsrs	r3, r3, #2
 800990c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800990e:	2300      	movs	r3, #0
 8009910:	61bb      	str	r3, [r7, #24]
 8009912:	e018      	b.n	8009946 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009914:	79fb      	ldrb	r3, [r7, #7]
 8009916:	031a      	lsls	r2, r3, #12
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	4413      	add	r3, r2
 800991c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009920:	461a      	mov	r2, r3
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	3301      	adds	r3, #1
 800992c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	3301      	adds	r3, #1
 8009932:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	3301      	adds	r3, #1
 8009938:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	3301      	adds	r3, #1
 800993e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	3301      	adds	r3, #1
 8009944:	61bb      	str	r3, [r7, #24]
 8009946:	69ba      	ldr	r2, [r7, #24]
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	429a      	cmp	r2, r3
 800994c:	d3e2      	bcc.n	8009914 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3724      	adds	r7, #36	; 0x24
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800995c:	b480      	push	{r7}
 800995e:	b08b      	sub	sp, #44	; 0x2c
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	4613      	mov	r3, r2
 8009968:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009972:	88fb      	ldrh	r3, [r7, #6]
 8009974:	089b      	lsrs	r3, r3, #2
 8009976:	b29b      	uxth	r3, r3
 8009978:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800997a:	88fb      	ldrh	r3, [r7, #6]
 800997c:	f003 0303 	and.w	r3, r3, #3
 8009980:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009982:	2300      	movs	r3, #0
 8009984:	623b      	str	r3, [r7, #32]
 8009986:	e014      	b.n	80099b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	601a      	str	r2, [r3, #0]
    pDest++;
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	3301      	adds	r3, #1
 8009998:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800999a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999c:	3301      	adds	r3, #1
 800999e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	3301      	adds	r3, #1
 80099a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	3301      	adds	r3, #1
 80099aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80099ac:	6a3b      	ldr	r3, [r7, #32]
 80099ae:	3301      	adds	r3, #1
 80099b0:	623b      	str	r3, [r7, #32]
 80099b2:	6a3a      	ldr	r2, [r7, #32]
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d3e6      	bcc.n	8009988 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80099ba:	8bfb      	ldrh	r3, [r7, #30]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d01e      	beq.n	80099fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80099c0:	2300      	movs	r3, #0
 80099c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099ca:	461a      	mov	r2, r3
 80099cc:	f107 0310 	add.w	r3, r7, #16
 80099d0:	6812      	ldr	r2, [r2, #0]
 80099d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	6a3b      	ldr	r3, [r7, #32]
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	fa22 f303 	lsr.w	r3, r2, r3
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e4:	701a      	strb	r2, [r3, #0]
      i++;
 80099e6:	6a3b      	ldr	r3, [r7, #32]
 80099e8:	3301      	adds	r3, #1
 80099ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80099ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ee:	3301      	adds	r3, #1
 80099f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80099f2:	8bfb      	ldrh	r3, [r7, #30]
 80099f4:	3b01      	subs	r3, #1
 80099f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80099f8:	8bfb      	ldrh	r3, [r7, #30]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1ea      	bne.n	80099d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80099fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	372c      	adds	r7, #44	; 0x2c
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	785b      	ldrb	r3, [r3, #1]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d12c      	bne.n	8009a82 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	015a      	lsls	r2, r3, #5
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	db12      	blt.n	8009a60 <USB_EPSetStall+0x54>
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00f      	beq.n	8009a60 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	0151      	lsls	r1, r2, #5
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	440a      	add	r2, r1
 8009a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a5e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	0151      	lsls	r1, r2, #5
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	440a      	add	r2, r1
 8009a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a7e:	6013      	str	r3, [r2, #0]
 8009a80:	e02b      	b.n	8009ada <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	015a      	lsls	r2, r3, #5
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	4413      	add	r3, r2
 8009a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	db12      	blt.n	8009aba <USB_EPSetStall+0xae>
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00f      	beq.n	8009aba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	015a      	lsls	r2, r3, #5
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68ba      	ldr	r2, [r7, #8]
 8009aaa:	0151      	lsls	r1, r2, #5
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	440a      	add	r2, r1
 8009ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ab4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ab8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	015a      	lsls	r2, r3, #5
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	0151      	lsls	r1, r2, #5
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	440a      	add	r2, r1
 8009ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ad4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ad8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	785b      	ldrb	r3, [r3, #1]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d128      	bne.n	8009b56 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	015a      	lsls	r2, r3, #5
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	0151      	lsls	r1, r2, #5
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	440a      	add	r2, r1
 8009b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	791b      	ldrb	r3, [r3, #4]
 8009b28:	2b03      	cmp	r3, #3
 8009b2a:	d003      	beq.n	8009b34 <USB_EPClearStall+0x4c>
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	791b      	ldrb	r3, [r3, #4]
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d138      	bne.n	8009ba6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	015a      	lsls	r2, r3, #5
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	0151      	lsls	r1, r2, #5
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	440a      	add	r2, r1
 8009b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b52:	6013      	str	r3, [r2, #0]
 8009b54:	e027      	b.n	8009ba6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68ba      	ldr	r2, [r7, #8]
 8009b66:	0151      	lsls	r1, r2, #5
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	440a      	add	r2, r1
 8009b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	791b      	ldrb	r3, [r3, #4]
 8009b7a:	2b03      	cmp	r3, #3
 8009b7c:	d003      	beq.n	8009b86 <USB_EPClearStall+0x9e>
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	791b      	ldrb	r3, [r3, #4]
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d10f      	bne.n	8009ba6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	015a      	lsls	r2, r3, #5
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	0151      	lsls	r1, r2, #5
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	440a      	add	r2, r1
 8009b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ba4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bd2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009bd6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	78fb      	ldrb	r3, [r7, #3]
 8009be2:	011b      	lsls	r3, r3, #4
 8009be4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009be8:	68f9      	ldr	r1, [r7, #12]
 8009bea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c1a:	f023 0303 	bic.w	r3, r3, #3
 8009c1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c2e:	f023 0302 	bic.w	r3, r3, #2
 8009c32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3714      	adds	r7, #20
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009c42:	b480      	push	{r7}
 8009c44:	b085      	sub	sp, #20
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c5c:	f023 0303 	bic.w	r3, r3, #3
 8009c60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c70:	f043 0302 	orr.w	r3, r3, #2
 8009c74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	695b      	ldr	r3, [r3, #20]
 8009c90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	699b      	ldr	r3, [r3, #24]
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	4013      	ands	r3, r2
 8009c9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr

08009caa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009caa:	b480      	push	{r7}
 8009cac:	b085      	sub	sp, #20
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cc6:	69db      	ldr	r3, [r3, #28]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	4013      	ands	r3, r2
 8009ccc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	0c1b      	lsrs	r3, r3, #16
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b085      	sub	sp, #20
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cf0:	699b      	ldr	r3, [r3, #24]
 8009cf2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cfa:	69db      	ldr	r3, [r3, #28]
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	4013      	ands	r3, r2
 8009d00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	b29b      	uxth	r3, r3
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr

08009d12 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d12:	b480      	push	{r7}
 8009d14:	b085      	sub	sp, #20
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009d22:	78fb      	ldrb	r3, [r7, #3]
 8009d24:	015a      	lsls	r2, r3, #5
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d38:	695b      	ldr	r3, [r3, #20]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009d40:	68bb      	ldr	r3, [r7, #8]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b087      	sub	sp, #28
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	460b      	mov	r3, r1
 8009d58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d70:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009d72:	78fb      	ldrb	r3, [r7, #3]
 8009d74:	f003 030f 	and.w	r3, r3, #15
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d7e:	01db      	lsls	r3, r3, #7
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009d88:	78fb      	ldrb	r3, [r7, #3]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	4013      	ands	r3, r2
 8009d9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009d9c:	68bb      	ldr	r3, [r7, #8]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	371c      	adds	r7, #28
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009daa:	b480      	push	{r7}
 8009dac:	b083      	sub	sp, #12
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	f003 0301 	and.w	r3, r3, #1
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	370c      	adds	r7, #12
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
	...

08009dc8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de2:	4619      	mov	r1, r3
 8009de4:	4b09      	ldr	r3, [pc, #36]	; (8009e0c <USB_ActivateSetup+0x44>)
 8009de6:	4013      	ands	r3, r2
 8009de8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	fffff800 	.word	0xfffff800

08009e10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b087      	sub	sp, #28
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	607a      	str	r2, [r7, #4]
 8009e1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	333c      	adds	r3, #60	; 0x3c
 8009e26:	3304      	adds	r3, #4
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	4a26      	ldr	r2, [pc, #152]	; (8009ec8 <USB_EP0_OutStart+0xb8>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d90a      	bls.n	8009e4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e44:	d101      	bne.n	8009e4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	e037      	b.n	8009eba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e50:	461a      	mov	r2, r3
 8009e52:	2300      	movs	r3, #0
 8009e54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	697a      	ldr	r2, [r7, #20]
 8009e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e78:	f043 0318 	orr.w	r3, r3, #24
 8009e7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e8c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009e90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009e92:	7afb      	ldrb	r3, [r7, #11]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d10f      	bne.n	8009eb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	697a      	ldr	r2, [r7, #20]
 8009eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009eb2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009eb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	371c      	adds	r7, #28
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	4f54300a 	.word	0x4f54300a

08009ecc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	3301      	adds	r3, #1
 8009edc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	4a13      	ldr	r2, [pc, #76]	; (8009f30 <USB_CoreReset+0x64>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d901      	bls.n	8009eea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e01b      	b.n	8009f22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	daf2      	bge.n	8009ed8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	f043 0201 	orr.w	r2, r3, #1
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3301      	adds	r3, #1
 8009f06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	4a09      	ldr	r2, [pc, #36]	; (8009f30 <USB_CoreReset+0x64>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d901      	bls.n	8009f14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f10:	2303      	movs	r3, #3
 8009f12:	e006      	b.n	8009f22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	f003 0301 	and.w	r3, r3, #1
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d0f0      	beq.n	8009f02 <USB_CoreReset+0x36>

  return HAL_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	00030d40 	.word	0x00030d40

08009f34 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8009f40:	f643 4050 	movw	r0, #15440	; 0x3c50
 8009f44:	f002 fb08 	bl	800c558 <USBD_static_malloc>
 8009f48:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d109      	bne.n	8009f64 <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	32b0      	adds	r2, #176	; 0xb0
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009f60:	2302      	movs	r3, #2
 8009f62:	e07e      	b.n	800a062 <USBD_AUDIO_Init+0x12e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	32b0      	adds	r2, #176	; 0xb0
 8009f6e:	68f9      	ldr	r1, [r7, #12]
 8009f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	32b0      	adds	r2, #176	; 0xb0
 8009f7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	7c1b      	ldrb	r3, [r3, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10e      	bne.n	8009fae <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8009f90:	4b36      	ldr	r3, [pc, #216]	; (800a06c <USBD_AUDIO_Init+0x138>)
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	f003 020f 	and.w	r2, r3, #15
 8009f98:	6879      	ldr	r1, [r7, #4]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	440b      	add	r3, r1
 8009fa4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8009fa8:	2201      	movs	r2, #1
 8009faa:	801a      	strh	r2, [r3, #0]
 8009fac:	e00d      	b.n	8009fca <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8009fae:	4b2f      	ldr	r3, [pc, #188]	; (800a06c <USBD_AUDIO_Init+0x138>)
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	f003 020f 	and.w	r2, r3, #15
 8009fb6:	6879      	ldr	r1, [r7, #4]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	440b      	add	r3, r1
 8009fc2:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8009fca:	4b28      	ldr	r3, [pc, #160]	; (800a06c <USBD_AUDIO_Init+0x138>)
 8009fcc:	7819      	ldrb	r1, [r3, #0]
 8009fce:	23c0      	movs	r3, #192	; 0xc0
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f002 f99d 	bl	800c312 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 8009fd8:	4b24      	ldr	r3, [pc, #144]	; (800a06c <USBD_AUDIO_Init+0x138>)
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	f003 020f 	and.w	r2, r3, #15
 8009fe0:	6879      	ldr	r1, [r7, #4]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	440b      	add	r3, r1
 8009fec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a000:	2203      	movs	r2, #3
 800a002:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
  haudio->wr_ptr = 0U;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a00c:	2200      	movs	r2, #0
 800a00e:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08
  haudio->rd_ptr = 0U;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a018:	2200      	movs	r2, #0
 800a01a:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
  haudio->rd_enable = 0U;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a024:	2200      	movs	r2, #0
 800a026:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	33b0      	adds	r3, #176	; 0xb0
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2200      	movs	r2, #0
 800a03e:	2146      	movs	r1, #70	; 0x46
 800a040:	f64b 3080 	movw	r0, #48000	; 0xbb80
 800a044:	4798      	blx	r3
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d001      	beq.n	800a050 <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 800a04c:	2303      	movs	r3, #3
 800a04e:	e008      	b.n	800a062 <USBD_AUDIO_Init+0x12e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 800a050:	4b06      	ldr	r3, [pc, #24]	; (800a06c <USBD_AUDIO_Init+0x138>)
 800a052:	7819      	ldrb	r1, [r3, #0]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	1d1a      	adds	r2, r3, #4
 800a058:	23c0      	movs	r3, #192	; 0xc0
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f002 fa48 	bl	800c4f0 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	240000c2 	.word	0x240000c2

0800a070 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 800a07c:	4b28      	ldr	r3, [pc, #160]	; (800a120 <USBD_AUDIO_DeInit+0xb0>)
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	4619      	mov	r1, r3
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f002 f96b 	bl	800c35e <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 800a088:	4b25      	ldr	r3, [pc, #148]	; (800a120 <USBD_AUDIO_DeInit+0xb0>)
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	f003 020f 	and.w	r2, r3, #15
 800a090:	6879      	ldr	r1, [r7, #4]
 800a092:	4613      	mov	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4413      	add	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	440b      	add	r3, r1
 800a09c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 800a0a4:	4b1e      	ldr	r3, [pc, #120]	; (800a120 <USBD_AUDIO_DeInit+0xb0>)
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	f003 020f 	and.w	r2, r3, #15
 800a0ac:	6879      	ldr	r1, [r7, #4]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	4413      	add	r3, r2
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	440b      	add	r3, r1
 800a0b8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a0bc:	2200      	movs	r2, #0
 800a0be:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	32b0      	adds	r2, #176	; 0xb0
 800a0ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d020      	beq.n	800a114 <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	33b0      	adds	r3, #176	; 0xb0
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	32b0      	adds	r2, #176	; 0xb0
 800a0f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f002 fa3c 	bl	800c574 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	32b0      	adds	r2, #176	; 0xb0
 800a106:	2100      	movs	r1, #0
 800a108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	240000c2 	.word	0x240000c2

0800a124 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800a12e:	2300      	movs	r3, #0
 800a130:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800a132:	2300      	movs	r3, #0
 800a134:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	32b0      	adds	r2, #176	; 0xb0
 800a140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a144:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d101      	bne.n	800a150 <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a14c:	2303      	movs	r3, #3
 800a14e:	e0c1      	b.n	800a2d4 <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d01a      	beq.n	800a192 <USBD_AUDIO_Setup+0x6e>
 800a15c:	2b20      	cmp	r3, #32
 800a15e:	f040 80b1 	bne.w	800a2c4 <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	785b      	ldrb	r3, [r3, #1]
 800a166:	2b01      	cmp	r3, #1
 800a168:	d006      	beq.n	800a178 <USBD_AUDIO_Setup+0x54>
 800a16a:	2b81      	cmp	r3, #129	; 0x81
 800a16c:	d109      	bne.n	800a182 <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 800a16e:	6839      	ldr	r1, [r7, #0]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f9d7 	bl	800a524 <AUDIO_REQ_GetCurrent>
          break;
 800a176:	e00b      	b.n	800a190 <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 800a178:	6839      	ldr	r1, [r7, #0]
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f9fe 	bl	800a57c <AUDIO_REQ_SetCurrent>
          break;
 800a180:	e006      	b.n	800a190 <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 800a182:	6839      	ldr	r1, [r7, #0]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f001 fc92 	bl	800baae <USBD_CtlError>
          ret = USBD_FAIL;
 800a18a:	2303      	movs	r3, #3
 800a18c:	75fb      	strb	r3, [r7, #23]
          break;
 800a18e:	bf00      	nop
      }
      break;
 800a190:	e09f      	b.n	800a2d2 <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	785b      	ldrb	r3, [r3, #1]
 800a196:	2b0b      	cmp	r3, #11
 800a198:	f200 8089 	bhi.w	800a2ae <USBD_AUDIO_Setup+0x18a>
 800a19c:	a201      	add	r2, pc, #4	; (adr r2, 800a1a4 <USBD_AUDIO_Setup+0x80>)
 800a19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a2:	bf00      	nop
 800a1a4:	0800a1d5 	.word	0x0800a1d5
 800a1a8:	0800a2bd 	.word	0x0800a2bd
 800a1ac:	0800a2af 	.word	0x0800a2af
 800a1b0:	0800a2af 	.word	0x0800a2af
 800a1b4:	0800a2af 	.word	0x0800a2af
 800a1b8:	0800a2af 	.word	0x0800a2af
 800a1bc:	0800a1ff 	.word	0x0800a1ff
 800a1c0:	0800a2af 	.word	0x0800a2af
 800a1c4:	0800a2af 	.word	0x0800a2af
 800a1c8:	0800a2af 	.word	0x0800a2af
 800a1cc:	0800a247 	.word	0x0800a247
 800a1d0:	0800a26f 	.word	0x0800a26f
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b03      	cmp	r3, #3
 800a1de:	d107      	bne.n	800a1f0 <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a1e0:	f107 0308 	add.w	r3, r7, #8
 800a1e4:	2202      	movs	r2, #2
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f001 fcd1 	bl	800bb90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a1ee:	e068      	b.n	800a2c2 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a1f0:	6839      	ldr	r1, [r7, #0]
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f001 fc5b 	bl	800baae <USBD_CtlError>
            ret = USBD_FAIL;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	75fb      	strb	r3, [r7, #23]
          break;
 800a1fc:	e061      	b.n	800a2c2 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	885b      	ldrh	r3, [r3, #2]
 800a202:	0a1b      	lsrs	r3, r3, #8
 800a204:	b29b      	uxth	r3, r3
 800a206:	2b21      	cmp	r3, #33	; 0x21
 800a208:	d15a      	bne.n	800a2c0 <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800a210:	4618      	mov	r0, r3
 800a212:	f000 fa21 	bl	800a658 <USBD_AUDIO_GetAudioHeaderDesc>
 800a216:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00c      	beq.n	800a238 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	88db      	ldrh	r3, [r3, #6]
 800a222:	2b09      	cmp	r3, #9
 800a224:	bf28      	it	cs
 800a226:	2309      	movcs	r3, #9
 800a228:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800a22a:	897b      	ldrh	r3, [r7, #10]
 800a22c:	461a      	mov	r2, r3
 800a22e:	68f9      	ldr	r1, [r7, #12]
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f001 fcad 	bl	800bb90 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 800a236:	e043      	b.n	800a2c0 <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 800a238:	6839      	ldr	r1, [r7, #0]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f001 fc37 	bl	800baae <USBD_CtlError>
              ret = USBD_FAIL;
 800a240:	2303      	movs	r3, #3
 800a242:	75fb      	strb	r3, [r7, #23]
          break;
 800a244:	e03c      	b.n	800a2c0 <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	2b03      	cmp	r3, #3
 800a250:	d106      	bne.n	800a260 <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	2201      	movs	r2, #1
 800a256:	4619      	mov	r1, r3
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f001 fc99 	bl	800bb90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a25e:	e030      	b.n	800a2c2 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f001 fc23 	bl	800baae <USBD_CtlError>
            ret = USBD_FAIL;
 800a268:	2303      	movs	r3, #3
 800a26a:	75fb      	strb	r3, [r7, #23]
          break;
 800a26c:	e029      	b.n	800a2c2 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b03      	cmp	r3, #3
 800a278:	d112      	bne.n	800a2a0 <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	885b      	ldrh	r3, [r3, #2]
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b01      	cmp	r3, #1
 800a282:	d806      	bhi.n	800a292 <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	885b      	ldrh	r3, [r3, #2]
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	461a      	mov	r2, r3
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a290:	e017      	b.n	800a2c2 <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 800a292:	6839      	ldr	r1, [r7, #0]
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f001 fc0a 	bl	800baae <USBD_CtlError>
              ret = USBD_FAIL;
 800a29a:	2303      	movs	r3, #3
 800a29c:	75fb      	strb	r3, [r7, #23]
          break;
 800a29e:	e010      	b.n	800a2c2 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f001 fc03 	bl	800baae <USBD_CtlError>
            ret = USBD_FAIL;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	75fb      	strb	r3, [r7, #23]
          break;
 800a2ac:	e009      	b.n	800a2c2 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f001 fbfc 	bl	800baae <USBD_CtlError>
          ret = USBD_FAIL;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	75fb      	strb	r3, [r7, #23]
          break;
 800a2ba:	e002      	b.n	800a2c2 <USBD_AUDIO_Setup+0x19e>
          break;
 800a2bc:	bf00      	nop
 800a2be:	e008      	b.n	800a2d2 <USBD_AUDIO_Setup+0x1ae>
          break;
 800a2c0:	bf00      	nop
      }
      break;
 800a2c2:	e006      	b.n	800a2d2 <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 800a2c4:	6839      	ldr	r1, [r7, #0]
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f001 fbf1 	bl	800baae <USBD_CtlError>
      ret = USBD_FAIL;
 800a2cc:	2303      	movs	r3, #3
 800a2ce:	75fb      	strb	r3, [r7, #23]
      break;
 800a2d0:	bf00      	nop
  }

  return (uint8_t)ret;
 800a2d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3718      	adds	r7, #24
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	226d      	movs	r2, #109	; 0x6d
 800a2e8:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800a2ea:	4b03      	ldr	r3, [pc, #12]	; (800a2f8 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	24000048 	.word	0x24000048

0800a2fc <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	460b      	mov	r3, r1
 800a306:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	370c      	adds	r7, #12
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b084      	sub	sp, #16
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	32b0      	adds	r2, #176	; 0xb0
 800a328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a32c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d101      	bne.n	800a338 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a334:	2303      	movs	r3, #3
 800a336:	e02a      	b.n	800a38e <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a33e:	f893 3c0a 	ldrb.w	r3, [r3, #3082]	; 0xc0a
 800a342:	2b01      	cmp	r3, #1
 800a344:	d122      	bne.n	800a38c <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a34c:	f893 3c4c 	ldrb.w	r3, [r3, #3148]	; 0xc4c
 800a350:	2b02      	cmp	r3, #2
 800a352:	d11b      	bne.n	800a38c <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	33b0      	adds	r3, #176	; 0xb0
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800a36c:	f892 2c0b 	ldrb.w	r2, [r2, #3083]	; 0xc0b
 800a370:	4610      	mov	r0, r2
 800a372:	4798      	blx	r3
      haudio->control.cmd = 0U;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
      haudio->control.len = 0U;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a386:	2200      	movs	r2, #0
 800a388:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    }
  }

  return (uint8_t)USBD_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800a396:	b480      	push	{r7}
 800a398:	b083      	sub	sp, #12
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	370c      	adds	r7, #12
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr

0800a3c2 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3c2:	b480      	push	{r7}
 800a3c4:	b083      	sub	sp, #12
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	370c      	adds	r7, #12
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr
	...

0800a3f8 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	32b0      	adds	r2, #176	; 0xb0
 800a40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a412:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d101      	bne.n	800a41e <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e07c      	b.n	800a518 <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 800a41e:	4b40      	ldr	r3, [pc, #256]	; (800a520 <USBD_AUDIO_DataOut+0x128>)
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	78fa      	ldrb	r2, [r7, #3]
 800a424:	429a      	cmp	r2, r3
 800a426:	d176      	bne.n	800a516 <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 800a428:	78fb      	ldrb	r3, [r7, #3]
 800a42a:	4619      	mov	r1, r3
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f002 f880 	bl	800c532 <USBD_LL_GetRxDataSize>
 800a432:	4603      	mov	r3, r0
 800a434:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	33b0      	adds	r3, #176	; 0xb0
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4413      	add	r3, r2
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800a44e:	f8b2 2c08 	ldrh.w	r2, [r2, #3080]	; 0xc08
 800a452:	4611      	mov	r1, r2
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	440a      	add	r2, r1
 800a458:	1d10      	adds	r0, r2, #4
 800a45a:	8979      	ldrh	r1, [r7, #10]
 800a45c:	2201      	movs	r2, #1
 800a45e:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a466:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	; 0xc08
 800a46a:	897b      	ldrh	r3, [r7, #10]
 800a46c:	4413      	add	r3, r2
 800a46e:	b29a      	uxth	r2, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a476:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

    if (haudio->wr_ptr >= AUDIO_TOTAL_BUF_SIZE)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a480:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800a484:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800a488:	d321      	bcc.n	800a4ce <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a490:	2200      	movs	r2, #0
 800a492:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a49c:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 800a4a0:	2b03      	cmp	r3, #3
 800a4a2:	d114      	bne.n	800a4ce <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	33b0      	adds	r3, #176	; 0xb0
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	4413      	add	r3, r2
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	1d10      	adds	r0, r2, #4
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800a4c0:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
      }
    }

    if (haudio->rd_enable == 0U)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a4d4:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10d      	bne.n	800a4f8 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a4e2:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800a4e6:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800a4ea:	d105      	bne.n	800a4f8 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 800a4f8:	4b09      	ldr	r3, [pc, #36]	; (800a520 <USBD_AUDIO_DataOut+0x128>)
 800a4fa:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a502:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800a506:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	4413      	add	r3, r2
 800a50c:	1d1a      	adds	r2, r3, #4
 800a50e:	23c0      	movs	r3, #192	; 0xc0
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f001 ffed 	bl	800c4f0 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	240000c2 	.word	0x240000c2

0800a524 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	32b0      	adds	r2, #176	; 0xb0
 800a538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a53c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d017      	beq.n	800a574 <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	f643 430b 	movw	r3, #15371	; 0x3c0b
 800a54a:	4413      	add	r3, r2
 800a54c:	2240      	movs	r2, #64	; 0x40
 800a54e:	2100      	movs	r1, #0
 800a550:	4618      	mov	r0, r3
 800a552:	f002 f845 	bl	800c5e0 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	f643 430b 	movw	r3, #15371	; 0x3c0b
 800a55c:	4413      	add	r3, r2
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 800a55e:	683a      	ldr	r2, [r7, #0]
 800a560:	88d2      	ldrh	r2, [r2, #6]
 800a562:	2a40      	cmp	r2, #64	; 0x40
 800a564:	bf28      	it	cs
 800a566:	2240      	movcs	r2, #64	; 0x40
 800a568:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800a56a:	4619      	mov	r1, r3
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f001 fb0f 	bl	800bb90 <USBD_CtlSendData>
 800a572:	e000      	b.n	800a576 <AUDIO_REQ_GetCurrent+0x52>
    return;
 800a574:	bf00      	nop
}
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	32b0      	adds	r2, #176	; 0xb0
 800a590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a594:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d02f      	beq.n	800a5fc <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	88db      	ldrh	r3, [r3, #6]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d02c      	beq.n	800a5fe <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	88db      	ldrh	r3, [r3, #6]
 800a5b4:	2b3f      	cmp	r3, #63	; 0x3f
 800a5b6:	d803      	bhi.n	800a5c0 <AUDIO_REQ_SetCurrent+0x44>
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	88db      	ldrh	r3, [r3, #6]
 800a5bc:	b2da      	uxtb	r2, r3
 800a5be:	e000      	b.n	800a5c2 <AUDIO_REQ_SetCurrent+0x46>
 800a5c0:	2240      	movs	r2, #64	; 0x40
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a5c8:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	889b      	ldrh	r3, [r3, #4]
 800a5d0:	0a1b      	lsrs	r3, r3, #8
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	b2da      	uxtb	r2, r3
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a5dc:	f883 2c4c 	strb.w	r2, [r3, #3148]	; 0xc4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	f643 430b 	movw	r3, #15371	; 0x3c0b
 800a5e6:	4413      	add	r3, r2
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800a5ee:	f892 2c4b 	ldrb.w	r2, [r2, #3147]	; 0xc4b
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f001 faf7 	bl	800bbe8 <USBD_CtlPrepareRx>
 800a5fa:	e000      	b.n	800a5fe <AUDIO_REQ_SetCurrent+0x82>
    return;
 800a5fc:	bf00      	nop
  }
}
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	220a      	movs	r2, #10
 800a610:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800a612:	4b03      	ldr	r3, [pc, #12]	; (800a620 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800a614:	4618      	mov	r0, r3
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr
 800a620:	240000b8 	.word	0x240000b8

0800a624 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d101      	bne.n	800a638 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a634:	2303      	movs	r3, #3
 800a636:	e009      	b.n	800a64c <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	33b0      	adds	r3, #176	; 0xb0
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	4413      	add	r3, r2
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b086      	sub	sp, #24
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 800a668:	2300      	movs	r3, #0
 800a66a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	885b      	ldrh	r3, [r3, #2]
 800a670:	b29a      	uxth	r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	b29b      	uxth	r3, r3
 800a678:	429a      	cmp	r2, r3
 800a67a:	d91c      	bls.n	800a6b6 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
  {
    ptr = desc->bLength;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	b29b      	uxth	r3, r3
 800a682:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a684:	e011      	b.n	800a6aa <USBD_AUDIO_GetAudioHeaderDesc+0x52>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a686:	f107 030a 	add.w	r3, r7, #10
 800a68a:	4619      	mov	r1, r3
 800a68c:	6978      	ldr	r0, [r7, #20]
 800a68e:	f000 fbe6 	bl	800ae5e <USBD_GetNextDesc>
 800a692:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	785b      	ldrb	r3, [r3, #1]
 800a698:	2b24      	cmp	r3, #36	; 0x24
 800a69a:	d106      	bne.n	800a6aa <USBD_AUDIO_GetAudioHeaderDesc+0x52>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d102      	bne.n	800a6aa <USBD_AUDIO_GetAudioHeaderDesc+0x52>
      {
        pAudioDesc = (uint8_t *)pdesc;
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	613b      	str	r3, [r7, #16]
        break;
 800a6a8:	e005      	b.n	800a6b6 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
    while (ptr < desc->wTotalLength)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	885b      	ldrh	r3, [r3, #2]
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	897b      	ldrh	r3, [r7, #10]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d8e7      	bhi.n	800a686 <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
      }
    }
  }
  return pAudioDesc;
 800a6b6:	693b      	ldr	r3, [r7, #16]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3718      	adds	r7, #24
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d101      	bne.n	800a6d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	e01f      	b.n	800a718 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d003      	beq.n	800a6fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2201      	movs	r2, #1
 800a702:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	79fa      	ldrb	r2, [r7, #7]
 800a70a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f001 fd93 	bl	800c238 <USBD_LL_Init>
 800a712:	4603      	mov	r3, r0
 800a714:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a716:	7dfb      	ldrb	r3, [r7, #23]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3718      	adds	r7, #24
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a72a:	2300      	movs	r3, #0
 800a72c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d101      	bne.n	800a738 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a734:	2303      	movs	r3, #3
 800a736:	e025      	b.n	800a784 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	32ae      	adds	r2, #174	; 0xae
 800a74a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a750:	2b00      	cmp	r3, #0
 800a752:	d00f      	beq.n	800a774 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	32ae      	adds	r2, #174	; 0xae
 800a75e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a764:	f107 020e 	add.w	r2, r7, #14
 800a768:	4610      	mov	r0, r2
 800a76a:	4798      	blx	r3
 800a76c:	4602      	mov	r2, r0
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a77a:	1c5a      	adds	r2, r3, #1
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3710      	adds	r7, #16
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f001 fda1 	bl	800c2dc <USBD_LL_Start>
 800a79a:	4603      	mov	r3, r0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a7ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	370c      	adds	r7, #12
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr

0800a7ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b084      	sub	sp, #16
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d009      	beq.n	800a7e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	78fa      	ldrb	r2, [r7, #3]
 800a7de:	4611      	mov	r1, r2
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	4798      	blx	r3
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b084      	sub	sp, #16
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7fe:	2300      	movs	r3, #0
 800a800:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	78fa      	ldrb	r2, [r7, #3]
 800a80c:	4611      	mov	r1, r2
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	4798      	blx	r3
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d001      	beq.n	800a81c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a818:	2303      	movs	r3, #3
 800a81a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b084      	sub	sp, #16
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	4618      	mov	r0, r3
 800a83a:	f001 f8fe 	bl	800ba3a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a84c:	461a      	mov	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a85a:	f003 031f 	and.w	r3, r3, #31
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d01a      	beq.n	800a898 <USBD_LL_SetupStage+0x72>
 800a862:	2b02      	cmp	r3, #2
 800a864:	d822      	bhi.n	800a8ac <USBD_LL_SetupStage+0x86>
 800a866:	2b00      	cmp	r3, #0
 800a868:	d002      	beq.n	800a870 <USBD_LL_SetupStage+0x4a>
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d00a      	beq.n	800a884 <USBD_LL_SetupStage+0x5e>
 800a86e:	e01d      	b.n	800a8ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a876:	4619      	mov	r1, r3
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fb2b 	bl	800aed4 <USBD_StdDevReq>
 800a87e:	4603      	mov	r3, r0
 800a880:	73fb      	strb	r3, [r7, #15]
      break;
 800a882:	e020      	b.n	800a8c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a88a:	4619      	mov	r1, r3
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fb93 	bl	800afb8 <USBD_StdItfReq>
 800a892:	4603      	mov	r3, r0
 800a894:	73fb      	strb	r3, [r7, #15]
      break;
 800a896:	e016      	b.n	800a8c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a89e:	4619      	mov	r1, r3
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fbf5 	bl	800b090 <USBD_StdEPReq>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	73fb      	strb	r3, [r7, #15]
      break;
 800a8aa:	e00c      	b.n	800a8c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a8b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f001 fd6e 	bl	800c39c <USBD_LL_StallEP>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a8c4:	bf00      	nop
  }

  return ret;
 800a8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	607a      	str	r2, [r7, #4]
 800a8dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a8e2:	7afb      	ldrb	r3, [r7, #11]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d16e      	bne.n	800a9c6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a8ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8f6:	2b03      	cmp	r3, #3
 800a8f8:	f040 8098 	bne.w	800aa2c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	689a      	ldr	r2, [r3, #8]
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	429a      	cmp	r2, r3
 800a906:	d913      	bls.n	800a930 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	689a      	ldr	r2, [r3, #8]
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	1ad2      	subs	r2, r2, r3
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	68da      	ldr	r2, [r3, #12]
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	4293      	cmp	r3, r2
 800a920:	bf28      	it	cs
 800a922:	4613      	movcs	r3, r2
 800a924:	461a      	mov	r2, r3
 800a926:	6879      	ldr	r1, [r7, #4]
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f001 f97a 	bl	800bc22 <USBD_CtlContinueRx>
 800a92e:	e07d      	b.n	800aa2c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a936:	f003 031f 	and.w	r3, r3, #31
 800a93a:	2b02      	cmp	r3, #2
 800a93c:	d014      	beq.n	800a968 <USBD_LL_DataOutStage+0x98>
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d81d      	bhi.n	800a97e <USBD_LL_DataOutStage+0xae>
 800a942:	2b00      	cmp	r3, #0
 800a944:	d002      	beq.n	800a94c <USBD_LL_DataOutStage+0x7c>
 800a946:	2b01      	cmp	r3, #1
 800a948:	d003      	beq.n	800a952 <USBD_LL_DataOutStage+0x82>
 800a94a:	e018      	b.n	800a97e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a94c:	2300      	movs	r3, #0
 800a94e:	75bb      	strb	r3, [r7, #22]
            break;
 800a950:	e018      	b.n	800a984 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	4619      	mov	r1, r3
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f000 fa64 	bl	800ae2a <USBD_CoreFindIF>
 800a962:	4603      	mov	r3, r0
 800a964:	75bb      	strb	r3, [r7, #22]
            break;
 800a966:	e00d      	b.n	800a984 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	4619      	mov	r1, r3
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f000 fa66 	bl	800ae44 <USBD_CoreFindEP>
 800a978:	4603      	mov	r3, r0
 800a97a:	75bb      	strb	r3, [r7, #22]
            break;
 800a97c:	e002      	b.n	800a984 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a97e:	2300      	movs	r3, #0
 800a980:	75bb      	strb	r3, [r7, #22]
            break;
 800a982:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a984:	7dbb      	ldrb	r3, [r7, #22]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d119      	bne.n	800a9be <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a990:	b2db      	uxtb	r3, r3
 800a992:	2b03      	cmp	r3, #3
 800a994:	d113      	bne.n	800a9be <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a996:	7dba      	ldrb	r2, [r7, #22]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	32ae      	adds	r2, #174	; 0xae
 800a99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00b      	beq.n	800a9be <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a9a6:	7dba      	ldrb	r2, [r7, #22]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a9ae:	7dba      	ldrb	r2, [r7, #22]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	32ae      	adds	r2, #174	; 0xae
 800a9b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f001 f940 	bl	800bc44 <USBD_CtlSendStatus>
 800a9c4:	e032      	b.n	800aa2c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a9c6:	7afb      	ldrb	r3, [r7, #11]
 800a9c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 fa37 	bl	800ae44 <USBD_CoreFindEP>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9da:	7dbb      	ldrb	r3, [r7, #22]
 800a9dc:	2bff      	cmp	r3, #255	; 0xff
 800a9de:	d025      	beq.n	800aa2c <USBD_LL_DataOutStage+0x15c>
 800a9e0:	7dbb      	ldrb	r3, [r7, #22]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d122      	bne.n	800aa2c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	2b03      	cmp	r3, #3
 800a9f0:	d117      	bne.n	800aa22 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a9f2:	7dba      	ldrb	r2, [r7, #22]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	32ae      	adds	r2, #174	; 0xae
 800a9f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9fc:	699b      	ldr	r3, [r3, #24]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00f      	beq.n	800aa22 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800aa02:	7dba      	ldrb	r2, [r7, #22]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800aa0a:	7dba      	ldrb	r2, [r7, #22]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	32ae      	adds	r2, #174	; 0xae
 800aa10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	7afa      	ldrb	r2, [r7, #11]
 800aa18:	4611      	mov	r1, r2
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	4798      	blx	r3
 800aa1e:	4603      	mov	r3, r0
 800aa20:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800aa22:	7dfb      	ldrb	r3, [r7, #23]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d001      	beq.n	800aa2c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800aa28:	7dfb      	ldrb	r3, [r7, #23]
 800aa2a:	e000      	b.n	800aa2e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3718      	adds	r7, #24
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b086      	sub	sp, #24
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	60f8      	str	r0, [r7, #12]
 800aa3e:	460b      	mov	r3, r1
 800aa40:	607a      	str	r2, [r7, #4]
 800aa42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800aa44:	7afb      	ldrb	r3, [r7, #11]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d16f      	bne.n	800ab2a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	3314      	adds	r3, #20
 800aa4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d15a      	bne.n	800ab10 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	689a      	ldr	r2, [r3, #8]
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d914      	bls.n	800aa90 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	689a      	ldr	r2, [r3, #8]
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	1ad2      	subs	r2, r2, r3
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	6879      	ldr	r1, [r7, #4]
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f001 f8a2 	bl	800bbc6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa82:	2300      	movs	r3, #0
 800aa84:	2200      	movs	r2, #0
 800aa86:	2100      	movs	r1, #0
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f001 fd31 	bl	800c4f0 <USBD_LL_PrepareReceive>
 800aa8e:	e03f      	b.n	800ab10 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	68da      	ldr	r2, [r3, #12]
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d11c      	bne.n	800aad6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	685a      	ldr	r2, [r3, #4]
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d316      	bcc.n	800aad6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	685a      	ldr	r2, [r3, #4]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d20f      	bcs.n	800aad6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aab6:	2200      	movs	r2, #0
 800aab8:	2100      	movs	r1, #0
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f001 f883 	bl	800bbc6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aac8:	2300      	movs	r3, #0
 800aaca:	2200      	movs	r2, #0
 800aacc:	2100      	movs	r1, #0
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f001 fd0e 	bl	800c4f0 <USBD_LL_PrepareReceive>
 800aad4:	e01c      	b.n	800ab10 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d10f      	bne.n	800ab02 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d009      	beq.n	800ab02 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab02:	2180      	movs	r1, #128	; 0x80
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f001 fc49 	bl	800c39c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	f001 f8ad 	bl	800bc6a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d03a      	beq.n	800ab90 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f7ff fe42 	bl	800a7a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ab28:	e032      	b.n	800ab90 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ab2a:	7afb      	ldrb	r3, [r7, #11]
 800ab2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	4619      	mov	r1, r3
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f000 f985 	bl	800ae44 <USBD_CoreFindEP>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab3e:	7dfb      	ldrb	r3, [r7, #23]
 800ab40:	2bff      	cmp	r3, #255	; 0xff
 800ab42:	d025      	beq.n	800ab90 <USBD_LL_DataInStage+0x15a>
 800ab44:	7dfb      	ldrb	r3, [r7, #23]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d122      	bne.n	800ab90 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2b03      	cmp	r3, #3
 800ab54:	d11c      	bne.n	800ab90 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ab56:	7dfa      	ldrb	r2, [r7, #23]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	32ae      	adds	r2, #174	; 0xae
 800ab5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab60:	695b      	ldr	r3, [r3, #20]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d014      	beq.n	800ab90 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ab66:	7dfa      	ldrb	r2, [r7, #23]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ab6e:	7dfa      	ldrb	r2, [r7, #23]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	32ae      	adds	r2, #174	; 0xae
 800ab74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab78:	695b      	ldr	r3, [r3, #20]
 800ab7a:	7afa      	ldrb	r2, [r7, #11]
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	4798      	blx	r3
 800ab82:	4603      	mov	r3, r0
 800ab84:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ab86:	7dbb      	ldrb	r3, [r7, #22]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ab8c:	7dbb      	ldrb	r3, [r7, #22]
 800ab8e:	e000      	b.n	800ab92 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3718      	adds	r7, #24
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b084      	sub	sp, #16
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aba2:	2300      	movs	r3, #0
 800aba4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2201      	movs	r2, #1
 800abaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d014      	beq.n	800ac00 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00e      	beq.n	800ac00 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	6852      	ldr	r2, [r2, #4]
 800abee:	b2d2      	uxtb	r2, r2
 800abf0:	4611      	mov	r1, r2
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	4798      	blx	r3
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800abfc:	2303      	movs	r3, #3
 800abfe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac00:	2340      	movs	r3, #64	; 0x40
 800ac02:	2200      	movs	r2, #0
 800ac04:	2100      	movs	r1, #0
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f001 fb83 	bl	800c312 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2240      	movs	r2, #64	; 0x40
 800ac18:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac1c:	2340      	movs	r3, #64	; 0x40
 800ac1e:	2200      	movs	r2, #0
 800ac20:	2180      	movs	r1, #128	; 0x80
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f001 fb75 	bl	800c312 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2240      	movs	r2, #64	; 0x40
 800ac32:	621a      	str	r2, [r3, #32]

  return ret;
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac3e:	b480      	push	{r7}
 800ac40:	b083      	sub	sp, #12
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
 800ac46:	460b      	mov	r3, r1
 800ac48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	78fa      	ldrb	r2, [r7, #3]
 800ac4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	370c      	adds	r7, #12
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr

0800ac5e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac5e:	b480      	push	{r7}
 800ac60:	b083      	sub	sp, #12
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b04      	cmp	r3, #4
 800ac70:	d006      	beq.n	800ac80 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2204      	movs	r2, #4
 800ac84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	370c      	adds	r7, #12
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b083      	sub	sp, #12
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	2b04      	cmp	r3, #4
 800aca8:	d106      	bne.n	800acb8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800acb0:	b2da      	uxtb	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	370c      	adds	r7, #12
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b082      	sub	sp, #8
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	2b03      	cmp	r3, #3
 800acd8:	d110      	bne.n	800acfc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d00b      	beq.n	800acfc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acea:	69db      	ldr	r3, [r3, #28]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d005      	beq.n	800acfc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acf6:	69db      	ldr	r3, [r3, #28]
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3708      	adds	r7, #8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b082      	sub	sp, #8
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
 800ad0e:	460b      	mov	r3, r1
 800ad10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	32ae      	adds	r2, #174	; 0xae
 800ad1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d101      	bne.n	800ad28 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ad24:	2303      	movs	r3, #3
 800ad26:	e01c      	b.n	800ad62 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	2b03      	cmp	r3, #3
 800ad32:	d115      	bne.n	800ad60 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	32ae      	adds	r2, #174	; 0xae
 800ad3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad42:	6a1b      	ldr	r3, [r3, #32]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00b      	beq.n	800ad60 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	32ae      	adds	r2, #174	; 0xae
 800ad52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad56:	6a1b      	ldr	r3, [r3, #32]
 800ad58:	78fa      	ldrb	r2, [r7, #3]
 800ad5a:	4611      	mov	r1, r2
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b082      	sub	sp, #8
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	460b      	mov	r3, r1
 800ad74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	32ae      	adds	r2, #174	; 0xae
 800ad80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d101      	bne.n	800ad8c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ad88:	2303      	movs	r3, #3
 800ad8a:	e01c      	b.n	800adc6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	2b03      	cmp	r3, #3
 800ad96:	d115      	bne.n	800adc4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	32ae      	adds	r2, #174	; 0xae
 800ada2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00b      	beq.n	800adc4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	32ae      	adds	r2, #174	; 0xae
 800adb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbc:	78fa      	ldrb	r2, [r7, #3]
 800adbe:	4611      	mov	r1, r2
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800adce:	b480      	push	{r7}
 800add0:	b083      	sub	sp, #12
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800add6:	2300      	movs	r3, #0
}
 800add8:	4618      	mov	r0, r3
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800adec:	2300      	movs	r3, #0
 800adee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00e      	beq.n	800ae20 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	6852      	ldr	r2, [r2, #4]
 800ae0e:	b2d2      	uxtb	r2, r2
 800ae10:	4611      	mov	r1, r2
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	4798      	blx	r3
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d001      	beq.n	800ae20 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ae1c:	2303      	movs	r3, #3
 800ae1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ae20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	b083      	sub	sp, #12
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	460b      	mov	r3, r1
 800ae34:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ae36:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ae50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	370c      	adds	r7, #12
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr

0800ae5e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ae5e:	b480      	push	{r7}
 800ae60:	b085      	sub	sp, #20
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	881a      	ldrh	r2, [r3, #0]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	4413      	add	r3, r2
 800ae78:	b29a      	uxth	r2, r3
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	461a      	mov	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4413      	add	r3, r2
 800ae88:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b087      	sub	sp, #28
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	3301      	adds	r3, #1
 800aeae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aeb6:	8a3b      	ldrh	r3, [r7, #16]
 800aeb8:	021b      	lsls	r3, r3, #8
 800aeba:	b21a      	sxth	r2, r3
 800aebc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	b21b      	sxth	r3, r3
 800aec4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aec6:	89fb      	ldrh	r3, [r7, #14]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	371c      	adds	r7, #28
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aeea:	2b40      	cmp	r3, #64	; 0x40
 800aeec:	d005      	beq.n	800aefa <USBD_StdDevReq+0x26>
 800aeee:	2b40      	cmp	r3, #64	; 0x40
 800aef0:	d857      	bhi.n	800afa2 <USBD_StdDevReq+0xce>
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00f      	beq.n	800af16 <USBD_StdDevReq+0x42>
 800aef6:	2b20      	cmp	r3, #32
 800aef8:	d153      	bne.n	800afa2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	32ae      	adds	r2, #174	; 0xae
 800af04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	4798      	blx	r3
 800af10:	4603      	mov	r3, r0
 800af12:	73fb      	strb	r3, [r7, #15]
      break;
 800af14:	e04a      	b.n	800afac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	785b      	ldrb	r3, [r3, #1]
 800af1a:	2b09      	cmp	r3, #9
 800af1c:	d83b      	bhi.n	800af96 <USBD_StdDevReq+0xc2>
 800af1e:	a201      	add	r2, pc, #4	; (adr r2, 800af24 <USBD_StdDevReq+0x50>)
 800af20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af24:	0800af79 	.word	0x0800af79
 800af28:	0800af8d 	.word	0x0800af8d
 800af2c:	0800af97 	.word	0x0800af97
 800af30:	0800af83 	.word	0x0800af83
 800af34:	0800af97 	.word	0x0800af97
 800af38:	0800af57 	.word	0x0800af57
 800af3c:	0800af4d 	.word	0x0800af4d
 800af40:	0800af97 	.word	0x0800af97
 800af44:	0800af6f 	.word	0x0800af6f
 800af48:	0800af61 	.word	0x0800af61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800af4c:	6839      	ldr	r1, [r7, #0]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fa3c 	bl	800b3cc <USBD_GetDescriptor>
          break;
 800af54:	e024      	b.n	800afa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800af56:	6839      	ldr	r1, [r7, #0]
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 fbcb 	bl	800b6f4 <USBD_SetAddress>
          break;
 800af5e:	e01f      	b.n	800afa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800af60:	6839      	ldr	r1, [r7, #0]
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 fc0a 	bl	800b77c <USBD_SetConfig>
 800af68:	4603      	mov	r3, r0
 800af6a:	73fb      	strb	r3, [r7, #15]
          break;
 800af6c:	e018      	b.n	800afa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fcad 	bl	800b8d0 <USBD_GetConfig>
          break;
 800af76:	e013      	b.n	800afa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800af78:	6839      	ldr	r1, [r7, #0]
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fcde 	bl	800b93c <USBD_GetStatus>
          break;
 800af80:	e00e      	b.n	800afa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800af82:	6839      	ldr	r1, [r7, #0]
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 fd0d 	bl	800b9a4 <USBD_SetFeature>
          break;
 800af8a:	e009      	b.n	800afa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800af8c:	6839      	ldr	r1, [r7, #0]
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 fd31 	bl	800b9f6 <USBD_ClrFeature>
          break;
 800af94:	e004      	b.n	800afa0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800af96:	6839      	ldr	r1, [r7, #0]
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 fd88 	bl	800baae <USBD_CtlError>
          break;
 800af9e:	bf00      	nop
      }
      break;
 800afa0:	e004      	b.n	800afac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800afa2:	6839      	ldr	r1, [r7, #0]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 fd82 	bl	800baae <USBD_CtlError>
      break;
 800afaa:	bf00      	nop
  }

  return ret;
 800afac:	7bfb      	ldrb	r3, [r7, #15]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop

0800afb8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afc2:	2300      	movs	r3, #0
 800afc4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afce:	2b40      	cmp	r3, #64	; 0x40
 800afd0:	d005      	beq.n	800afde <USBD_StdItfReq+0x26>
 800afd2:	2b40      	cmp	r3, #64	; 0x40
 800afd4:	d852      	bhi.n	800b07c <USBD_StdItfReq+0xc4>
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d001      	beq.n	800afde <USBD_StdItfReq+0x26>
 800afda:	2b20      	cmp	r3, #32
 800afdc:	d14e      	bne.n	800b07c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	3b01      	subs	r3, #1
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d840      	bhi.n	800b06e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	889b      	ldrh	r3, [r3, #4]
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d836      	bhi.n	800b064 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	889b      	ldrh	r3, [r3, #4]
 800affa:	b2db      	uxtb	r3, r3
 800affc:	4619      	mov	r1, r3
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f7ff ff13 	bl	800ae2a <USBD_CoreFindIF>
 800b004:	4603      	mov	r3, r0
 800b006:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b008:	7bbb      	ldrb	r3, [r7, #14]
 800b00a:	2bff      	cmp	r3, #255	; 0xff
 800b00c:	d01d      	beq.n	800b04a <USBD_StdItfReq+0x92>
 800b00e:	7bbb      	ldrb	r3, [r7, #14]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d11a      	bne.n	800b04a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b014:	7bba      	ldrb	r2, [r7, #14]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	32ae      	adds	r2, #174	; 0xae
 800b01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00f      	beq.n	800b044 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b024:	7bba      	ldrb	r2, [r7, #14]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b02c:	7bba      	ldrb	r2, [r7, #14]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	32ae      	adds	r2, #174	; 0xae
 800b032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	6839      	ldr	r1, [r7, #0]
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	4798      	blx	r3
 800b03e:	4603      	mov	r3, r0
 800b040:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b042:	e004      	b.n	800b04e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b044:	2303      	movs	r3, #3
 800b046:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b048:	e001      	b.n	800b04e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b04a:	2303      	movs	r3, #3
 800b04c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	88db      	ldrh	r3, [r3, #6]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d110      	bne.n	800b078 <USBD_StdItfReq+0xc0>
 800b056:	7bfb      	ldrb	r3, [r7, #15]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d10d      	bne.n	800b078 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 fdf1 	bl	800bc44 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b062:	e009      	b.n	800b078 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 fd21 	bl	800baae <USBD_CtlError>
          break;
 800b06c:	e004      	b.n	800b078 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 fd1c 	bl	800baae <USBD_CtlError>
          break;
 800b076:	e000      	b.n	800b07a <USBD_StdItfReq+0xc2>
          break;
 800b078:	bf00      	nop
      }
      break;
 800b07a:	e004      	b.n	800b086 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fd15 	bl	800baae <USBD_CtlError>
      break;
 800b084:	bf00      	nop
  }

  return ret;
 800b086:	7bfb      	ldrb	r3, [r7, #15]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b09a:	2300      	movs	r3, #0
 800b09c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	889b      	ldrh	r3, [r3, #4]
 800b0a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0ac:	2b40      	cmp	r3, #64	; 0x40
 800b0ae:	d007      	beq.n	800b0c0 <USBD_StdEPReq+0x30>
 800b0b0:	2b40      	cmp	r3, #64	; 0x40
 800b0b2:	f200 817f 	bhi.w	800b3b4 <USBD_StdEPReq+0x324>
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d02a      	beq.n	800b110 <USBD_StdEPReq+0x80>
 800b0ba:	2b20      	cmp	r3, #32
 800b0bc:	f040 817a 	bne.w	800b3b4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b0c0:	7bbb      	ldrb	r3, [r7, #14]
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f7ff febd 	bl	800ae44 <USBD_CoreFindEP>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0ce:	7b7b      	ldrb	r3, [r7, #13]
 800b0d0:	2bff      	cmp	r3, #255	; 0xff
 800b0d2:	f000 8174 	beq.w	800b3be <USBD_StdEPReq+0x32e>
 800b0d6:	7b7b      	ldrb	r3, [r7, #13]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f040 8170 	bne.w	800b3be <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b0de:	7b7a      	ldrb	r2, [r7, #13]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b0e6:	7b7a      	ldrb	r2, [r7, #13]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	32ae      	adds	r2, #174	; 0xae
 800b0ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f000 8163 	beq.w	800b3be <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b0f8:	7b7a      	ldrb	r2, [r7, #13]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	32ae      	adds	r2, #174	; 0xae
 800b0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	6839      	ldr	r1, [r7, #0]
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	4798      	blx	r3
 800b10a:	4603      	mov	r3, r0
 800b10c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b10e:	e156      	b.n	800b3be <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	785b      	ldrb	r3, [r3, #1]
 800b114:	2b03      	cmp	r3, #3
 800b116:	d008      	beq.n	800b12a <USBD_StdEPReq+0x9a>
 800b118:	2b03      	cmp	r3, #3
 800b11a:	f300 8145 	bgt.w	800b3a8 <USBD_StdEPReq+0x318>
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f000 809b 	beq.w	800b25a <USBD_StdEPReq+0x1ca>
 800b124:	2b01      	cmp	r3, #1
 800b126:	d03c      	beq.n	800b1a2 <USBD_StdEPReq+0x112>
 800b128:	e13e      	b.n	800b3a8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b130:	b2db      	uxtb	r3, r3
 800b132:	2b02      	cmp	r3, #2
 800b134:	d002      	beq.n	800b13c <USBD_StdEPReq+0xac>
 800b136:	2b03      	cmp	r3, #3
 800b138:	d016      	beq.n	800b168 <USBD_StdEPReq+0xd8>
 800b13a:	e02c      	b.n	800b196 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b13c:	7bbb      	ldrb	r3, [r7, #14]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00d      	beq.n	800b15e <USBD_StdEPReq+0xce>
 800b142:	7bbb      	ldrb	r3, [r7, #14]
 800b144:	2b80      	cmp	r3, #128	; 0x80
 800b146:	d00a      	beq.n	800b15e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b148:	7bbb      	ldrb	r3, [r7, #14]
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f001 f925 	bl	800c39c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b152:	2180      	movs	r1, #128	; 0x80
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f001 f921 	bl	800c39c <USBD_LL_StallEP>
 800b15a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b15c:	e020      	b.n	800b1a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b15e:	6839      	ldr	r1, [r7, #0]
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fca4 	bl	800baae <USBD_CtlError>
              break;
 800b166:	e01b      	b.n	800b1a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	885b      	ldrh	r3, [r3, #2]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d10e      	bne.n	800b18e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b170:	7bbb      	ldrb	r3, [r7, #14]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00b      	beq.n	800b18e <USBD_StdEPReq+0xfe>
 800b176:	7bbb      	ldrb	r3, [r7, #14]
 800b178:	2b80      	cmp	r3, #128	; 0x80
 800b17a:	d008      	beq.n	800b18e <USBD_StdEPReq+0xfe>
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	88db      	ldrh	r3, [r3, #6]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d104      	bne.n	800b18e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b184:	7bbb      	ldrb	r3, [r7, #14]
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f001 f907 	bl	800c39c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 fd58 	bl	800bc44 <USBD_CtlSendStatus>

              break;
 800b194:	e004      	b.n	800b1a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fc88 	bl	800baae <USBD_CtlError>
              break;
 800b19e:	bf00      	nop
          }
          break;
 800b1a0:	e107      	b.n	800b3b2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	2b02      	cmp	r3, #2
 800b1ac:	d002      	beq.n	800b1b4 <USBD_StdEPReq+0x124>
 800b1ae:	2b03      	cmp	r3, #3
 800b1b0:	d016      	beq.n	800b1e0 <USBD_StdEPReq+0x150>
 800b1b2:	e04b      	b.n	800b24c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1b4:	7bbb      	ldrb	r3, [r7, #14]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00d      	beq.n	800b1d6 <USBD_StdEPReq+0x146>
 800b1ba:	7bbb      	ldrb	r3, [r7, #14]
 800b1bc:	2b80      	cmp	r3, #128	; 0x80
 800b1be:	d00a      	beq.n	800b1d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1c0:	7bbb      	ldrb	r3, [r7, #14]
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f001 f8e9 	bl	800c39c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1ca:	2180      	movs	r1, #128	; 0x80
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f001 f8e5 	bl	800c39c <USBD_LL_StallEP>
 800b1d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1d4:	e040      	b.n	800b258 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b1d6:	6839      	ldr	r1, [r7, #0]
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 fc68 	bl	800baae <USBD_CtlError>
              break;
 800b1de:	e03b      	b.n	800b258 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	885b      	ldrh	r3, [r3, #2]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d136      	bne.n	800b256 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b1e8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d004      	beq.n	800b1fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b1f2:	7bbb      	ldrb	r3, [r7, #14]
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f001 f8ef 	bl	800c3da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 fd21 	bl	800bc44 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b202:	7bbb      	ldrb	r3, [r7, #14]
 800b204:	4619      	mov	r1, r3
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7ff fe1c 	bl	800ae44 <USBD_CoreFindEP>
 800b20c:	4603      	mov	r3, r0
 800b20e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b210:	7b7b      	ldrb	r3, [r7, #13]
 800b212:	2bff      	cmp	r3, #255	; 0xff
 800b214:	d01f      	beq.n	800b256 <USBD_StdEPReq+0x1c6>
 800b216:	7b7b      	ldrb	r3, [r7, #13]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d11c      	bne.n	800b256 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b21c:	7b7a      	ldrb	r2, [r7, #13]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b224:	7b7a      	ldrb	r2, [r7, #13]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	32ae      	adds	r2, #174	; 0xae
 800b22a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d010      	beq.n	800b256 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b234:	7b7a      	ldrb	r2, [r7, #13]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	32ae      	adds	r2, #174	; 0xae
 800b23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	4798      	blx	r3
 800b246:	4603      	mov	r3, r0
 800b248:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b24a:	e004      	b.n	800b256 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b24c:	6839      	ldr	r1, [r7, #0]
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 fc2d 	bl	800baae <USBD_CtlError>
              break;
 800b254:	e000      	b.n	800b258 <USBD_StdEPReq+0x1c8>
              break;
 800b256:	bf00      	nop
          }
          break;
 800b258:	e0ab      	b.n	800b3b2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b02      	cmp	r3, #2
 800b264:	d002      	beq.n	800b26c <USBD_StdEPReq+0x1dc>
 800b266:	2b03      	cmp	r3, #3
 800b268:	d032      	beq.n	800b2d0 <USBD_StdEPReq+0x240>
 800b26a:	e097      	b.n	800b39c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b26c:	7bbb      	ldrb	r3, [r7, #14]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d007      	beq.n	800b282 <USBD_StdEPReq+0x1f2>
 800b272:	7bbb      	ldrb	r3, [r7, #14]
 800b274:	2b80      	cmp	r3, #128	; 0x80
 800b276:	d004      	beq.n	800b282 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fc17 	bl	800baae <USBD_CtlError>
                break;
 800b280:	e091      	b.n	800b3a6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b282:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b286:	2b00      	cmp	r3, #0
 800b288:	da0b      	bge.n	800b2a2 <USBD_StdEPReq+0x212>
 800b28a:	7bbb      	ldrb	r3, [r7, #14]
 800b28c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b290:	4613      	mov	r3, r2
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	3310      	adds	r3, #16
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	4413      	add	r3, r2
 800b29e:	3304      	adds	r3, #4
 800b2a0:	e00b      	b.n	800b2ba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2a2:	7bbb      	ldrb	r3, [r7, #14]
 800b2a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2a8:	4613      	mov	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	4413      	add	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2202      	movs	r2, #2
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fc61 	bl	800bb90 <USBD_CtlSendData>
              break;
 800b2ce:	e06a      	b.n	800b3a6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b2d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	da11      	bge.n	800b2fc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b2d8:	7bbb      	ldrb	r3, [r7, #14]
 800b2da:	f003 020f 	and.w	r2, r3, #15
 800b2de:	6879      	ldr	r1, [r7, #4]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	4413      	add	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	440b      	add	r3, r1
 800b2ea:	3324      	adds	r3, #36	; 0x24
 800b2ec:	881b      	ldrh	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d117      	bne.n	800b322 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b2f2:	6839      	ldr	r1, [r7, #0]
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 fbda 	bl	800baae <USBD_CtlError>
                  break;
 800b2fa:	e054      	b.n	800b3a6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b2fc:	7bbb      	ldrb	r3, [r7, #14]
 800b2fe:	f003 020f 	and.w	r2, r3, #15
 800b302:	6879      	ldr	r1, [r7, #4]
 800b304:	4613      	mov	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	440b      	add	r3, r1
 800b30e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b312:	881b      	ldrh	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d104      	bne.n	800b322 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b318:	6839      	ldr	r1, [r7, #0]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 fbc7 	bl	800baae <USBD_CtlError>
                  break;
 800b320:	e041      	b.n	800b3a6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b322:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b326:	2b00      	cmp	r3, #0
 800b328:	da0b      	bge.n	800b342 <USBD_StdEPReq+0x2b2>
 800b32a:	7bbb      	ldrb	r3, [r7, #14]
 800b32c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b330:	4613      	mov	r3, r2
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	4413      	add	r3, r2
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	3310      	adds	r3, #16
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	4413      	add	r3, r2
 800b33e:	3304      	adds	r3, #4
 800b340:	e00b      	b.n	800b35a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b342:	7bbb      	ldrb	r3, [r7, #14]
 800b344:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b348:	4613      	mov	r3, r2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	4413      	add	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	4413      	add	r3, r2
 800b358:	3304      	adds	r3, #4
 800b35a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b35c:	7bbb      	ldrb	r3, [r7, #14]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d002      	beq.n	800b368 <USBD_StdEPReq+0x2d8>
 800b362:	7bbb      	ldrb	r3, [r7, #14]
 800b364:	2b80      	cmp	r3, #128	; 0x80
 800b366:	d103      	bne.n	800b370 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	2200      	movs	r2, #0
 800b36c:	601a      	str	r2, [r3, #0]
 800b36e:	e00e      	b.n	800b38e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b370:	7bbb      	ldrb	r3, [r7, #14]
 800b372:	4619      	mov	r1, r3
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f001 f84f 	bl	800c418 <USBD_LL_IsStallEP>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d003      	beq.n	800b388 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	2201      	movs	r2, #1
 800b384:	601a      	str	r2, [r3, #0]
 800b386:	e002      	b.n	800b38e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	2200      	movs	r2, #0
 800b38c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	2202      	movs	r2, #2
 800b392:	4619      	mov	r1, r3
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 fbfb 	bl	800bb90 <USBD_CtlSendData>
              break;
 800b39a:	e004      	b.n	800b3a6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fb85 	bl	800baae <USBD_CtlError>
              break;
 800b3a4:	bf00      	nop
          }
          break;
 800b3a6:	e004      	b.n	800b3b2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b3a8:	6839      	ldr	r1, [r7, #0]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fb7f 	bl	800baae <USBD_CtlError>
          break;
 800b3b0:	bf00      	nop
      }
      break;
 800b3b2:	e005      	b.n	800b3c0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b3b4:	6839      	ldr	r1, [r7, #0]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fb79 	bl	800baae <USBD_CtlError>
      break;
 800b3bc:	e000      	b.n	800b3c0 <USBD_StdEPReq+0x330>
      break;
 800b3be:	bf00      	nop
  }

  return ret;
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
	...

0800b3cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	885b      	ldrh	r3, [r3, #2]
 800b3e6:	0a1b      	lsrs	r3, r3, #8
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	2b0e      	cmp	r3, #14
 800b3ee:	f200 8152 	bhi.w	800b696 <USBD_GetDescriptor+0x2ca>
 800b3f2:	a201      	add	r2, pc, #4	; (adr r2, 800b3f8 <USBD_GetDescriptor+0x2c>)
 800b3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f8:	0800b469 	.word	0x0800b469
 800b3fc:	0800b481 	.word	0x0800b481
 800b400:	0800b4c1 	.word	0x0800b4c1
 800b404:	0800b697 	.word	0x0800b697
 800b408:	0800b697 	.word	0x0800b697
 800b40c:	0800b637 	.word	0x0800b637
 800b410:	0800b663 	.word	0x0800b663
 800b414:	0800b697 	.word	0x0800b697
 800b418:	0800b697 	.word	0x0800b697
 800b41c:	0800b697 	.word	0x0800b697
 800b420:	0800b697 	.word	0x0800b697
 800b424:	0800b697 	.word	0x0800b697
 800b428:	0800b697 	.word	0x0800b697
 800b42c:	0800b697 	.word	0x0800b697
 800b430:	0800b435 	.word	0x0800b435
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b43a:	69db      	ldr	r3, [r3, #28]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d00b      	beq.n	800b458 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b446:	69db      	ldr	r3, [r3, #28]
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	7c12      	ldrb	r2, [r2, #16]
 800b44c:	f107 0108 	add.w	r1, r7, #8
 800b450:	4610      	mov	r0, r2
 800b452:	4798      	blx	r3
 800b454:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b456:	e126      	b.n	800b6a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b458:	6839      	ldr	r1, [r7, #0]
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 fb27 	bl	800baae <USBD_CtlError>
        err++;
 800b460:	7afb      	ldrb	r3, [r7, #11]
 800b462:	3301      	adds	r3, #1
 800b464:	72fb      	strb	r3, [r7, #11]
      break;
 800b466:	e11e      	b.n	800b6a6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	7c12      	ldrb	r2, [r2, #16]
 800b474:	f107 0108 	add.w	r1, r7, #8
 800b478:	4610      	mov	r0, r2
 800b47a:	4798      	blx	r3
 800b47c:	60f8      	str	r0, [r7, #12]
      break;
 800b47e:	e112      	b.n	800b6a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	7c1b      	ldrb	r3, [r3, #16]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10d      	bne.n	800b4a4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b490:	f107 0208 	add.w	r2, r7, #8
 800b494:	4610      	mov	r0, r2
 800b496:	4798      	blx	r3
 800b498:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	3301      	adds	r3, #1
 800b49e:	2202      	movs	r2, #2
 800b4a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b4a2:	e100      	b.n	800b6a6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ac:	f107 0208 	add.w	r2, r7, #8
 800b4b0:	4610      	mov	r0, r2
 800b4b2:	4798      	blx	r3
 800b4b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	701a      	strb	r2, [r3, #0]
      break;
 800b4be:	e0f2      	b.n	800b6a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	885b      	ldrh	r3, [r3, #2]
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2b05      	cmp	r3, #5
 800b4c8:	f200 80ac 	bhi.w	800b624 <USBD_GetDescriptor+0x258>
 800b4cc:	a201      	add	r2, pc, #4	; (adr r2, 800b4d4 <USBD_GetDescriptor+0x108>)
 800b4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d2:	bf00      	nop
 800b4d4:	0800b4ed 	.word	0x0800b4ed
 800b4d8:	0800b521 	.word	0x0800b521
 800b4dc:	0800b555 	.word	0x0800b555
 800b4e0:	0800b589 	.word	0x0800b589
 800b4e4:	0800b5bd 	.word	0x0800b5bd
 800b4e8:	0800b5f1 	.word	0x0800b5f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00b      	beq.n	800b510 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	7c12      	ldrb	r2, [r2, #16]
 800b504:	f107 0108 	add.w	r1, r7, #8
 800b508:	4610      	mov	r0, r2
 800b50a:	4798      	blx	r3
 800b50c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b50e:	e091      	b.n	800b634 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b510:	6839      	ldr	r1, [r7, #0]
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 facb 	bl	800baae <USBD_CtlError>
            err++;
 800b518:	7afb      	ldrb	r3, [r7, #11]
 800b51a:	3301      	adds	r3, #1
 800b51c:	72fb      	strb	r3, [r7, #11]
          break;
 800b51e:	e089      	b.n	800b634 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00b      	beq.n	800b544 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	7c12      	ldrb	r2, [r2, #16]
 800b538:	f107 0108 	add.w	r1, r7, #8
 800b53c:	4610      	mov	r0, r2
 800b53e:	4798      	blx	r3
 800b540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b542:	e077      	b.n	800b634 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 fab1 	bl	800baae <USBD_CtlError>
            err++;
 800b54c:	7afb      	ldrb	r3, [r7, #11]
 800b54e:	3301      	adds	r3, #1
 800b550:	72fb      	strb	r3, [r7, #11]
          break;
 800b552:	e06f      	b.n	800b634 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00b      	beq.n	800b578 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	7c12      	ldrb	r2, [r2, #16]
 800b56c:	f107 0108 	add.w	r1, r7, #8
 800b570:	4610      	mov	r0, r2
 800b572:	4798      	blx	r3
 800b574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b576:	e05d      	b.n	800b634 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 fa97 	bl	800baae <USBD_CtlError>
            err++;
 800b580:	7afb      	ldrb	r3, [r7, #11]
 800b582:	3301      	adds	r3, #1
 800b584:	72fb      	strb	r3, [r7, #11]
          break;
 800b586:	e055      	b.n	800b634 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00b      	beq.n	800b5ac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b59a:	691b      	ldr	r3, [r3, #16]
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	7c12      	ldrb	r2, [r2, #16]
 800b5a0:	f107 0108 	add.w	r1, r7, #8
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	4798      	blx	r3
 800b5a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5aa:	e043      	b.n	800b634 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b5ac:	6839      	ldr	r1, [r7, #0]
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fa7d 	bl	800baae <USBD_CtlError>
            err++;
 800b5b4:	7afb      	ldrb	r3, [r7, #11]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b5ba:	e03b      	b.n	800b634 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5c2:	695b      	ldr	r3, [r3, #20]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00b      	beq.n	800b5e0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ce:	695b      	ldr	r3, [r3, #20]
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	7c12      	ldrb	r2, [r2, #16]
 800b5d4:	f107 0108 	add.w	r1, r7, #8
 800b5d8:	4610      	mov	r0, r2
 800b5da:	4798      	blx	r3
 800b5dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5de:	e029      	b.n	800b634 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b5e0:	6839      	ldr	r1, [r7, #0]
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fa63 	bl	800baae <USBD_CtlError>
            err++;
 800b5e8:	7afb      	ldrb	r3, [r7, #11]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b5ee:	e021      	b.n	800b634 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5f6:	699b      	ldr	r3, [r3, #24]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00b      	beq.n	800b614 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b602:	699b      	ldr	r3, [r3, #24]
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	7c12      	ldrb	r2, [r2, #16]
 800b608:	f107 0108 	add.w	r1, r7, #8
 800b60c:	4610      	mov	r0, r2
 800b60e:	4798      	blx	r3
 800b610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b612:	e00f      	b.n	800b634 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fa49 	bl	800baae <USBD_CtlError>
            err++;
 800b61c:	7afb      	ldrb	r3, [r7, #11]
 800b61e:	3301      	adds	r3, #1
 800b620:	72fb      	strb	r3, [r7, #11]
          break;
 800b622:	e007      	b.n	800b634 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b624:	6839      	ldr	r1, [r7, #0]
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 fa41 	bl	800baae <USBD_CtlError>
          err++;
 800b62c:	7afb      	ldrb	r3, [r7, #11]
 800b62e:	3301      	adds	r3, #1
 800b630:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b632:	bf00      	nop
      }
      break;
 800b634:	e037      	b.n	800b6a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	7c1b      	ldrb	r3, [r3, #16]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d109      	bne.n	800b652 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b646:	f107 0208 	add.w	r2, r7, #8
 800b64a:	4610      	mov	r0, r2
 800b64c:	4798      	blx	r3
 800b64e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b650:	e029      	b.n	800b6a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 fa2a 	bl	800baae <USBD_CtlError>
        err++;
 800b65a:	7afb      	ldrb	r3, [r7, #11]
 800b65c:	3301      	adds	r3, #1
 800b65e:	72fb      	strb	r3, [r7, #11]
      break;
 800b660:	e021      	b.n	800b6a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	7c1b      	ldrb	r3, [r3, #16]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d10d      	bne.n	800b686 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b672:	f107 0208 	add.w	r2, r7, #8
 800b676:	4610      	mov	r0, r2
 800b678:	4798      	blx	r3
 800b67a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3301      	adds	r3, #1
 800b680:	2207      	movs	r2, #7
 800b682:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b684:	e00f      	b.n	800b6a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b686:	6839      	ldr	r1, [r7, #0]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fa10 	bl	800baae <USBD_CtlError>
        err++;
 800b68e:	7afb      	ldrb	r3, [r7, #11]
 800b690:	3301      	adds	r3, #1
 800b692:	72fb      	strb	r3, [r7, #11]
      break;
 800b694:	e007      	b.n	800b6a6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b696:	6839      	ldr	r1, [r7, #0]
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 fa08 	bl	800baae <USBD_CtlError>
      err++;
 800b69e:	7afb      	ldrb	r3, [r7, #11]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	72fb      	strb	r3, [r7, #11]
      break;
 800b6a4:	bf00      	nop
  }

  if (err != 0U)
 800b6a6:	7afb      	ldrb	r3, [r7, #11]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d11e      	bne.n	800b6ea <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	88db      	ldrh	r3, [r3, #6]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d016      	beq.n	800b6e2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b6b4:	893b      	ldrh	r3, [r7, #8]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00e      	beq.n	800b6d8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	88da      	ldrh	r2, [r3, #6]
 800b6be:	893b      	ldrh	r3, [r7, #8]
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	bf28      	it	cs
 800b6c4:	4613      	movcs	r3, r2
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b6ca:	893b      	ldrh	r3, [r7, #8]
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	68f9      	ldr	r1, [r7, #12]
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 fa5d 	bl	800bb90 <USBD_CtlSendData>
 800b6d6:	e009      	b.n	800b6ec <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b6d8:	6839      	ldr	r1, [r7, #0]
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 f9e7 	bl	800baae <USBD_CtlError>
 800b6e0:	e004      	b.n	800b6ec <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 faae 	bl	800bc44 <USBD_CtlSendStatus>
 800b6e8:	e000      	b.n	800b6ec <USBD_GetDescriptor+0x320>
    return;
 800b6ea:	bf00      	nop
  }
}
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop

0800b6f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	889b      	ldrh	r3, [r3, #4]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d131      	bne.n	800b76a <USBD_SetAddress+0x76>
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	88db      	ldrh	r3, [r3, #6]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d12d      	bne.n	800b76a <USBD_SetAddress+0x76>
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	885b      	ldrh	r3, [r3, #2]
 800b712:	2b7f      	cmp	r3, #127	; 0x7f
 800b714:	d829      	bhi.n	800b76a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	885b      	ldrh	r3, [r3, #2]
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b720:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	2b03      	cmp	r3, #3
 800b72c:	d104      	bne.n	800b738 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b72e:	6839      	ldr	r1, [r7, #0]
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 f9bc 	bl	800baae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b736:	e01d      	b.n	800b774 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	7bfa      	ldrb	r2, [r7, #15]
 800b73c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b740:	7bfb      	ldrb	r3, [r7, #15]
 800b742:	4619      	mov	r1, r3
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 fe93 	bl	800c470 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 fa7a 	bl	800bc44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b750:	7bfb      	ldrb	r3, [r7, #15]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d004      	beq.n	800b760 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2202      	movs	r2, #2
 800b75a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b75e:	e009      	b.n	800b774 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2201      	movs	r2, #1
 800b764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b768:	e004      	b.n	800b774 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 f99e 	bl	800baae <USBD_CtlError>
  }
}
 800b772:	bf00      	nop
 800b774:	bf00      	nop
 800b776:	3710      	adds	r7, #16
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b786:	2300      	movs	r3, #0
 800b788:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	885b      	ldrh	r3, [r3, #2]
 800b78e:	b2da      	uxtb	r2, r3
 800b790:	4b4e      	ldr	r3, [pc, #312]	; (800b8cc <USBD_SetConfig+0x150>)
 800b792:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b794:	4b4d      	ldr	r3, [pc, #308]	; (800b8cc <USBD_SetConfig+0x150>)
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d905      	bls.n	800b7a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b79c:	6839      	ldr	r1, [r7, #0]
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 f985 	bl	800baae <USBD_CtlError>
    return USBD_FAIL;
 800b7a4:	2303      	movs	r3, #3
 800b7a6:	e08c      	b.n	800b8c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d002      	beq.n	800b7ba <USBD_SetConfig+0x3e>
 800b7b4:	2b03      	cmp	r3, #3
 800b7b6:	d029      	beq.n	800b80c <USBD_SetConfig+0x90>
 800b7b8:	e075      	b.n	800b8a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b7ba:	4b44      	ldr	r3, [pc, #272]	; (800b8cc <USBD_SetConfig+0x150>)
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d020      	beq.n	800b804 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b7c2:	4b42      	ldr	r3, [pc, #264]	; (800b8cc <USBD_SetConfig+0x150>)
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7cc:	4b3f      	ldr	r3, [pc, #252]	; (800b8cc <USBD_SetConfig+0x150>)
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f7fe fff1 	bl	800a7ba <USBD_SetClassConfig>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b7dc:	7bfb      	ldrb	r3, [r7, #15]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d008      	beq.n	800b7f4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b7e2:	6839      	ldr	r1, [r7, #0]
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 f962 	bl	800baae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2202      	movs	r2, #2
 800b7ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b7f2:	e065      	b.n	800b8c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fa25 	bl	800bc44 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2203      	movs	r2, #3
 800b7fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b802:	e05d      	b.n	800b8c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 fa1d 	bl	800bc44 <USBD_CtlSendStatus>
      break;
 800b80a:	e059      	b.n	800b8c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b80c:	4b2f      	ldr	r3, [pc, #188]	; (800b8cc <USBD_SetConfig+0x150>)
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d112      	bne.n	800b83a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2202      	movs	r2, #2
 800b818:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b81c:	4b2b      	ldr	r3, [pc, #172]	; (800b8cc <USBD_SetConfig+0x150>)
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	461a      	mov	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b826:	4b29      	ldr	r3, [pc, #164]	; (800b8cc <USBD_SetConfig+0x150>)
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	4619      	mov	r1, r3
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f7fe ffe0 	bl	800a7f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 fa06 	bl	800bc44 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b838:	e042      	b.n	800b8c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b83a:	4b24      	ldr	r3, [pc, #144]	; (800b8cc <USBD_SetConfig+0x150>)
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	461a      	mov	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	429a      	cmp	r2, r3
 800b846:	d02a      	beq.n	800b89e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	4619      	mov	r1, r3
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f7fe ffce 	bl	800a7f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b856:	4b1d      	ldr	r3, [pc, #116]	; (800b8cc <USBD_SetConfig+0x150>)
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	461a      	mov	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b860:	4b1a      	ldr	r3, [pc, #104]	; (800b8cc <USBD_SetConfig+0x150>)
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	4619      	mov	r1, r3
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f7fe ffa7 	bl	800a7ba <USBD_SetClassConfig>
 800b86c:	4603      	mov	r3, r0
 800b86e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b870:	7bfb      	ldrb	r3, [r7, #15]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00f      	beq.n	800b896 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b876:	6839      	ldr	r1, [r7, #0]
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 f918 	bl	800baae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	b2db      	uxtb	r3, r3
 800b884:	4619      	mov	r1, r3
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f7fe ffb3 	bl	800a7f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2202      	movs	r2, #2
 800b890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b894:	e014      	b.n	800b8c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 f9d4 	bl	800bc44 <USBD_CtlSendStatus>
      break;
 800b89c:	e010      	b.n	800b8c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 f9d0 	bl	800bc44 <USBD_CtlSendStatus>
      break;
 800b8a4:	e00c      	b.n	800b8c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b8a6:	6839      	ldr	r1, [r7, #0]
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 f900 	bl	800baae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b8ae:	4b07      	ldr	r3, [pc, #28]	; (800b8cc <USBD_SetConfig+0x150>)
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f7fe ff9c 	bl	800a7f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b8ba:	2303      	movs	r3, #3
 800b8bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b8be:	bf00      	nop
  }

  return ret;
 800b8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	24000444 	.word	0x24000444

0800b8d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	88db      	ldrh	r3, [r3, #6]
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d004      	beq.n	800b8ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b8e2:	6839      	ldr	r1, [r7, #0]
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 f8e2 	bl	800baae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b8ea:	e023      	b.n	800b934 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	dc02      	bgt.n	800b8fe <USBD_GetConfig+0x2e>
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	dc03      	bgt.n	800b904 <USBD_GetConfig+0x34>
 800b8fc:	e015      	b.n	800b92a <USBD_GetConfig+0x5a>
 800b8fe:	2b03      	cmp	r3, #3
 800b900:	d00b      	beq.n	800b91a <USBD_GetConfig+0x4a>
 800b902:	e012      	b.n	800b92a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	3308      	adds	r3, #8
 800b90e:	2201      	movs	r2, #1
 800b910:	4619      	mov	r1, r3
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f93c 	bl	800bb90 <USBD_CtlSendData>
        break;
 800b918:	e00c      	b.n	800b934 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	3304      	adds	r3, #4
 800b91e:	2201      	movs	r2, #1
 800b920:	4619      	mov	r1, r3
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 f934 	bl	800bb90 <USBD_CtlSendData>
        break;
 800b928:	e004      	b.n	800b934 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b92a:	6839      	ldr	r1, [r7, #0]
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 f8be 	bl	800baae <USBD_CtlError>
        break;
 800b932:	bf00      	nop
}
 800b934:	bf00      	nop
 800b936:	3708      	adds	r7, #8
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	3b01      	subs	r3, #1
 800b950:	2b02      	cmp	r3, #2
 800b952:	d81e      	bhi.n	800b992 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	88db      	ldrh	r3, [r3, #6]
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d004      	beq.n	800b966 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 f8a5 	bl	800baae <USBD_CtlError>
        break;
 800b964:	e01a      	b.n	800b99c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2201      	movs	r2, #1
 800b96a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b972:	2b00      	cmp	r3, #0
 800b974:	d005      	beq.n	800b982 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	f043 0202 	orr.w	r2, r3, #2
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	330c      	adds	r3, #12
 800b986:	2202      	movs	r2, #2
 800b988:	4619      	mov	r1, r3
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 f900 	bl	800bb90 <USBD_CtlSendData>
      break;
 800b990:	e004      	b.n	800b99c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b992:	6839      	ldr	r1, [r7, #0]
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 f88a 	bl	800baae <USBD_CtlError>
      break;
 800b99a:	bf00      	nop
  }
}
 800b99c:	bf00      	nop
 800b99e:	3708      	adds	r7, #8
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	885b      	ldrh	r3, [r3, #2]
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d107      	bne.n	800b9c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 f940 	bl	800bc44 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b9c4:	e013      	b.n	800b9ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	885b      	ldrh	r3, [r3, #2]
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	d10b      	bne.n	800b9e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	889b      	ldrh	r3, [r3, #4]
 800b9d2:	0a1b      	lsrs	r3, r3, #8
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	b2da      	uxtb	r2, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 f930 	bl	800bc44 <USBD_CtlSendStatus>
}
 800b9e4:	e003      	b.n	800b9ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b9e6:	6839      	ldr	r1, [r7, #0]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 f860 	bl	800baae <USBD_CtlError>
}
 800b9ee:	bf00      	nop
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b082      	sub	sp, #8
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d80b      	bhi.n	800ba26 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	885b      	ldrh	r3, [r3, #2]
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d10c      	bne.n	800ba30 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 f910 	bl	800bc44 <USBD_CtlSendStatus>
      }
      break;
 800ba24:	e004      	b.n	800ba30 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ba26:	6839      	ldr	r1, [r7, #0]
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 f840 	bl	800baae <USBD_CtlError>
      break;
 800ba2e:	e000      	b.n	800ba32 <USBD_ClrFeature+0x3c>
      break;
 800ba30:	bf00      	nop
  }
}
 800ba32:	bf00      	nop
 800ba34:	3708      	adds	r7, #8
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b084      	sub	sp, #16
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	781a      	ldrb	r2, [r3, #0]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	3301      	adds	r3, #1
 800ba54:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	781a      	ldrb	r2, [r3, #0]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	3301      	adds	r3, #1
 800ba62:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f7ff fa17 	bl	800ae98 <SWAPBYTE>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	3301      	adds	r3, #1
 800ba76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ba7e:	68f8      	ldr	r0, [r7, #12]
 800ba80:	f7ff fa0a 	bl	800ae98 <SWAPBYTE>
 800ba84:	4603      	mov	r3, r0
 800ba86:	461a      	mov	r2, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	3301      	adds	r3, #1
 800ba96:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f7ff f9fd 	bl	800ae98 <SWAPBYTE>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	461a      	mov	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	80da      	strh	r2, [r3, #6]
}
 800baa6:	bf00      	nop
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b082      	sub	sp, #8
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
 800bab6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bab8:	2180      	movs	r1, #128	; 0x80
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 fc6e 	bl	800c39c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bac0:	2100      	movs	r1, #0
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 fc6a 	bl	800c39c <USBD_LL_StallEP>
}
 800bac8:	bf00      	nop
 800baca:	3708      	adds	r7, #8
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800badc:	2300      	movs	r3, #0
 800bade:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d036      	beq.n	800bb54 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800baea:	6938      	ldr	r0, [r7, #16]
 800baec:	f000 f836 	bl	800bb5c <USBD_GetLen>
 800baf0:	4603      	mov	r3, r0
 800baf2:	3301      	adds	r3, #1
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	005b      	lsls	r3, r3, #1
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bafe:	7dfb      	ldrb	r3, [r7, #23]
 800bb00:	68ba      	ldr	r2, [r7, #8]
 800bb02:	4413      	add	r3, r2
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	7812      	ldrb	r2, [r2, #0]
 800bb08:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb0a:	7dfb      	ldrb	r3, [r7, #23]
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bb10:	7dfb      	ldrb	r3, [r7, #23]
 800bb12:	68ba      	ldr	r2, [r7, #8]
 800bb14:	4413      	add	r3, r2
 800bb16:	2203      	movs	r2, #3
 800bb18:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb1a:	7dfb      	ldrb	r3, [r7, #23]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bb20:	e013      	b.n	800bb4a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bb22:	7dfb      	ldrb	r3, [r7, #23]
 800bb24:	68ba      	ldr	r2, [r7, #8]
 800bb26:	4413      	add	r3, r2
 800bb28:	693a      	ldr	r2, [r7, #16]
 800bb2a:	7812      	ldrb	r2, [r2, #0]
 800bb2c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	3301      	adds	r3, #1
 800bb32:	613b      	str	r3, [r7, #16]
    idx++;
 800bb34:	7dfb      	ldrb	r3, [r7, #23]
 800bb36:	3301      	adds	r3, #1
 800bb38:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bb3a:	7dfb      	ldrb	r3, [r7, #23]
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	4413      	add	r3, r2
 800bb40:	2200      	movs	r2, #0
 800bb42:	701a      	strb	r2, [r3, #0]
    idx++;
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
 800bb46:	3301      	adds	r3, #1
 800bb48:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d1e7      	bne.n	800bb22 <USBD_GetString+0x52>
 800bb52:	e000      	b.n	800bb56 <USBD_GetString+0x86>
    return;
 800bb54:	bf00      	nop
  }
}
 800bb56:	3718      	adds	r7, #24
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bb64:	2300      	movs	r3, #0
 800bb66:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bb6c:	e005      	b.n	800bb7a <USBD_GetLen+0x1e>
  {
    len++;
 800bb6e:	7bfb      	ldrb	r3, [r7, #15]
 800bb70:	3301      	adds	r3, #1
 800bb72:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	3301      	adds	r3, #1
 800bb78:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d1f5      	bne.n	800bb6e <USBD_GetLen+0x12>
  }

  return len;
 800bb82:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3714      	adds	r7, #20
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2202      	movs	r2, #2
 800bba0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	68ba      	ldr	r2, [r7, #8]
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f000 fc79 	bl	800c4ae <USBD_LL_Transmit>

  return USBD_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b084      	sub	sp, #16
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	60f8      	str	r0, [r7, #12]
 800bbce:	60b9      	str	r1, [r7, #8]
 800bbd0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	68ba      	ldr	r2, [r7, #8]
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f000 fc68 	bl	800c4ae <USBD_LL_Transmit>

  return USBD_OK;
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3710      	adds	r7, #16
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2203      	movs	r2, #3
 800bbf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	68ba      	ldr	r2, [r7, #8]
 800bc10:	2100      	movs	r1, #0
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f000 fc6c 	bl	800c4f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3710      	adds	r7, #16
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b084      	sub	sp, #16
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	60f8      	str	r0, [r7, #12]
 800bc2a:	60b9      	str	r1, [r7, #8]
 800bc2c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	2100      	movs	r1, #0
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f000 fc5b 	bl	800c4f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2204      	movs	r2, #4
 800bc50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc54:	2300      	movs	r3, #0
 800bc56:	2200      	movs	r2, #0
 800bc58:	2100      	movs	r1, #0
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 fc27 	bl	800c4ae <USBD_LL_Transmit>

  return USBD_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3708      	adds	r7, #8
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b082      	sub	sp, #8
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2205      	movs	r2, #5
 800bc76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	2100      	movs	r1, #0
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fc35 	bl	800c4f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800bc94:	2201      	movs	r2, #1
 800bc96:	4913      	ldr	r1, [pc, #76]	; (800bce4 <MX_USB_DEVICE_Init+0x54>)
 800bc98:	4813      	ldr	r0, [pc, #76]	; (800bce8 <MX_USB_DEVICE_Init+0x58>)
 800bc9a:	f7fe fd11 	bl	800a6c0 <USBD_Init>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bca4:	f7f4 fc44 	bl	8000530 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_AUDIO) != USBD_OK)
 800bca8:	4910      	ldr	r1, [pc, #64]	; (800bcec <MX_USB_DEVICE_Init+0x5c>)
 800bcaa:	480f      	ldr	r0, [pc, #60]	; (800bce8 <MX_USB_DEVICE_Init+0x58>)
 800bcac:	f7fe fd38 	bl	800a720 <USBD_RegisterClass>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d001      	beq.n	800bcba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bcb6:	f7f4 fc3b 	bl	8000530 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceHS, &USBD_AUDIO_fops_HS) != USBD_OK)
 800bcba:	490d      	ldr	r1, [pc, #52]	; (800bcf0 <MX_USB_DEVICE_Init+0x60>)
 800bcbc:	480a      	ldr	r0, [pc, #40]	; (800bce8 <MX_USB_DEVICE_Init+0x58>)
 800bcbe:	f7fe fcb1 	bl	800a624 <USBD_AUDIO_RegisterInterface>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d001      	beq.n	800bccc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bcc8:	f7f4 fc32 	bl	8000530 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800bccc:	4806      	ldr	r0, [pc, #24]	; (800bce8 <MX_USB_DEVICE_Init+0x58>)
 800bcce:	f7fe fd5d 	bl	800a78c <USBD_Start>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d001      	beq.n	800bcdc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bcd8:	f7f4 fc2a 	bl	8000530 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800bcdc:	f7f7 f806 	bl	8002cec <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bce0:	bf00      	nop
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	240000e0 	.word	0x240000e0
 800bce8:	24000448 	.word	0x24000448
 800bcec:	24000010 	.word	0x24000010
 800bcf0:	240000c4 	.word	0x240000c4

0800bcf4 <AUDIO_Init_HS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_HS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 9 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 800bd00:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3714      	adds	r7, #20
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr

0800bd0e <AUDIO_DeInit_HS>:
  * @brief  DeInitializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_HS(uint32_t options)
{
 800bd0e:	b480      	push	{r7}
 800bd10:	b083      	sub	sp, #12
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 10 */
  UNUSED(options);
  return (USBD_OK);
 800bd16:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <AUDIO_AudioCmd_HS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_HS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b085      	sub	sp, #20
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	4613      	mov	r3, r2
 800bd30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 11 */
  switch(cmd)
 800bd32:	79fb      	ldrb	r3, [r7, #7]
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d001      	beq.n	800bd3c <AUDIO_AudioCmd_HS+0x18>
 800bd38:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800bd3a:	e000      	b.n	800bd3e <AUDIO_AudioCmd_HS+0x1a>
    break;
 800bd3c:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800bd3e:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3714      	adds	r7, #20
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <AUDIO_VolumeCtl_HS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_HS(uint8_t vol)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	4603      	mov	r3, r0
 800bd54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */
  UNUSED(vol);
  return (USBD_OK);
 800bd56:	2300      	movs	r3, #0
  /* USER CODE END 12 */
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	370c      	adds	r7, #12
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <AUDIO_MuteCtl_HS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_HS(uint8_t cmd)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 13 */
  UNUSED(cmd);
  return (USBD_OK);
 800bd6e:	2300      	movs	r3, #0
  /* USER CODE END 13 */
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <AUDIO_PeriodicTC_HS>:
  * @brief  AUDIO_PeriodicTC_HS
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_HS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	4613      	mov	r3, r2
 800bd88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 14 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800bd8a:	2300      	movs	r3, #0
  /* USER CODE END 14 */
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3714      	adds	r7, #20
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <AUDIO_GetState_HS>:
/**
  * @brief  Gets AUDIO state.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_HS(void)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */
  return (USBD_OK);
 800bd9c:	2300      	movs	r3, #0
  /* USER CODE END 15 */
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	4603      	mov	r3, r0
 800bdb0:	6039      	str	r1, [r7, #0]
 800bdb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	2212      	movs	r2, #18
 800bdb8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800bdba:	4b03      	ldr	r3, [pc, #12]	; (800bdc8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr
 800bdc8:	24000100 	.word	0x24000100

0800bdcc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	6039      	str	r1, [r7, #0]
 800bdd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	2204      	movs	r2, #4
 800bddc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bdde:	4b03      	ldr	r3, [pc, #12]	; (800bdec <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr
 800bdec:	24000114 	.word	0x24000114

0800bdf0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	6039      	str	r1, [r7, #0]
 800bdfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bdfc:	79fb      	ldrb	r3, [r7, #7]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d105      	bne.n	800be0e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	4907      	ldr	r1, [pc, #28]	; (800be24 <USBD_HS_ProductStrDescriptor+0x34>)
 800be06:	4808      	ldr	r0, [pc, #32]	; (800be28 <USBD_HS_ProductStrDescriptor+0x38>)
 800be08:	f7ff fe62 	bl	800bad0 <USBD_GetString>
 800be0c:	e004      	b.n	800be18 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	4904      	ldr	r1, [pc, #16]	; (800be24 <USBD_HS_ProductStrDescriptor+0x34>)
 800be12:	4805      	ldr	r0, [pc, #20]	; (800be28 <USBD_HS_ProductStrDescriptor+0x38>)
 800be14:	f7ff fe5c 	bl	800bad0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be18:	4b02      	ldr	r3, [pc, #8]	; (800be24 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	24000724 	.word	0x24000724
 800be28:	0800c650 	.word	0x0800c650

0800be2c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	4603      	mov	r3, r0
 800be34:	6039      	str	r1, [r7, #0]
 800be36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	4904      	ldr	r1, [pc, #16]	; (800be4c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800be3c:	4804      	ldr	r0, [pc, #16]	; (800be50 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800be3e:	f7ff fe47 	bl	800bad0 <USBD_GetString>
  return USBD_StrDesc;
 800be42:	4b02      	ldr	r3, [pc, #8]	; (800be4c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800be44:	4618      	mov	r0, r3
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	24000724 	.word	0x24000724
 800be50:	0800c664 	.word	0x0800c664

0800be54 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	4603      	mov	r3, r0
 800be5c:	6039      	str	r1, [r7, #0]
 800be5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	221a      	movs	r2, #26
 800be64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be66:	f000 f843 	bl	800bef0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800be6a:	4b02      	ldr	r3, [pc, #8]	; (800be74 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3708      	adds	r7, #8
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}
 800be74:	24000118 	.word	0x24000118

0800be78 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	4603      	mov	r3, r0
 800be80:	6039      	str	r1, [r7, #0]
 800be82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be84:	79fb      	ldrb	r3, [r7, #7]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d105      	bne.n	800be96 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800be8a:	683a      	ldr	r2, [r7, #0]
 800be8c:	4907      	ldr	r1, [pc, #28]	; (800beac <USBD_HS_ConfigStrDescriptor+0x34>)
 800be8e:	4808      	ldr	r0, [pc, #32]	; (800beb0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800be90:	f7ff fe1e 	bl	800bad0 <USBD_GetString>
 800be94:	e004      	b.n	800bea0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800be96:	683a      	ldr	r2, [r7, #0]
 800be98:	4904      	ldr	r1, [pc, #16]	; (800beac <USBD_HS_ConfigStrDescriptor+0x34>)
 800be9a:	4805      	ldr	r0, [pc, #20]	; (800beb0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800be9c:	f7ff fe18 	bl	800bad0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bea0:	4b02      	ldr	r3, [pc, #8]	; (800beac <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3708      	adds	r7, #8
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	24000724 	.word	0x24000724
 800beb0:	0800c678 	.word	0x0800c678

0800beb4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	4603      	mov	r3, r0
 800bebc:	6039      	str	r1, [r7, #0]
 800bebe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bec0:	79fb      	ldrb	r3, [r7, #7]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d105      	bne.n	800bed2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	4907      	ldr	r1, [pc, #28]	; (800bee8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800beca:	4808      	ldr	r0, [pc, #32]	; (800beec <USBD_HS_InterfaceStrDescriptor+0x38>)
 800becc:	f7ff fe00 	bl	800bad0 <USBD_GetString>
 800bed0:	e004      	b.n	800bedc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800bed2:	683a      	ldr	r2, [r7, #0]
 800bed4:	4904      	ldr	r1, [pc, #16]	; (800bee8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800bed6:	4805      	ldr	r0, [pc, #20]	; (800beec <USBD_HS_InterfaceStrDescriptor+0x38>)
 800bed8:	f7ff fdfa 	bl	800bad0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bedc:	4b02      	ldr	r3, [pc, #8]	; (800bee8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3708      	adds	r7, #8
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	24000724 	.word	0x24000724
 800beec:	0800c688 	.word	0x0800c688

0800bef0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bef6:	4b0f      	ldr	r3, [pc, #60]	; (800bf34 <Get_SerialNum+0x44>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800befc:	4b0e      	ldr	r3, [pc, #56]	; (800bf38 <Get_SerialNum+0x48>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf02:	4b0e      	ldr	r3, [pc, #56]	; (800bf3c <Get_SerialNum+0x4c>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf08:	68fa      	ldr	r2, [r7, #12]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d009      	beq.n	800bf2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf16:	2208      	movs	r2, #8
 800bf18:	4909      	ldr	r1, [pc, #36]	; (800bf40 <Get_SerialNum+0x50>)
 800bf1a:	68f8      	ldr	r0, [r7, #12]
 800bf1c:	f000 f814 	bl	800bf48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf20:	2204      	movs	r2, #4
 800bf22:	4908      	ldr	r1, [pc, #32]	; (800bf44 <Get_SerialNum+0x54>)
 800bf24:	68b8      	ldr	r0, [r7, #8]
 800bf26:	f000 f80f 	bl	800bf48 <IntToUnicode>
  }
}
 800bf2a:	bf00      	nop
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	1ff1e800 	.word	0x1ff1e800
 800bf38:	1ff1e804 	.word	0x1ff1e804
 800bf3c:	1ff1e808 	.word	0x1ff1e808
 800bf40:	2400011a 	.word	0x2400011a
 800bf44:	2400012a 	.word	0x2400012a

0800bf48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b087      	sub	sp, #28
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	4613      	mov	r3, r2
 800bf54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf56:	2300      	movs	r3, #0
 800bf58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	75fb      	strb	r3, [r7, #23]
 800bf5e:	e027      	b.n	800bfb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	0f1b      	lsrs	r3, r3, #28
 800bf64:	2b09      	cmp	r3, #9
 800bf66:	d80b      	bhi.n	800bf80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	0f1b      	lsrs	r3, r3, #28
 800bf6c:	b2da      	uxtb	r2, r3
 800bf6e:	7dfb      	ldrb	r3, [r7, #23]
 800bf70:	005b      	lsls	r3, r3, #1
 800bf72:	4619      	mov	r1, r3
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	440b      	add	r3, r1
 800bf78:	3230      	adds	r2, #48	; 0x30
 800bf7a:	b2d2      	uxtb	r2, r2
 800bf7c:	701a      	strb	r2, [r3, #0]
 800bf7e:	e00a      	b.n	800bf96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	0f1b      	lsrs	r3, r3, #28
 800bf84:	b2da      	uxtb	r2, r3
 800bf86:	7dfb      	ldrb	r3, [r7, #23]
 800bf88:	005b      	lsls	r3, r3, #1
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	440b      	add	r3, r1
 800bf90:	3237      	adds	r2, #55	; 0x37
 800bf92:	b2d2      	uxtb	r2, r2
 800bf94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	011b      	lsls	r3, r3, #4
 800bf9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf9c:	7dfb      	ldrb	r3, [r7, #23]
 800bf9e:	005b      	lsls	r3, r3, #1
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	68ba      	ldr	r2, [r7, #8]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bfaa:	7dfb      	ldrb	r3, [r7, #23]
 800bfac:	3301      	adds	r3, #1
 800bfae:	75fb      	strb	r3, [r7, #23]
 800bfb0:	7dfa      	ldrb	r2, [r7, #23]
 800bfb2:	79fb      	ldrb	r3, [r7, #7]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d3d3      	bcc.n	800bf60 <IntToUnicode+0x18>
  }
}
 800bfb8:	bf00      	nop
 800bfba:	bf00      	nop
 800bfbc:	371c      	adds	r7, #28
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr
	...

0800bfc8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b0b2      	sub	sp, #200	; 0xc8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bfd0:	f107 0310 	add.w	r3, r7, #16
 800bfd4:	22b8      	movs	r2, #184	; 0xb8
 800bfd6:	2100      	movs	r1, #0
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f000 fb01 	bl	800c5e0 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4a1a      	ldr	r2, [pc, #104]	; (800c04c <HAL_PCD_MspInit+0x84>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d12c      	bne.n	800c042 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bfe8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800bfec:	f04f 0300 	mov.w	r3, #0
 800bff0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bff4:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800bff8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bffc:	f107 0310 	add.w	r3, r7, #16
 800c000:	4618      	mov	r0, r3
 800c002:	f7f7 fde9 	bl	8003bd8 <HAL_RCCEx_PeriphCLKConfig>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d001      	beq.n	800c010 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 800c00c:	f7f4 fa90 	bl	8000530 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800c010:	f7f6 fe6c 	bl	8002cec <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800c014:	4b0e      	ldr	r3, [pc, #56]	; (800c050 <HAL_PCD_MspInit+0x88>)
 800c016:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c01a:	4a0d      	ldr	r2, [pc, #52]	; (800c050 <HAL_PCD_MspInit+0x88>)
 800c01c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c020:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c024:	4b0a      	ldr	r3, [pc, #40]	; (800c050 <HAL_PCD_MspInit+0x88>)
 800c026:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c02a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c02e:	60fb      	str	r3, [r7, #12]
 800c030:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800c032:	2200      	movs	r2, #0
 800c034:	2100      	movs	r1, #0
 800c036:	204d      	movs	r0, #77	; 0x4d
 800c038:	f7f5 f987 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800c03c:	204d      	movs	r0, #77	; 0x4d
 800c03e:	f7f5 f99e 	bl	800137e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800c042:	bf00      	nop
 800c044:	37c8      	adds	r7, #200	; 0xc8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	40040000 	.word	0x40040000
 800c050:	58024400 	.word	0x58024400

0800c054 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c068:	4619      	mov	r1, r3
 800c06a:	4610      	mov	r0, r2
 800c06c:	f7fe fbdb 	bl	800a826 <USBD_LL_SetupStage>
}
 800c070:	bf00      	nop
 800c072:	3708      	adds	r7, #8
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c08a:	78fa      	ldrb	r2, [r7, #3]
 800c08c:	6879      	ldr	r1, [r7, #4]
 800c08e:	4613      	mov	r3, r2
 800c090:	00db      	lsls	r3, r3, #3
 800c092:	4413      	add	r3, r2
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	440b      	add	r3, r1
 800c098:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	78fb      	ldrb	r3, [r7, #3]
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	f7fe fc15 	bl	800a8d0 <USBD_LL_DataOutStage>
}
 800c0a6:	bf00      	nop
 800c0a8:	3708      	adds	r7, #8
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b082      	sub	sp, #8
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c0c0:	78fa      	ldrb	r2, [r7, #3]
 800c0c2:	6879      	ldr	r1, [r7, #4]
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	00db      	lsls	r3, r3, #3
 800c0c8:	4413      	add	r3, r2
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	440b      	add	r3, r1
 800c0ce:	3348      	adds	r3, #72	; 0x48
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	78fb      	ldrb	r3, [r7, #3]
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	f7fe fcae 	bl	800aa36 <USBD_LL_DataInStage>
}
 800c0da:	bf00      	nop
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b082      	sub	sp, #8
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fe fde8 	bl	800acc6 <USBD_LL_SOF>
}
 800c0f6:	bf00      	nop
 800c0f8:	3708      	adds	r7, #8
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}

0800c0fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b084      	sub	sp, #16
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c106:	2301      	movs	r3, #1
 800c108:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	691b      	ldr	r3, [r3, #16]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d102      	bne.n	800c118 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c112:	2300      	movs	r3, #0
 800c114:	73fb      	strb	r3, [r7, #15]
 800c116:	e008      	b.n	800c12a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	691b      	ldr	r3, [r3, #16]
 800c11c:	2b02      	cmp	r3, #2
 800c11e:	d102      	bne.n	800c126 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c120:	2301      	movs	r3, #1
 800c122:	73fb      	strb	r3, [r7, #15]
 800c124:	e001      	b.n	800c12a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c126:	f7f4 fa03 	bl	8000530 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c130:	7bfa      	ldrb	r2, [r7, #15]
 800c132:	4611      	mov	r1, r2
 800c134:	4618      	mov	r0, r3
 800c136:	f7fe fd82 	bl	800ac3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c140:	4618      	mov	r0, r3
 800c142:	f7fe fd2a 	bl	800ab9a <USBD_LL_Reset>
}
 800c146:	bf00      	nop
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
	...

0800c150 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c15e:	4618      	mov	r0, r3
 800c160:	f7fe fd7d 	bl	800ac5e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	6812      	ldr	r2, [r2, #0]
 800c172:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c176:	f043 0301 	orr.w	r3, r3, #1
 800c17a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6a1b      	ldr	r3, [r3, #32]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d005      	beq.n	800c190 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c184:	4b04      	ldr	r3, [pc, #16]	; (800c198 <HAL_PCD_SuspendCallback+0x48>)
 800c186:	691b      	ldr	r3, [r3, #16]
 800c188:	4a03      	ldr	r2, [pc, #12]	; (800c198 <HAL_PCD_SuspendCallback+0x48>)
 800c18a:	f043 0306 	orr.w	r3, r3, #6
 800c18e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c190:	bf00      	nop
 800c192:	3708      	adds	r7, #8
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}
 800c198:	e000ed00 	.word	0xe000ed00

0800c19c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7fe fd73 	bl	800ac96 <USBD_LL_Resume>
}
 800c1b0:	bf00      	nop
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1ca:	78fa      	ldrb	r2, [r7, #3]
 800c1cc:	4611      	mov	r1, r2
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f7fe fdcb 	bl	800ad6a <USBD_LL_IsoOUTIncomplete>
}
 800c1d4:	bf00      	nop
 800c1d6:	3708      	adds	r7, #8
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1ee:	78fa      	ldrb	r2, [r7, #3]
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fe fd87 	bl	800ad06 <USBD_LL_IsoINIncomplete>
}
 800c1f8:	bf00      	nop
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fe fddd 	bl	800adce <USBD_LL_DevConnected>
}
 800c214:	bf00      	nop
 800c216:	3708      	adds	r7, #8
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fe fdda 	bl	800ade4 <USBD_LL_DevDisconnected>
}
 800c230:	bf00      	nop
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	2b01      	cmp	r3, #1
 800c246:	d140      	bne.n	800c2ca <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800c248:	4a22      	ldr	r2, [pc, #136]	; (800c2d4 <USBD_LL_Init+0x9c>)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4a20      	ldr	r2, [pc, #128]	; (800c2d4 <USBD_LL_Init+0x9c>)
 800c254:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800c258:	4b1e      	ldr	r3, [pc, #120]	; (800c2d4 <USBD_LL_Init+0x9c>)
 800c25a:	4a1f      	ldr	r2, [pc, #124]	; (800c2d8 <USBD_LL_Init+0xa0>)
 800c25c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800c25e:	4b1d      	ldr	r3, [pc, #116]	; (800c2d4 <USBD_LL_Init+0x9c>)
 800c260:	2209      	movs	r2, #9
 800c262:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800c264:	4b1b      	ldr	r3, [pc, #108]	; (800c2d4 <USBD_LL_Init+0x9c>)
 800c266:	2202      	movs	r2, #2
 800c268:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800c26a:	4b1a      	ldr	r3, [pc, #104]	; (800c2d4 <USBD_LL_Init+0x9c>)
 800c26c:	2200      	movs	r2, #0
 800c26e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800c270:	4b18      	ldr	r3, [pc, #96]	; (800c2d4 <USBD_LL_Init+0x9c>)
 800c272:	2202      	movs	r2, #2
 800c274:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800c276:	4b17      	ldr	r3, [pc, #92]	; (800c2d4 <USBD_LL_Init+0x9c>)
 800c278:	2200      	movs	r2, #0
 800c27a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800c27c:	4b15      	ldr	r3, [pc, #84]	; (800c2d4 <USBD_LL_Init+0x9c>)
 800c27e:	2200      	movs	r2, #0
 800c280:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800c282:	4b14      	ldr	r3, [pc, #80]	; (800c2d4 <USBD_LL_Init+0x9c>)
 800c284:	2200      	movs	r2, #0
 800c286:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800c288:	4b12      	ldr	r3, [pc, #72]	; (800c2d4 <USBD_LL_Init+0x9c>)
 800c28a:	2200      	movs	r2, #0
 800c28c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800c28e:	4b11      	ldr	r3, [pc, #68]	; (800c2d4 <USBD_LL_Init+0x9c>)
 800c290:	2200      	movs	r2, #0
 800c292:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800c294:	4b0f      	ldr	r3, [pc, #60]	; (800c2d4 <USBD_LL_Init+0x9c>)
 800c296:	2200      	movs	r2, #0
 800c298:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800c29a:	480e      	ldr	r0, [pc, #56]	; (800c2d4 <USBD_LL_Init+0x9c>)
 800c29c:	f7f5 fa32 	bl	8001704 <HAL_PCD_Init>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d001      	beq.n	800c2aa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800c2a6:	f7f4 f943 	bl	8000530 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800c2aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c2ae:	4809      	ldr	r0, [pc, #36]	; (800c2d4 <USBD_LL_Init+0x9c>)
 800c2b0:	f7f6 fca1 	bl	8002bf6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800c2b4:	2280      	movs	r2, #128	; 0x80
 800c2b6:	2100      	movs	r1, #0
 800c2b8:	4806      	ldr	r0, [pc, #24]	; (800c2d4 <USBD_LL_Init+0x9c>)
 800c2ba:	f7f6 fc55 	bl	8002b68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800c2be:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800c2c2:	2101      	movs	r1, #1
 800c2c4:	4803      	ldr	r0, [pc, #12]	; (800c2d4 <USBD_LL_Init+0x9c>)
 800c2c6:	f7f6 fc4f 	bl	8002b68 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800c2ca:	2300      	movs	r3, #0
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3708      	adds	r7, #8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	24000924 	.word	0x24000924
 800c2d8:	40040000 	.word	0x40040000

0800c2dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7f5 fb2a 	bl	800194c <HAL_PCD_Start>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2fc:	7bfb      	ldrb	r3, [r7, #15]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f000 f942 	bl	800c588 <USBD_Get_USB_Status>
 800c304:	4603      	mov	r3, r0
 800c306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c308:	7bbb      	ldrb	r3, [r7, #14]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b084      	sub	sp, #16
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	4608      	mov	r0, r1
 800c31c:	4611      	mov	r1, r2
 800c31e:	461a      	mov	r2, r3
 800c320:	4603      	mov	r3, r0
 800c322:	70fb      	strb	r3, [r7, #3]
 800c324:	460b      	mov	r3, r1
 800c326:	70bb      	strb	r3, [r7, #2]
 800c328:	4613      	mov	r3, r2
 800c32a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c32c:	2300      	movs	r3, #0
 800c32e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c330:	2300      	movs	r3, #0
 800c332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c33a:	78bb      	ldrb	r3, [r7, #2]
 800c33c:	883a      	ldrh	r2, [r7, #0]
 800c33e:	78f9      	ldrb	r1, [r7, #3]
 800c340:	f7f6 f82a 	bl	8002398 <HAL_PCD_EP_Open>
 800c344:	4603      	mov	r3, r0
 800c346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c348:	7bfb      	ldrb	r3, [r7, #15]
 800c34a:	4618      	mov	r0, r3
 800c34c:	f000 f91c 	bl	800c588 <USBD_Get_USB_Status>
 800c350:	4603      	mov	r3, r0
 800c352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c354:	7bbb      	ldrb	r3, [r7, #14]
}
 800c356:	4618      	mov	r0, r3
 800c358:	3710      	adds	r7, #16
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c35e:	b580      	push	{r7, lr}
 800c360:	b084      	sub	sp, #16
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
 800c366:	460b      	mov	r3, r1
 800c368:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c36a:	2300      	movs	r3, #0
 800c36c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c36e:	2300      	movs	r3, #0
 800c370:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c378:	78fa      	ldrb	r2, [r7, #3]
 800c37a:	4611      	mov	r1, r2
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7f6 f873 	bl	8002468 <HAL_PCD_EP_Close>
 800c382:	4603      	mov	r3, r0
 800c384:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c386:	7bfb      	ldrb	r3, [r7, #15]
 800c388:	4618      	mov	r0, r3
 800c38a:	f000 f8fd 	bl	800c588 <USBD_Get_USB_Status>
 800c38e:	4603      	mov	r3, r0
 800c390:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c392:	7bbb      	ldrb	r3, [r7, #14]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3710      	adds	r7, #16
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3b6:	78fa      	ldrb	r2, [r7, #3]
 800c3b8:	4611      	mov	r1, r2
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7f6 f92d 	bl	800261a <HAL_PCD_EP_SetStall>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3c4:	7bfb      	ldrb	r3, [r7, #15]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f000 f8de 	bl	800c588 <USBD_Get_USB_Status>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b084      	sub	sp, #16
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3f4:	78fa      	ldrb	r2, [r7, #3]
 800c3f6:	4611      	mov	r1, r2
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7f6 f972 	bl	80026e2 <HAL_PCD_EP_ClrStall>
 800c3fe:	4603      	mov	r3, r0
 800c400:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c402:	7bfb      	ldrb	r3, [r7, #15]
 800c404:	4618      	mov	r0, r3
 800c406:	f000 f8bf 	bl	800c588 <USBD_Get_USB_Status>
 800c40a:	4603      	mov	r3, r0
 800c40c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c40e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3710      	adds	r7, #16
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c418:	b480      	push	{r7}
 800c41a:	b085      	sub	sp, #20
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	460b      	mov	r3, r1
 800c422:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c42a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c42c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c430:	2b00      	cmp	r3, #0
 800c432:	da0b      	bge.n	800c44c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c434:	78fb      	ldrb	r3, [r7, #3]
 800c436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c43a:	68f9      	ldr	r1, [r7, #12]
 800c43c:	4613      	mov	r3, r2
 800c43e:	00db      	lsls	r3, r3, #3
 800c440:	4413      	add	r3, r2
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	440b      	add	r3, r1
 800c446:	333e      	adds	r3, #62	; 0x3e
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	e00b      	b.n	800c464 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c44c:	78fb      	ldrb	r3, [r7, #3]
 800c44e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c452:	68f9      	ldr	r1, [r7, #12]
 800c454:	4613      	mov	r3, r2
 800c456:	00db      	lsls	r3, r3, #3
 800c458:	4413      	add	r3, r2
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	440b      	add	r3, r1
 800c45e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c462:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c464:	4618      	mov	r0, r3
 800c466:	3714      	adds	r7, #20
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	460b      	mov	r3, r1
 800c47a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c47c:	2300      	movs	r3, #0
 800c47e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c480:	2300      	movs	r3, #0
 800c482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c48a:	78fa      	ldrb	r2, [r7, #3]
 800c48c:	4611      	mov	r1, r2
 800c48e:	4618      	mov	r0, r3
 800c490:	f7f5 ff5d 	bl	800234e <HAL_PCD_SetAddress>
 800c494:	4603      	mov	r3, r0
 800c496:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c498:	7bfb      	ldrb	r3, [r7, #15]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f000 f874 	bl	800c588 <USBD_Get_USB_Status>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b086      	sub	sp, #24
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	60f8      	str	r0, [r7, #12]
 800c4b6:	607a      	str	r2, [r7, #4]
 800c4b8:	603b      	str	r3, [r7, #0]
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c4cc:	7af9      	ldrb	r1, [r7, #11]
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	f7f6 f867 	bl	80025a4 <HAL_PCD_EP_Transmit>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4da:	7dfb      	ldrb	r3, [r7, #23]
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f000 f853 	bl	800c588 <USBD_Get_USB_Status>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3718      	adds	r7, #24
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b086      	sub	sp, #24
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	607a      	str	r2, [r7, #4]
 800c4fa:	603b      	str	r3, [r7, #0]
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c500:	2300      	movs	r3, #0
 800c502:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c504:	2300      	movs	r3, #0
 800c506:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c50e:	7af9      	ldrb	r1, [r7, #11]
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	f7f5 fff2 	bl	80024fc <HAL_PCD_EP_Receive>
 800c518:	4603      	mov	r3, r0
 800c51a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c51c:	7dfb      	ldrb	r3, [r7, #23]
 800c51e:	4618      	mov	r0, r3
 800c520:	f000 f832 	bl	800c588 <USBD_Get_USB_Status>
 800c524:	4603      	mov	r3, r0
 800c526:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c528:	7dbb      	ldrb	r3, [r7, #22]
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3718      	adds	r7, #24
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c532:	b580      	push	{r7, lr}
 800c534:	b082      	sub	sp, #8
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
 800c53a:	460b      	mov	r3, r1
 800c53c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c544:	78fa      	ldrb	r2, [r7, #3]
 800c546:	4611      	mov	r1, r2
 800c548:	4618      	mov	r0, r3
 800c54a:	f7f6 f813 	bl	8002574 <HAL_PCD_EP_GetRxCount>
 800c54e:	4603      	mov	r3, r0
}
 800c550:	4618      	mov	r0, r3
 800c552:	3708      	adds	r7, #8
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c560:	4b03      	ldr	r3, [pc, #12]	; (800c570 <USBD_static_malloc+0x18>)
}
 800c562:	4618      	mov	r0, r3
 800c564:	370c      	adds	r7, #12
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	24000e30 	.word	0x24000e30

0800c574 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c574:	b480      	push	{r7}
 800c576:	b083      	sub	sp, #12
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800c57c:	bf00      	nop
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	4603      	mov	r3, r0
 800c590:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c592:	2300      	movs	r3, #0
 800c594:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c596:	79fb      	ldrb	r3, [r7, #7]
 800c598:	2b03      	cmp	r3, #3
 800c59a:	d817      	bhi.n	800c5cc <USBD_Get_USB_Status+0x44>
 800c59c:	a201      	add	r2, pc, #4	; (adr r2, 800c5a4 <USBD_Get_USB_Status+0x1c>)
 800c59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5a2:	bf00      	nop
 800c5a4:	0800c5b5 	.word	0x0800c5b5
 800c5a8:	0800c5bb 	.word	0x0800c5bb
 800c5ac:	0800c5c1 	.word	0x0800c5c1
 800c5b0:	0800c5c7 	.word	0x0800c5c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5b8:	e00b      	b.n	800c5d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5ba:	2303      	movs	r3, #3
 800c5bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c5be:	e008      	b.n	800c5d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c5c4:	e005      	b.n	800c5d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ca:	e002      	b.n	800c5d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c5cc:	2303      	movs	r3, #3
 800c5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c5d0:	bf00      	nop
  }
  return usb_status;
 800c5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3714      	adds	r7, #20
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <memset>:
 800c5e0:	4402      	add	r2, r0
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d100      	bne.n	800c5ea <memset+0xa>
 800c5e8:	4770      	bx	lr
 800c5ea:	f803 1b01 	strb.w	r1, [r3], #1
 800c5ee:	e7f9      	b.n	800c5e4 <memset+0x4>

0800c5f0 <__libc_init_array>:
 800c5f0:	b570      	push	{r4, r5, r6, lr}
 800c5f2:	4d0d      	ldr	r5, [pc, #52]	; (800c628 <__libc_init_array+0x38>)
 800c5f4:	4c0d      	ldr	r4, [pc, #52]	; (800c62c <__libc_init_array+0x3c>)
 800c5f6:	1b64      	subs	r4, r4, r5
 800c5f8:	10a4      	asrs	r4, r4, #2
 800c5fa:	2600      	movs	r6, #0
 800c5fc:	42a6      	cmp	r6, r4
 800c5fe:	d109      	bne.n	800c614 <__libc_init_array+0x24>
 800c600:	4d0b      	ldr	r5, [pc, #44]	; (800c630 <__libc_init_array+0x40>)
 800c602:	4c0c      	ldr	r4, [pc, #48]	; (800c634 <__libc_init_array+0x44>)
 800c604:	f000 f818 	bl	800c638 <_init>
 800c608:	1b64      	subs	r4, r4, r5
 800c60a:	10a4      	asrs	r4, r4, #2
 800c60c:	2600      	movs	r6, #0
 800c60e:	42a6      	cmp	r6, r4
 800c610:	d105      	bne.n	800c61e <__libc_init_array+0x2e>
 800c612:	bd70      	pop	{r4, r5, r6, pc}
 800c614:	f855 3b04 	ldr.w	r3, [r5], #4
 800c618:	4798      	blx	r3
 800c61a:	3601      	adds	r6, #1
 800c61c:	e7ee      	b.n	800c5fc <__libc_init_array+0xc>
 800c61e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c622:	4798      	blx	r3
 800c624:	3601      	adds	r6, #1
 800c626:	e7f2      	b.n	800c60e <__libc_init_array+0x1e>
 800c628:	0800c6b8 	.word	0x0800c6b8
 800c62c:	0800c6b8 	.word	0x0800c6b8
 800c630:	0800c6b8 	.word	0x0800c6b8
 800c634:	0800c6bc 	.word	0x0800c6bc

0800c638 <_init>:
 800c638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c63a:	bf00      	nop
 800c63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c63e:	bc08      	pop	{r3}
 800c640:	469e      	mov	lr, r3
 800c642:	4770      	bx	lr

0800c644 <_fini>:
 800c644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c646:	bf00      	nop
 800c648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c64a:	bc08      	pop	{r3}
 800c64c:	469e      	mov	lr, r3
 800c64e:	4770      	bx	lr
